{"version":3,"sources":["components/meet-setup/ColorPicker.module.scss","components/lifting/LiftingView.module.scss","components/lifting/TopBar.module.scss","components/results/ResultsView.module.scss","components/lifting/BarLoad.module.scss","components/lifting/LiftingTable.module.scss","components/lifting/LiftingFooter.module.scss","serviceWorker.js","reducers/versionsReducer.js","versions.js","logic/date.js","logic/units.js","constants/plateColors.js","reducers/meetReducer.js","logic/coefficients/bodyweight-multiple.js","logic/coefficients/dots.js","logic/coefficients/schwartzmalone.js","logic/coefficients/wilks.js","logic/coefficients/glossbrenner.js","logic/coefficients/ipf.js","logic/coefficients/nasa.js","logic/entry.js","reducers/registrationReducer.js","reducers/liftingReducer.js","reducers/rootReducer.js","reducers/languageReducer.js","store.js","translations/locales/index.js","components/translations/OpenLifterIntlProvider.js","actions/globalActions.js","components/home/NewMeetModal.js","components/ErrorModal.js","containers/HomeContainer.js","actions/meetSetupActions.js","components/meet-setup/MeetName.js","components/meet-setup/MeetDate.js","components/meet-setup/MeetLength.js","components/meet-setup/MeetLocation.js","components/meet-setup/PlatformCount.js","components/meet-setup/PlatformCounts.js","components/meet-setup/FederationSelect.js","components/meet-setup/AutoFillRules.js","components/meet-setup/DivisionSelect.js","components/meet-setup/WeightClassesSelect.js","components/meet-setup/BarAndCollarsWeightKg.js","components/meet-setup/ColorPicker.js","components/meet-setup/Plates.js","components/meet-setup/MeetSetup.js","containers/MeetSetupContainer.js","components/registration/LifterTable.js","components/ValidatedTextInput.js","validation/iso8601Date.js","actions/registrationActions.js","components/registration/LifterRow.js","components/registration/NewButton.js","logic/export/csv.js","logic/parsers.js","logic/import/registration-csv.js","components/registration/RegistrationView.js","containers/RegistrationContainer.js","components/weighins/LifterTable.js","actions/liftingActions.js","components/weighins/WeightInput.js","validation/positiveInteger.js","components/weighins/LifterRow.js","components/weighins/WeighinsView.js","containers/WeighinsContainer.js","components/lifting/TopBar.js","logic/barLoad.js","components/lifting/BarLoad.js","components/lifting/LeftPanel.js","components/lifting/AttemptInput.js","logic/liftingOrder.js","logic/divisionPlace.js","components/lifting/LiftingTable.js","components/lifting/LiftingFooter.js","components/lifting/ColumnWidth.js","components/lifting/LiftingView.js","containers/LiftingContainer.js","components/flight-order/OneFlightOrder.js","components/flight-order/OneCategory.js","components/flight-order/FlightOrderView.js","containers/FlightOrderContainer.js","components/results/ByDivision.js","logic/coefficients/foster-mcculloch.js","logic/pointsPlace.js","components/results/ByPoints.js","logic/export/oplcsv.js","logic/export/usapl.js","components/results/ResultsView.js","containers/ResultsContainer.js","components/debug/RandomizeHelpers.js","components/debug/RandomizeMeetSetup.js","components/debug/RandomizeRegistration.js","components/debug/RandomizeWeighins.js","components/debug/StateTools.js","containers/DebugContainer.js","containers/AboutContainer.js","components/Navigation.js","App.js","index.js","components/lifting/LeftPanel.module.scss","components/flight-order/OneFlightOrder.module.scss"],"names":["module","exports","swatch","color","popover","liftingView","middleParentContainer","leftPanelContainer","rightPanelContainer","topBar","lifterName","controlPanel","dropdown","container","rackInfo","bar","kg50","kg25","kg20","kg15","kg10","kg5","kg2p5","kg1p25","kg1","kg0p75","kg0p5","kg0p25","lbs100","lbs55","lbs45","lbs35","lbs25","lbs10","lbs5","lbs2p5","lbs1p25","lbs0p5","collar","error","liftingtable","textCell","smallCell","spacerCell","attemptInputCell","current","goodlift","nolift","attemptInput","footer","leftControls","rightControls","fullscreen","goodLift","noLift","selector","Boolean","window","location","hostname","match","initialState","stateVersion","releaseVersion","process","localDateToIso8601","d","year","getFullYear","month","getMonth","day","getDate","yearStr","String","monthStr","length","dayStr","kg2lbs","kg","lbs2kg","lbs","displayWeight","weight","s","toFixed","replace","indexOf","endsWith","slice","displayWeightOnePlace","PlateColors","PLATE_DEFAULT_BLACK","PLATE_DEFAULT_WHITE","PLATE_DEFAULT_BLUE","PLATE_DEFAULT_GREEN","PLATE_DEFAULT_GRAY","PLATE_DEFAULT_RED","PLATE_DEFAULT_YELLOW","PLATE_DEFAULT_ORANGE","PLATE_DEFAULT_PINK","PLATE_DEFAULT_PURPLE","defaultPlatesKg","weightKg","pairCount","defaultPlatesLbs","name","country","state","city","federation","date","Date","lengthDays","platformsOnDays","divisions","weightClassesKgMen","weightClassesKgWomen","weightClassesKgMx","formula","ageCoefficients","combineSleevesAndWraps","allow4thAttempts","inKg","showAlternateUnits","squatBarAndCollarsWeightKg","benchBarAndCollarsWeightKg","deadliftBarAndCollarsWeightKg","plates","getWeightClassStr","classes","bodyweightKg","i","wtclsStrKg2Lbs","kgcls","shw","asNumber","Number","truncated","Math","floor","getWeightClassLbsStr","bodyweight_multiple","totalKg","dotsPoly","a","b","c","e","x","x2","x3","dots","sex","max","min","dotsMen","dotsWomen","schwartz_coefficient","adjusted","pow","malone_coefficient","schwartzmalone","wilksPoly","f","x4","wilksMen","wilksWomen","wilks","glossbrenner","glossbrenner_coefficient_men","glossbrenner_coefficient_women","PARAMETERS","M","Sleeves","SBD","S","B","D","Single-ply","F","ipfpoints","equipment","event","normalizedEquipment","normalizedSex","params","bw_log","log","points","isNaN","nasapoints","newDefaultEntry","id","platform","flight","birthDate","age","intendedWeightClassKg","events","lot","memberId","paid","team","notes","squatRackInfo","benchRackInfo","squatKg","benchKg","deadliftKg","squatStatus","benchStatus","deadliftStatus","getBest5SquatKg","entry","best3SquatKg","getBest5BenchKg","best3BenchKg","getBest5DeadliftKg","best3DeadliftKg","getProjectedTotalKg","best3Squat","best3Bench","best3Dead","getProjectedEventTotalKg","includes","getBest3SquatKg","getBest3BenchKg","getBest3DeadliftKg","getFinalTotalKg","getFinalEventTotalKg","getProjectedWilks","getFinalWilks","getProjectedIPFPoints","getFinalIPFPoints","getProjectedBodyweightMultiple","getFinalBodyweightMultiple","getProjectedDots","getFinalDots","getProjectedGlossbrenner","getFinalGlossbrenner","getProjectedNASAPoints","getFinalNASAPoints","getProjectedSchwartzMalone","getFinalSchwartzMalone","getLiftersOnDay","entries","filter","liftToAttemptFieldName","lift","liftToStatusFieldName","entryHasLifted","liftingPresentOnPlatform","getWhetherPlatformsHaveLifted","ret","platformsOnDay","acc","push","nextEntryId","lookup","overrideAttempt","overrideEntryId","columnDivisionWidthPx","combineReducers","versions","arguments","undefined","action","type","store","language","meet","Object","objectSpread","numDays","diff","newPlatformsOnDays","count","defaultPlates","defaultBar","classesKg","index","findIndex","p","newPlates","changes","newState","assign","registration","obj","overwriteDefaults","newEntry","previousEntry","entryId","item","attemptOneIndexed","field","newEntries","oldEntry","newarray","newfields","status","success","fieldStatus","platformEntries","lifting","attempt","combined","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","locales","es","eo","OpenLifterIntlProvider","this","props","messages","translations","react","index_es","locale","children","React","connect","overwriteStore","NewMeetModal","react_default","createElement","Modal","show","onHide","close","Header","closeButton","Title","Body","Footer","lib","to","Button","onClick","bsStyle","Component","dispatch","newGlobal","ErrorModal","title","centerConsole","maxWidth","margin","HomeContainer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLoadClick","loadhelper","document","getElementById","click","handleNewClick","setState","showNewMeetModal","closeConfirmModal","closeErrorModal","handleLoadFileInput","loadHelper","HTMLInputElement","selectedFile","files","rememberThis","assertThisInitialized","reader","FileReader","onload","errored","JSON","parse","target","result","err","readAsText","handleSaveClick","meetname","redux","stringify","blob","Blob","saveAs","renderContinueButton","bsSize","block","bind","newMeetButton","wrongVersion","dataReleaseVersion","buttonMargin","marginBottom","warning","Grid","style","home_NewMeetModal","components_ErrorModal","Row","Col","md","alt","src","href","rel","textAlign","marginTop","accept","display","onChange","setMeetName","setFederation","setDivisions","setLengthDays","setPlatformsOnDays","setWeightClasses","updateMeet","MeetName","context","handleChange","handleBlur","value","getValidationState","FormGroup","validationState","ControlLabel","FormControl","placeholder","onBlur","MeetDate","initialDate","_s$split","split","_s$split2","slicedToArray","parseInt","setFullYear","iso8601ToLocalDate","react_datepicker_es","dateFormat","selected","setMeetDate","MeetLength","pattern","step","days","MeetLocation","_this2","PlatformCount","label","PlatformCounts","createPlatformInputs","inputs","meet_setup_PlatformCount","FederationSelect","traditionalDefaults","gpcDefaults","spfDefaults","upaDefaults","usaplDefaults","uspaDefaults","wabdlDefaults","wpcDefaults","wrpfDefaults","AutoFillRules","handleSelectChange","selectedOption","handleClick","componentClass","defaultValue","width","marginLeft","components","DropdownIndicator","DivisionSelect","objarray","division","inputValue","maybeUpdateRedux","handleInputChange","handleKeyDown","actionMeta","_this$state","preventDefault","newValue","concat","toConsumableArray","_this$state2","Creatable_default","isMulti","menuIsOpen","onInputChange","onKeyDown","createOption","WeightClassesSelect","sort","selectClassesBySex","ownProps","BarAndCollarsWeightKg","getInitialBarAndCollarsWeightKg","asNum","setBarAndCollarsWeightKg","getLiftLabel","ColorPicker","clearTimeout","timeoutId","displayColorPicker","handleClose","handleMouseLeave","setTimeout","handleMouseEnter","rgb","hex","toUpperCase","colors","values","picker","className","styles","cover","react_color_lib","triangle","onMouseLeave","onMouseEnter","background","Plates","validateAmountInput","widget","updateHandler","amount","setPlateConfig","renderWeightRow","meet_setup_ColorPicker","plateRows","units","Table","striped","condensed","hover","yesNoBooleanOptions","yesNoToBoolean","yesno","yesNoFromBoolean","bool","MeetSetup","Panel","Heading","meet_setup_MeetName","meet_setup_MeetLocation","meet_setup_FederationSelect","meet_setup_MeetDate","meet_setup_MeetLength","meet_setup_PlatformCounts","meet_setup_AutoFillRules","meet_setup_DivisionSelect","masterKey","meet_setup_WeightClassesSelect","setFormula","setAgeCoefficients","setCombineSleevesAndWraps","setAllow4thAttempts","setInKg","setShowAlternateUnits","meet_setup_BarAndCollarsWeightKg","meet_setup_Plates","join","MeetSetupContainer","meet_setup_MeetSetup","LifterTable","renderRows","LifterRow","rowRenderer","map","BirthDateInput","blur","initialValue","onSuccess","disabled","validateIso8601Date","pieces","_pieces","onlyNumbers","newRegistration","deleteRegistration","updateRegistration","eventOptions","updateRegistrationLot","updateRegistrationMemberId","updateRegistrationBirthDate","updateRegistrationCountry","updateRegistrationState","updateRegistrationTeam","updateRegistrationNotes","selectedDay","deleteRegistrationClick","updateRegistrationDay","updateRegistrationPlatform","updateRegistrationFlight","updateRegistrationName","updateRegistrationSex","updateRegistrationDivisions","updateRegistrationEvents","updateRegistrationEquipment","dayOptions","platformOptions","divisionOptions","selectedDivisions","selectedEvents","gridStyle","padding","react_select_esm","menuPlacement","options","isClearable","ValidatedTextInput","NewButton","csvString","trim","getSpreadsheetColumnName","alphabet","n","mod","remainder","Csv","fieldnames","rows","createClass","namelist","j","splice","removeColumnByIndex","empty","removeEmptyColumns","lines","row","headers","strRows","parseInteger","charcode","charCodeAt","parseSex","lower","toLowerCase","parseEquipment","startsWith","parseEvent","parseDate","makeExampleRegistrationsCsv","csv","appendColumns","toString","MANDATORY_FIELDNAMES","OPTIONAL_FIELDNAMES","loadRegistrations","iname","jname","fieldname","val","errprefix","integer","platforms","eqt","evt","bd","marginStyle","globalImportKind","RegistrationView","handleDownloadCsvTemplateClick","text","handleOverwriteClick","handleAppendClick","maybeError","fromString","maybeEntries","global","entryIds","ButtonGroup","registration_LifterTable","registration_NewButton","RegistrationContainer","registration_RegistrationView","inLiftingPage","renderHeader","shortStyle","enterAttempt","WeightInput","weightNum","weightStr","multipleOf","validatePositiveInteger","inclusiveMax","isInteger","updateRegistrationSquatRackInfo","updateRegistrationBenchRackInfo","updateRegistrationAge","validateAge","pos","validateRack","hasSquat","hasBench","hasDeadlift","disableSquatWeight","disableBenchWeight","disableDeadliftWeight","weighins_WeightInput","WeighinsView","getNumDaysFromEntries","max_day","dayPanels","lifters","weighins_LifterTable","WeighinsContainer","weighins_WeighinsView","LiftingHeader","divisionsStr","currentEntryId","idx","safeKg2Lbs","selectPlates","loadingKg","barAndCollarsWeightKg","loadingAny","barAndCollarsWeightAny","platesAny","sortedPlates","sideWeightKg","loading","_sortedPlates$i","weightAny","isAlreadyLoaded","findWeightFrom","startFrom","BarLoad","weightKgToStyle","weightLbsToStyle","weightLbs","weightAnyToText","renderPlates","divs","plateCount","showCounter","plate","counter","is_light","backgroundColor","opacity","border","LeftPanel","getBarLoadProps","fieldKg","getBarAndCollarsWeightKg","next","nextAttemptOneIndexed","weightKgText","weightLbsText","currentLoading","nextLoading","relativeTo","finger","loadedPlate","makeLoadingRelative","nextBarLoad","loadingBar","nextText","barArea","lifting_BarLoad","attemptText","activeCard","AttemptInput","isFinite","asKg","prevAttemptOneIndexed","prevKg","prevStatus","fixups","lastGoodValue","getNextAttemptNumberForEntry","weightsKg","statuses","MAX_ATTEMPTS","compareEntriesByAttempt","aKg","bKg","orderEntriesByAttempt","getLiftingOrder","entriesInFlight","earliestAttemptOneIndexed","getActiveAttemptNumber","orderedEntries","attemptZeroIndexed","existsNextAttempt","existsPrevAttempt","byNextAttempt","byThisAttempt","byPrevAttempt","notLifting","Array","prototype","orderEntriesForAttempt","getCurrentEntryId","nextEntryInfo","currentEntryIndex","hasAttempt","notTaken","getNextEntryInfo","categoryToKey","category","keyToCategory","getLastSuccessfulLift","getLastSuccessfulAttempt","sortByPlaceInCategory","clonedEntries","aTotal","bTotal","aLastSuccessfulLift","bLastSuccessfulLift","aLastSuccessfulLiftIndex","bLastSuccessfulLiftIndex","aLastSuccessfulAttempt","bLastSuccessfulAttempt","getEventSortOrder","ev","getEquipmentSortOrder","eq","getSexSortOrder","mapSexToClasses","men","women","mx","getAllResults","categoryMap","Map","classesForSex","weightClassStr","dividx","evidx","catEntries","get","set","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","_ref2","return","catA","catB","aSex","bSex","aEvent","bEvent","aEquipment","bEquipment","aIsSHW","bIsSHW","sortCategoryResults","getProjectedResults","getFinalResults","globalFocusAttemptInputId","globalHighestAttemptInputAttempt","LiftingTable","renderBest3AttemptField","columnType","best3","lightestFailed","renderAttemptField","wStr","displayStr","lifting_AttemptInput","maybeNegative","anyPreviousAttemptTaken","currentAndHasPrevious","nextAndTookLast","meetState","renderCell","categoryResults","cell","bw","bwStr","weightClass","firstDiv","columns","cells","col","rowClassName","getColumnHeaderString","useProjected","column","nameCell","divisionCell","liftOptions","LiftingFooter","handleDayChange","setLiftingGroup","handlePlatformChange","handleFlightChange","handleLiftChange","handleAttemptChange","handleLifterChange","setFocusAttemptInputTimeout","elem","focus","handleGoodLift","markLift","handleNoLift","hasFullscreenElement","doc","fullscreenElement","webkitFullscreenElement","mozFullscreenElement","msFullscreenElement","exitFullscreen","webkitExitFullscreen","mozExitFullscreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullscreen","msRequestFullscreen","handleFullscreen","makeLifterOptions","lifterOptions","numPlatforms","flightOptions","flightsOnPlatform","attemptOptions","toggleReplaceTableWithWeighins","onMouseDown","MULTIPLE","ColumnWidth","fieldName","setTableInfo","ceil","LiftingView","replaceTableWithWeighins","now","rightElement","lifting_LiftingTable","marginRight","lifting_ColumnWidth","TopBar","lifting_LeftPanel","lifting_LiftingFooter","entriesOnPlatform","flights","LiftingContainer","lifting_LiftingView","OneFlightOrder","getOrderBy","entriesForLift","bySquat","byBench","byDeadlift","maxRows","builder","leftDivider","header","OneCategory","sexToLabel","FlightOrderView","updateDay","updatePlatform","handlePrint","print","selectorStyle","shownEntries","knownFlights","flightOrders","_loop","flight_order_OneFlightOrder","categories","flight_order_OneCategory","FlightOrderContainer","flight_order_FlightOrderView","ByDivision","renderEntryRow","total","place","pointsStr","wtcls","squat","bench","deadlift","unit","otherUnit","alternateTotal","mapSexToLabel","renderCategoryResults","eqpstr","categoryPanels","panel","meetName","AGE_COEFFICIENTS","fosterMcCulloch","sortByFormulaPlaceInCategory","indexMap","memoizedPoints","aIndex","bIndex","aPoints","bPoints","getAllRankings","sortPointsCategoryResults","ByPoints","rank","agePointsCategory","addEntriesRow","finalEventTotalKg","fill","standardizeEquipment","exportAsOplCsv","meetCsv","makeMeetCsv","entriesCsv","squatFieldnames","benchFieldnames","deadliftFieldnames","_results$_i","makeEntriesCsv","versionStr","addDataRow","hasDL","_entry$birthDate$spli","_entry$birthDate$spli2","makeBirthDate","translateEvent","exportAsUSAPLCsv","_results$i","globalMergeDay","globalMergePlatform","ResultsView","makeDayOptions","handleByChange","by","handleExportAsOplCsvClick","handleExportAsUSAPLCsvClick","handleExportPlatformClick","exportname","handleMergePlatformClick","mergePlatform","makePlatformMergeButtons","platformsHaveLifted","forms","liftedOnDay","buttons","_loop2","lifted","actionText","results_ByDivision","results_ByPoints","daySelector","fontWeight","ResultsContainer","results_ResultsView","randomString","random","substr","randomInt","randomFixedPoint","fixedPoints","power","NonsenseFederations","NonsenseDivisions","RandomizeMeetSetupButton","randomizeMeetSetup","fed","numClassesMen","numClassesWomen","classesMen","classesWomen","classesMx","numDivisions","div","age_lower","age_upper","NonsenseFirstNames","NonsenseLastNames","RandomizeRegistrationButton","deleteExistingRegistrations","generateEntries","randomizeRegistration","numLifters","equipmentSelect","divisionsUpperBound","divchooser","choice","numFlights","RandomizeWeighinsButton","randomAttempt","randomizeWeighins","height","safety","StateTools","reInitializeRedux","localStorage","clear","reload","RandomizeMeetSetup","RandomizeRegistration","RandomizeWeighins","DebugContainer","debug_StateTools","AboutContainer","Navigation","Navbar","Brand","Toggle","Collapse","Nav","exact","NavItem","eventKey","addLocaleData","App","_configureStore","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","integration_react","translations_OpenLifterIntlProvider","BrowserRouter","basename","components_Navigation","Switch","Route","path","component","rootElement","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","unregister"],"mappings":"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KAAK1J,qBACjCC,kBAAmBV,EAAMmK,KAAKzJ,kBAC9BgI,QAASA,IAMX,KAFaiF,CAGbupB,IC7QIkB,GAAmB,CAEvB,EACA,EACA,EACA,EACA,EAIA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KAIA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAMA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KAIA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,KACA,MACA,MAEA,MACA,MACA,KACA,MACA,MACA,IACA,MACA,MACA,MACA,OAIWC,GAAkB,SAAC5yB,GAC9B,OAAK5D,OAAOojB,UAAUxf,IAAQA,GAAO,EAC5B,EAILA,EAAM2yB,GAAiBp6B,OAClB,EAGFo6B,GAAiB3yB,ICpGpB0mB,GAAgB,SAACC,GACrB,OAAOnb,KAAKS,UAAU0a,IAElBC,GAAgB,SAAC5f,GACrB,OAAOwE,KAAKC,MAAMzE,IAKd6rB,GAA+B,SACnC5vB,EACA0jB,EACAzrB,EACAC,GAIA,IADA,IAAI23B,EAAW,IAAI1K,IACVrsB,EAAI,EAAGA,EAAIkH,EAAQ1K,OAAQwD,IAClC+2B,EAASnK,IAAI1lB,EAAQlH,GAAIA,GAM3B,IADA,IAAIg3B,EAAiB,IAAI9M,MAAMhjB,EAAQ1K,QAC9BwD,EAAI,EAAGA,EAAIkH,EAAQ1K,OAAQwD,IAAK,CACvC,IAAMkF,EAAQgC,EAAQlH,GAChBW,EAAUuF,GAAqBhB,EAAO0lB,EAASznB,OAErD,OAAQhE,GACN,IAAK,sBACH63B,EAAeh3B,GAAKU,EAAoBwE,EAAMnF,aAAcY,GAC5D,MACF,IAAK,eACHq2B,EAAeh3B,GAAKqC,EAAauoB,EAASvpB,IAAK6D,EAAMnF,aAAcY,GACnE,MACF,IAAK,QACHq2B,EAAeh3B,GAAKoC,EAAMwoB,EAASvpB,IAAK6D,EAAMnF,aAAcY,GAC5D,MACF,IAAK,aACHq2B,EAAeh3B,GAAKiD,EAAUtC,EAASuE,EAAMnF,aAAc6qB,EAASvpB,IAAKupB,EAAS1nB,UAAW0nB,EAASznB,OACtG,MACF,IAAK,kBACH6zB,EAAeh3B,GAAK8B,EAAe8oB,EAASvpB,IAAK6D,EAAMnF,aAAcY,GACrE,MACF,IAAK,cACHq2B,EAAeh3B,GAAK2D,EAAWuB,EAAMnF,aAAcY,GACnD,MACF,IAAK,OACHq2B,EAAeh3B,GAAKoB,EAAKwpB,EAASvpB,IAAK6D,EAAMnF,aAAcY,GAC3D,MACF,IAAK,QACHq2B,EAAeh3B,GAAKW,EACpB,MACF,QAEEq2B,EAAeh3B,GAAK,EAIxB,OAAQZ,GACN,IAAK,OACH,MACF,IAAK,kBACH43B,EAAeh3B,GAAKg3B,EAAeh3B,GAAK62B,GAAgB3xB,EAAMjB,MASpE,IAAIgnB,EAAgB/jB,EAAQ7J,QAsB5B,OAnBA4tB,EAAc5T,KAAK,SAACxW,EAAGC,GACrB,IAAMm2B,EAASF,EAASpK,IAAI9rB,GACtBq2B,EAASH,EAASpK,IAAI7rB,GAG5B,QAAewH,IAAX2uB,QAAmC3uB,IAAX4uB,EAAsB,OAAO,EAGzD,IAAMC,EAAUH,EAAeC,GACzBG,EAAUJ,EAAeE,GAC/B,OAAIC,IAAYC,EAAgBA,EAAUD,EAGtCt2B,EAAEd,eAAiBe,EAAEf,aAAqBc,EAAEd,aAAee,EAAEf,aAG1D,IAGFkrB,GAIHS,GAAoB,SAACC,GACzB,MAAO,CAAC,MAAO,KAAM,KAAM,KAAM,IAAK,IAAK,KAAKxuB,QAAQwuB,IAIpDC,GAAwB,SAACC,GAE7B,MAAO,CAAC,OAAQ,UAAW,QAAS,aAAc,aAAa1uB,QAAQ0uB,IAInEC,GAAkB,SAACzqB,GACvB,OAAQA,GACN,IAAK,IACH,OAAO,EACT,IAAK,IACH,OAAO,EACT,IAAK,KACH,OAAO,EACT,QAEE,OAAO,IAgCAg2B,GAAiB,SAC5BnwB,EACA/H,EACAC,EACAC,GAMA,IADA,IAAI+sB,EAAc,IAAIC,IACbrsB,EAAI,EAAGA,EAAIkH,EAAQ1K,OAAQwD,IAAK,CACvC,IAAMgB,EAAIkG,EAAQlH,GAGZqB,EAAML,EAAEK,IACV6B,EAAuBlC,EAAEkC,UAGzB7D,GAAwC,YAAd6D,IAC5BA,EAAY,SAId,IAAK,IAAIupB,EAAQ,EAAGA,EAAQzrB,EAAEmD,OAAO3H,OAAQiwB,IAAS,CACpD,IAAMtpB,EAAQnC,EAAEmD,OAAOsoB,GAEjBxhB,EAAM0f,GADK,CAAEtpB,MAAK8B,QAAOD,cAGzBwpB,EAAaN,EAAYO,IAAI1hB,QACpB3C,IAAfokB,EAA2BN,EAAYQ,IAAI3hB,EAAK,CAACjK,IAAM0rB,EAAW7kB,KAAK7G,IAK3E,IAAI6rB,EAAU,GA7BmBC,GAAA,EAAAC,GAAA,EAAAC,OAAA1kB,EAAA,IA8BjC,QAAA2kB,EAAAC,EAA8Bd,EAA9Be,OAAAC,cAAAN,GAAAG,EAAAC,EAAA7F,QAAAgG,MAAAP,GAAA,EAA2C,KAAAQ,EAAAL,EAAAta,MAAA4a,EAAA3kB,OAAA4K,EAAA,EAAA5K,CAAA0kB,EAAA,GAAjCriB,EAAiCsiB,EAAA,GAA5Bb,EAA4Ba,EAAA,GACnC3C,EAAWC,GAAc5f,GACzBye,EAAiBoN,GAA6BpK,EAAY9B,EAAUzrB,EAASC,GACnFytB,EAAQhlB,KAAK,CAAE+iB,WAAUlB,oBAjCM,MAAA7Z,GAAAkd,GAAA,EAAAC,EAAAnd,EAAA,YAAAid,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GAqCjC,OApEuC,SAACH,GACxCA,EAAQxV,KAAK,SAACxW,EAAGC,GACf,IAAM2sB,EAAO5sB,EAAE+pB,SACT8C,EAAO5sB,EAAE8pB,SAGT+C,EAAO7B,GAAgB2B,EAAKpsB,KAC5BusB,EAAO9B,GAAgB4B,EAAKrsB,KAClC,GAAIssB,IAASC,EAAM,OAAOD,EAAOC,EAGjC,IAAMC,EAASnC,GAAkB+B,EAAKtqB,OAChC2qB,EAASpC,GAAkBgC,EAAKvqB,OACtC,GAAI0qB,IAAWC,EAAQ,OAAOD,EAASC,EAGvC,IAAMC,EAAanC,GAAsB6B,EAAKvqB,WACxC8qB,EAAapC,GAAsB8B,EAAKxqB,WAC9C,OAAI6qB,IAAeC,EAAmBD,EAAaC,EAE5C,IA+CTsJ,CAA0BzK,GACnBA,GChLHd,GAAkB,SAAC1qB,EAAUsK,GACjC,OAAQtK,GACN,IAAK,IACH,OAAOsK,EAAM3M,mBACf,IAAK,IACH,OAAO2M,EAAM1M,qBACf,IAAK,KACH,OAAO0M,EAAMzM,kBACf,QAEE,OAAOyM,EAAM3M,qBAIbu4B,8MACJ5B,eAAiB,SAACzwB,EAAc0lB,EAA0B3f,GAExD,IAAK1D,GAAerC,GAAQ,OAAO,KAInC,IAAMvE,EAAUuF,GAAqBhB,EAAO0lB,EAASznB,OACrD,GAAgB,IAAZxC,EAAe,OAAO,KAE1B,IAAMb,EAAUisB,GAAgB7mB,EAAM7D,IAAK0M,EAAKpC,OAC1ChH,EAAUM,EAAgBC,GAC1BN,EAAUQ,EAAgBF,GAC1BL,EAAaS,EAAmBJ,GAEhC3F,EAAOwO,EAAKpC,MAAMpM,KAClBq2B,EAAQr2B,EAAOoB,EAAUjE,EAAOiE,GAGhC62B,EAAmB,IAAZ72B,EAAgB,KAAOsK,EAAM,EAGtClK,EAAI,EACR,OAAQgN,EAAKpC,MAAMvM,iBACjB,IAAK,OACH,MACF,IAAK,kBACH2B,EAAI81B,GAAgB3xB,EAAMjB,KAM9B,IAAIR,EAAS,EACb,OAAQsK,EAAKpC,MAAMxM,SACjB,IAAK,sBACHsE,GAAU1C,EAAIL,EAAoBwE,EAAMnF,aAAcY,IAAU1D,QAAQ,GACxE,MACF,IAAK,OACHwG,GAAU1C,EAAIK,EAAK8D,EAAM7D,IAAK6D,EAAMnF,aAAcY,IAAU1D,QAAQ,GACpE,MACF,IAAK,eACHwG,GAAU1C,EAAIsB,EAAa6C,EAAM7D,IAAK6D,EAAMnF,aAAcY,IAAU1D,QAAQ,GAC5E,MACF,IAAK,QACHwG,GAAU1C,EAAIqB,EAAM8C,EAAM7D,IAAK6D,EAAMnF,aAAcY,IAAU1D,QAAQ,GACrE,MACF,IAAK,aACHwG,GAAU1C,EAAIkC,EAAUtC,EAASuE,EAAMnF,aAAcmF,EAAM7D,IAAKupB,EAAS1nB,UAAW0nB,EAASznB,QAAQlG,QAAQ,GAC7G,MACF,IAAK,kBACHwG,GAAU1C,EAAIe,EAAeoD,EAAM7D,IAAK6D,EAAMnF,aAAcY,IAAU1D,QAAQ,GAC9E,MACF,IAAK,cACHwG,GAAU1C,EAAI4C,EAAWuB,EAAMnF,aAAcY,IAAU1D,QAAQ,GAC/D,MACF,IAAK,QACHwG,GAAU1C,EAAI60B,GAAO34B,QAAQ,GAC7B,MACF,QACG8Q,EAAKpC,MAAMxM,QAIhB,IAAI22B,EAAY,GACA,IAAZn1B,GAA4B,IAAX8C,EAAcqyB,EAAY,MAC1B,IAAZn1B,GAA4B,IAAX8C,IAAcqyB,EAAYryB,GAEpD,IAAMsyB,EAAQx2B,EACVM,EAAkBC,EAASoF,EAAMnF,cACjCU,EAAqBX,EAASoF,EAAMnF,cAClC0vB,EAAKlwB,EAAO2F,EAAMnF,aAAerD,EAAOwI,EAAMnF,cAC9Ci2B,EAAQz2B,EAAOoF,EAAUjI,EAAOiI,GAChCsxB,EAAQ12B,EAAOqF,EAAUlI,EAAOkI,GAChCsxB,EAAW32B,EAAOsF,EAAanI,EAAOmI,GAE5C,OACEyH,EAAAzL,EAAA0L,cAAA,MAAItB,IAAKA,GACPqB,EAAAzL,EAAA0L,cAAA,UAAKirB,GACLlrB,EAAAzL,EAAA0L,cAAA,UAAKrH,EAAM5G,MACXgO,EAAAzL,EAAA0L,cAAA,UAAKrH,EAAM7D,KACXiL,EAAAzL,EAAA0L,cAAA,UAAKrH,EAAMhC,WACXoJ,EAAAzL,EAAA0L,cAAA,UAA4B,IAAvBrH,EAAMnF,aAAqB,KAAOg2B,GACvCzpB,EAAAzL,EAAA0L,cAAA,UAA4B,IAAvBrH,EAAMnF,aAAqB,KAAOjD,EAAc2yB,IACrDnjB,EAAAzL,EAAA0L,cAAA,UAAmB,IAAdrH,EAAMjB,IAAY,KAAOiB,EAAMjB,KACpCqI,EAAAzL,EAAA0L,cAAA,UAAiB,IAAZ5H,EAAgB,GAAK7H,EAAck5B,IACxC1pB,EAAAzL,EAAA0L,cAAA,UAAiB,IAAZ3H,EAAgB,GAAK9H,EAAcm5B,IACxC3pB,EAAAzL,EAAA0L,cAAA,UAAoB,IAAf1H,EAAmB,GAAK/H,EAAco5B,IAC3C5pB,EAAAzL,EAAA0L,cAAA,UAAiB,IAAZ5L,EAAgB,GAAK7D,EAAc84B,IACxCtpB,EAAAzL,EAAA0L,cAAA,UAAKupB,OAKXQ,cAAgB,SAACj1B,GACf,OAAQA,GACN,IAAK,IACH,MAAO,QACT,IAAK,IACH,MAAO,UACT,IAAK,KACH,MAAO,KACT,QAEE,MAAO,OAIbk1B,sBAAwB,SAAC1J,EAAgC5hB,GAMvD,IAN4E,IACpE2f,EAA6BiC,EAA7BjC,SAAUlB,EAAmBmD,EAAnBnD,eACZroB,EAAM0M,EAAKuoB,cAAc1L,EAASvpB,KAGpCke,EAAO,GACFvf,EAAI,EAAGA,EAAI0pB,EAAeltB,OAAQwD,IAAK,CAC9C,IAAMggB,EAAMjS,EAAK4nB,eAAejM,EAAe1pB,GAAI4qB,EAAU5qB,GACjD,OAARggB,GACFT,EAAK1X,KAAKmY,GAKd,GAAoB,IAAhBT,EAAK/iB,OACP,OAAO,KAGT,IAAIg6B,EAAiB5L,EAAS1nB,UAK9B,OAJI6K,EAAKpC,MAAMtM,yBACbm3B,EAAS,mBAITlqB,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,CAAOtP,IAAKA,GACVqB,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,KACGnZ,EADH,IACSm1B,EADT,IACkB5L,EAASznB,OAE3BmJ,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAACsN,GAAA,EAAD,CAAOC,SAAO,EAACE,OAAK,EAACD,WAAS,GAC5BzN,EAAAzL,EAAA0L,cAAA,aACED,EAAAzL,EAAA0L,cAAA,UACED,EAAAzL,EAAA0L,cAAA,kBACAD,EAAAzL,EAAA0L,cAAA,kBACAD,EAAAzL,EAAA0L,cAAA,iBACAD,EAAAzL,EAAA0L,cAAA,uBACAD,EAAAzL,EAAA0L,cAAA,mBACAD,EAAAzL,EAAA0L,cAAA,iBACAD,EAAAzL,EAAA0L,cAAA,iBACAD,EAAAzL,EAAA0L,cAAA,mBACAD,EAAAzL,EAAA0L,cAAA,mBACAD,EAAAzL,EAAA0L,cAAA,sBACAD,EAAAzL,EAAA0L,cAAA,mBACAD,EAAAzL,EAAA0L,cAAA,UAAoC,SAA/BwB,EAAKpC,MAAMvM,gBAA6B,SAAW,gBAG5DkN,EAAAzL,EAAA0L,cAAA,aAAQgT,+EAOT,IAAAlL,EAAA3I,KACHxE,EAAUwE,KAAKC,MAAMzE,QAGY,eAAjCwE,KAAKC,MAAM8rB,oBACbvwB,EAAUA,EAAQC,OAAO,SAAAnG,GAEvB,OAAQqT,EAAK1I,MAAM8rB,mBACjB,IAAK,aACH,MACF,IAAK,oBAGH,GAAIz2B,EAAEiD,KAAO,GACX,OAAO,EAET,MACF,IAAK,oBAGH,GAAIjD,EAAEiD,KAAO,GACX,OAAO,EAET,MACF,QACGoQ,EAAK1I,MAAM8rB,kBAKhB,OAAQpjB,EAAK1I,MAAMvM,iBACjB,IAAK,OACH,OAAO,EACT,IAAK,kBACH,OAAkC,IAA3By3B,GAAgB71B,EAAEiD,KAC3B,QAEE,OADCoQ,EAAK1I,MAAMvM,iBACL,MAaf,IARA,IAAMytB,EAAUwK,GACdnwB,EACAwE,KAAKC,MAAMxM,QACXuM,KAAKC,MAAMvM,gBACXsM,KAAKC,MAAMtM,wBAGTo3B,EAAiB,GACZz2B,EAAI,EAAGA,EAAI6sB,EAAQrwB,OAAQwD,IAAK,CACvC,IAAM02B,EAAQhrB,KAAK6qB,sBAAsB1J,EAAQ7sB,GAAIA,GACvC,OAAV02B,GACFD,EAAe5uB,KAAK6uB,GAIxB,OAAOpqB,EAAAzL,EAAA0L,cAAA,WAAMkqB,UA1NMvqB,IAAMoB,WAkPdnB,eApBS,SAAC3N,EAAoB+Y,GAC3C,IAAMpb,EAAMkE,OAAOkX,EAASpb,KACxB+K,EAAU1I,EAAMoL,aAAa1C,QAKjC,OAJI/K,EAAM,IACR+K,EAAUA,EAAQC,OAAO,SAAAnG,GAAC,OAAIA,EAAE7E,MAAQA,KAGnC,CACLoD,KAAMf,EAAMmK,KAAKpJ,KACjBo3B,SAAUn4B,EAAMmK,KAAKrK,KACrBa,QAASX,EAAMmK,KAAKxJ,QACpBE,uBAAwBb,EAAMmK,KAAKtJ,uBACnCR,WAAYL,EAAMmK,KAAK9J,WACvBG,mBAAoBR,EAAMmK,KAAK3J,mBAC/BC,qBAAsBT,EAAMmK,KAAK1J,qBACjCC,kBAAmBV,EAAMmK,KAAKzJ,kBAC9BgI,QAASA,IAMX,KAFaiF,CAGborB,IC5MIG,GAAgB,SAAC5W,EAAU8J,EAAoB1lB,EAAcmE,GACjE,IAAMsuB,EAAoBzxB,GAAqBhB,EAAO0lB,EAASznB,OAG3D6c,EAAqBkK,MAAMpJ,EAAIxB,WAAW9iB,QAAQo7B,KAAK,IAuB3D,GArBKrwB,GAAerC,GAGlB8a,EAAIc,EAAIzX,MAAM,UAAkC,IAAtBsuB,EAA0B,KAAO7Y,GAAUzV,EAAQ,GAF7E2W,EAAIc,EAAIzX,MAAM,UAAY,KAK5B2W,EAAIc,EAAIzX,MAAM,SAAWyV,GAAU5Z,EAAM5G,MACzC0hB,EAAIc,EAAIzX,MAAM,QAAUyV,GAAU5Z,EAAM7D,KACxC2e,EAAIc,EAAIzX,MAAM,cAAgByV,GAAU5Z,EAAMlB,WAC9Cgc,EAAIc,EAAIzX,MAAM,QAAUyV,GAAU5Z,EAAMjB,KACxC+b,EAAIc,EAAIzX,MAAM,YAAcyV,GAAU5Z,EAAM3G,SAC5CyhB,EAAIc,EAAIzX,MAAM,UAAYyV,GAAU5Z,EAAM1G,OAC1CwhB,EAAIc,EAAIzX,MAAM,cAAgByV,GApCH,SAAC+M,GAC5B,OAAQA,GACN,IAAK,OAEL,IAAK,UACH,MAAO,MACT,IAAK,QACH,MAAO,QACT,IAAK,aACH,MAAO,aACT,IAAK,YACH,MAAO,YACT,QAEE,MAAO,OAsB6BgM,CAAqB3yB,EAAMhC,YACnE8c,EAAIc,EAAIzX,MAAM,aAAeyV,GAAU8L,EAAS1U,UAChD8J,EAAIc,EAAIzX,MAAM,iBAAmByV,GAAUhiB,EAAcoI,EAAMnF,eAC/DigB,EAAIc,EAAIzX,MAAM,kBAAoByV,GAAU8L,EAAS2B,gBACrDvM,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAc66B,IACpD3X,EAAIc,EAAIzX,MAAM,UAAYyV,GAAU8L,EAASznB,OAC7C6c,EAAIc,EAAIzX,MAAM,SAAWyV,GAAU5Z,EAAMX,MAGrCqmB,EAASznB,MAAM0C,SAAS,KAAM,CAChCma,EAAIc,EAAIzX,MAAM,iBAAmByV,GAAUhiB,EAAcgJ,GAAgBZ,KACzE,IAAK,IAAIlF,EAAI,EAAGA,ElE7HQ,EkE6HUA,IAAK,CACrC,IAAMoK,EAAQ,SAAWpK,EAAI,GAAK,KAClCggB,EAAIc,EAAIzX,MAAMe,IAAU0U,GAAUhiB,EAAcoI,EAAMP,QAAQ3E,GAAKkF,EAAMJ,YAAY9E,MAKzF,GAAI4qB,EAASznB,MAAM0C,SAAS,KAAM,CAChCma,EAAIc,EAAIzX,MAAM,iBAAmByV,GAAUhiB,EAAciJ,GAAgBb,KACzE,IAAK,IAAIlF,EAAI,EAAGA,ElEtIQ,EkEsIUA,IAAK,CACrC,IAAMoK,EAAQ,SAAWpK,EAAI,GAAK,KAClCggB,EAAIc,EAAIzX,MAAMe,IAAU0U,GAAUhiB,EAAcoI,EAAMN,QAAQ5E,GAAKkF,EAAMH,YAAY/E,MAKzF,GAAI4qB,EAASznB,MAAM0C,SAAS,KAAM,CAChCma,EAAIc,EAAIzX,MAAM,oBAAsByV,GAAUhiB,EAAckJ,GAAmBd,KAC/E,IAAK,IAAIlF,EAAI,EAAGA,ElE/IQ,EkE+IUA,IAAK,CACrC,IAAMoK,EAAQ,YAAcpK,EAAI,GAAK,KACrCggB,EAAIc,EAAIzX,MAAMe,IAAU0U,GAAUhiB,EAAcoI,EAAML,WAAW7E,GAAKkF,EAAMF,eAAehF,MAI/F8gB,EAAIvB,KAAK1X,KAAKmY,IAGH8X,GAAiB,SAACt5B,GAC7B,IAAMu5B,EApJY,SAACpvB,GACnB,IAAImY,EAAM,IAAIzB,GACdyB,EAAIxB,WAAa,CAAC,aAAc,OAAQ,cAAe,YAAa,WAAY,WAAY,WAE5F,IAAIU,EAAqB,CACvBlB,GAAUnW,EAAKjK,YACfogB,GAAUnW,EAAKhK,MACfmgB,GAAUnW,EAAKpK,SACfugB,GAAUnW,EAAKnK,OACfsgB,GAAUnW,EAAKlK,MACfqgB,GAAUnW,EAAKrK,MACfwgB,GAAUnW,EAAKxJ,UAUjB,OARA2hB,EAAIvB,KAAO,CAACS,IAGwB,IAAhCrX,EAAKtJ,yBACPyhB,EAAIxB,WAAWzX,KAAK,WACpBiZ,EAAIvB,KAAK,GAAG1X,KAAK,uBAGZiZ,EA+HckX,CAAYx5B,EAAMmK,MAEnCsvB,EA9HiB,SAACz5B,GAItB,IAHA,IAAIsiB,EAAM,IAAIzB,GAEV6Y,EAAkB,GACbl4B,EAAI,EAAGA,ElEjCU,EkEiCQA,IAChCk4B,EAAgBrwB,KAAK,SAAW7H,EAAI,GAAK,MAE3Ck4B,EAAgBrwB,KAAK,gBAGrB,IADA,IAAIswB,EAAkB,GACbn4B,EAAI,EAAGA,ElEvCU,EkEuCQA,IAChCm4B,EAAgBtwB,KAAK,SAAW7H,EAAI,GAAK,MAE3Cm4B,EAAgBtwB,KAAK,gBAGrB,IADA,IAAIuwB,EAAqB,GAChBp4B,EAAI,EAAGA,ElE7CU,EkE6CQA,IAChCo4B,EAAmBvwB,KAAK,YAAc7H,EAAI,GAAK,MAEjDo4B,EAAmBvwB,KAAK,mBAExBiZ,EAAIxB,WAAa4K,MAAMC,UAAUxT,OAC/B,CAAC,QAAS,OAAQ,MAAO,YAAa,MAAO,UAAW,SACxD,CAAC,YAAa,WAAY,eAAgB,iBAC1CuhB,EACAC,EACAC,EACA,CAAC,UAAW,QAAS,SAWvB,IARA,IAAMvL,EAAkCwB,GACtC7vB,EAAMoL,aAAa1C,QACnB1I,EAAMmK,KAAK3J,mBACXR,EAAMmK,KAAK1J,qBACXT,EAAMmK,KAAKzJ,kBACXV,EAAMmK,KAAKtJ,wBAGJW,EAAI,EAAGA,EAAI6sB,EAAQrwB,OAAQwD,IAGlC,IAHuC,IAAAq4B,EACFxL,EAAQ7sB,GAArC4qB,EAD+ByN,EAC/BzN,SAAUlB,EADqB2O,EACrB3O,eAEThK,EAAI,EAAGA,EAAIgK,EAAeltB,OAAQkjB,IACzCgY,GAAc5W,EAAK8J,EAAUlB,EAAehK,GAAIA,GAIpD,OAAOoB,EAgFewX,CAAe95B,GACrCy5B,EAAWnY,qBAIX,MAAOyY,iEAAsBR,EAAQ/W,WAAa,KAAOiX,EAAWjX,YC9HhEwX,GAAa,SAAC1X,EAAU8J,EAAoB1lB,GAChD,IAAM8e,EAAoB4G,EAASznB,MAAM0C,SAAS,KAC5Coe,EAAoB2G,EAASznB,MAAM0C,SAAS,KAC5C4yB,EAAiB7N,EAASznB,MAAM0C,SAAS,KAG3Cma,EAAqBkK,MAAMpJ,EAAIxB,WAAW9iB,QAAQo7B,KAAK,IAE3D5X,EAAIc,EAAIzX,MAAM,SAAWyV,GAAU5Z,EAAM5G,MACzC0hB,EAAIc,EAAIzX,MAAM,SAAWyV,GAAU5Z,EAAMX,MACzCyb,EAAIc,EAAIzX,MAAM,QAAUyV,GAAU8L,EAAS1U,UAC3C8J,EAAIc,EAAIzX,MAAM,aAAeyV,GAAUhiB,EAAcoI,EAAMnF,eAC3DigB,EAAIc,EAAIzX,MAAM,eAAiByV,GAAU8L,EAAS2B,gBAClDvM,EAAIc,EAAIzX,MAAM,QAAUyV,GAvBJ,SAAC5Z,GACrB,QAAwBoD,IAApBpD,EAAMlB,WAA+C,KAApBkB,EAAMlB,UACzC,MAAO,GAFqC,IAAA00B,EAINxzB,EAAMlB,UAAUsP,MAAM,KAJhBqlB,EAAA/vB,OAAA4K,EAAA,EAAA5K,CAAA8vB,EAAA,GAIzC38B,EAJyC48B,EAAA,GAK9C,OAL8CA,EAAA,GAK/B,IAL+BA,EAAA,GAKnB,IAAM58B,EAkBC68B,CAAc1zB,IAChD8a,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAcknB,EAAW9e,EAAMP,QAAQ,GAAKO,EAAMJ,YAAY,GAAK,IACzGkb,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAcknB,EAAW9e,EAAMP,QAAQ,GAAKO,EAAMJ,YAAY,GAAK,IACzGkb,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAcknB,EAAW9e,EAAMP,QAAQ,GAAKO,EAAMJ,YAAY,GAAK,IACzGkb,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAcmnB,EAAW/e,EAAMN,QAAQ,GAAKM,EAAMH,YAAY,GAAK,IACzGib,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAcmnB,EAAW/e,EAAMN,QAAQ,GAAKM,EAAMH,YAAY,GAAK,IACzGib,EAAIc,EAAIzX,MAAM,YAAcyV,GAAUhiB,EAAcmnB,EAAW/e,EAAMN,QAAQ,GAAKM,EAAMH,YAAY,GAAK,IACzGib,EAAIc,EAAIzX,MAAM,eAAiByV,GAAUhiB,EAAc27B,EAAQvzB,EAAML,WAAW,GAAKK,EAAMF,eAAe,GAAK,IAC/Ggb,EAAIc,EAAIzX,MAAM,eAAiByV,GAAUhiB,EAAc27B,EAAQvzB,EAAML,WAAW,GAAKK,EAAMF,eAAe,GAAK,IAC/Ggb,EAAIc,EAAIzX,MAAM,eAAiByV,GAAUhiB,EAAc27B,EAAQvzB,EAAML,WAAW,GAAKK,EAAMF,eAAe,GAAK,IAC/Ggb,EAAIc,EAAIzX,MAAM,UAAYyV,GA3DL,SAAC6M,GACtB,OAAQA,GAEN,IAAK,MACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,IAAK,IACH,MAAO,KACT,IAAK,IACH,MAAO,KACT,IAAK,IACH,MAAO,KAGT,IAAK,KACH,MAAO,KACT,IAAK,KACH,MAAO,KACT,QAEE,OAAOA,GAsCyBkN,CAAejO,EAASznB,QAC5D6c,EAAIc,EAAIzX,MAAM,UAAYyV,GAAU5Z,EAAM1G,OAC1CwhB,EAAIc,EAAIzX,MAAM,aAAeyV,GAAU5Z,EAAMb,UAG7Cyc,EAAIvB,KAAK1X,KAAKmY,IAGH8Y,GAAmB,SAACt6B,GAC/B,IAAIsiB,EAAM,IAAIzB,GACdyB,EAAIxB,WAAa,CACf,OACA,OACA,MACA,WACA,aACA,MACA,UACA,UACA,UACA,UACA,UACA,UACA,aACA,aACA,aACA,QACA,QACA,WACA,aAWF,IARA,IAAMuN,EAAkCwB,GACtC7vB,EAAMoL,aAAa1C,QACnB1I,EAAMmK,KAAK3J,mBACXR,EAAMmK,KAAK1J,qBACXT,EAAMmK,KAAKzJ,kBACXV,EAAMmK,KAAKtJ,wBAGJW,EAAI,EAAGA,EAAI6sB,EAAQrwB,OAAQwD,IAGlC,IAHuC,IAAA+4B,EACFlM,EAAQ7sB,GAArC4qB,EAD+BmO,EAC/BnO,SAAUlB,EADqBqP,EACrBrP,eAEThK,EAAI,EAAGA,EAAIgK,EAAeltB,OAAQkjB,IACzC8Y,GAAW1X,EAAK8J,EAAUlB,EAAehK,IAI7C,OAAOoB,EAAIE,iCCjGPc,GAAc,CAAEjU,OAAQ,iBAsB1BmrB,GAAyB,EACzBC,GAA8B,EAE5BC,eACJ,SAAAA,EAAYvtB,GAAO,IAAAoC,EAAA,OAAAnF,OAAAoF,EAAA,EAAApF,CAAA8C,KAAAwtB,IACjBnrB,EAAAnF,OAAAqF,EAAA,EAAArF,CAAA8C,KAAA9C,OAAAsF,EAAA,EAAAtF,CAAAswB,GAAA/qB,KAAAzC,KAAMC,KAkBRwtB,eAAiB,WAMf,IALA,IAAIza,EAAU,CACZpS,EAAAzL,EAAA0L,cAAA,UAAQtB,IAAK,MAAO0H,MAAO,GAA3B,sBAIOxW,EAAM,EAAGA,GAAO4R,EAAKpC,MAAM6W,OAAO7Z,KAAK9J,WAAY1C,IAC1DuiB,EAAQ7W,KACNyE,EAAAzL,EAAA0L,cAAA,UAAQtB,IAAK9O,EAAKwW,MAAOxW,GAAzB,YACYA,IAIhB,OAAOuiB,GAhCU3Q,EAmCnByiB,gBAAkB,SAAArtB,GAChB,IAAMhH,EAAMgH,EAAMwM,OAAOgD,MACrB5E,EAAKvP,MAAMrC,MAAQA,GACrB4R,EAAKW,SAAS,CAAEvS,IAAKA,KAtCN4R,EA0CnBqrB,eAAiB,SAAAj2B,GACf,IAAMk2B,EAAKl2B,EAAMwM,OAAOgD,MACpB5E,EAAKvP,MAAM66B,KAAOA,GACpBtrB,EAAKW,SAAS,CAAE2qB,GAAIA,KA7CLtrB,EAiDnBurB,0BAA4B,SAAAn2B,GAE1B,IAAI6M,EAAWjC,EAAKpC,MAAM6W,OAAO7Z,KAAKrK,KACrB,KAAb0R,IACFA,EAAW,gBAEbA,EAAWA,EAAS9S,QAAQ,KAAM,KAElC,IAAM4jB,EAAcgX,GAAe/pB,EAAKpC,MAAM6W,QACxCrS,EAAO,IAAIC,KAAK,CAAC0Q,GAAM,CAAEtY,KAAM,2BACrC6H,KAAOF,EAAMH,EAAW,aA3DPjC,EA8DnBwrB,4BAA8B,SAAAp2B,GAE5B,IAAI6M,EAAWjC,EAAKpC,MAAM6W,OAAO7Z,KAAKrK,KACrB,KAAb0R,IACFA,EAAW,gBAEbA,EAAWA,EAAS9S,QAAQ,KAAM,KAElC,IAAM4jB,EAAcgY,GAAiB/qB,EAAKpC,MAAM6W,QAC1CrS,EAAO,IAAIC,KAAK,CAAC0Q,GAAM,CAAEtY,KAAM,2BACrC6H,KAAOF,EAAMH,EAAW,eAxEPjC,EA2EnByrB,0BAA4B,SAACr9B,EAAa2H,EAAkBX,GAE1D,IAAI6M,EAAWjC,EAAKpC,MAAM6W,OAAO7Z,KAAKrK,KACrB,KAAb0R,IACFA,EAAW,gBAGb,IAAMypB,GADNzpB,EAAWA,EAAS9S,QAAQ,KAAM,MACJ,QAAUf,EAAM,aAAe2H,EAEvDtF,EAAQiR,KAAKS,UAAUnC,EAAKpC,MAAM6W,QAClCrS,EAAO,IAAIC,KAAK,CAAC5R,GAAQ,CAAEgK,KAAM,mCACvC6H,KAAOF,EAAMspB,EAAa,uBAtFT1rB,EA2FnB2rB,yBAA2B,SAACv9B,EAAa2H,EAAkBX,GACzD,IAAM4L,EAAaT,SAASC,eAAe,cACxB,OAAfQ,IACFiqB,GAAiB78B,EACjB88B,GAAsBn1B,EACtBiL,EAAWP,UAhGIT,EAqGnBe,oBAAsB,WACpB,IAAMC,EAAaT,SAASC,eAAe,cAC3C,GAAmB,OAAfQ,GAAyBA,aAAsBC,iBAAnD,CAKA,IAAM7S,EAAc68B,GACdl1B,EAAmBm1B,GAGrBttB,EAAQoC,EAAKpC,MAEbwD,EAAYvG,OAAAwG,GAAA,EAAAxG,CAAAmF,GACVkB,EAAeF,EAAWG,MAAM,GAClCG,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAASpM,GACvB,IAAIhJ,EAAuB,KAC3B,IACE,IAAI0P,EAAmB4F,KAAKC,MAAMvM,EAAMwM,OAAOC,QAG/C,GAAI/F,EAAIzB,SAAS1M,eAAiBiQ,EAAM6W,OAAOpa,SAAS1M,aACtDvB,EACE,+BACAwR,EAAM6W,OAAOpa,SAAS1M,aACtB,6CACAmO,EAAIzB,SAAS1M,kBACV,GAAImO,EAAIlB,KAAKrK,OAASqN,EAAM6W,OAAO7Z,KAAKrK,KAE7CnE,EACE,uBACAwR,EAAM6W,OAAO7Z,KAAKrK,KAClB,6CACAuL,EAAIlB,KAAKrK,KACT,0CACG,GAAKkJ,GAAyBqC,EAAID,aAAa1C,QAAS/K,EAAK2H,GAG7D,CAEL,IAAM8G,EAAkBf,EAAID,aAAa1C,QAAQC,OAAO,SAAAnG,GACtD,OAAOA,EAAE7E,MAAQA,GAAO6E,EAAE8C,WAAaA,IAEzC6H,EAAMguB,cAAcx9B,EAAK2H,EAAU8G,QANnCzQ,EAAQ,2DAA6DgC,EAAM,aAAe2H,EAAW,IAQvG,MAAO+L,GACP1V,EAAQ,uBAGW,kBAAVA,GACTgV,EAAaT,SAAS,CAAEvU,MAAOA,KAGnCkV,EAAOS,WAAWb,KA3JDlB,EA8JnBc,gBAAkB,WAChBd,EAAKW,SAAS,CAAEvU,MAAO,MA/JN4T,EAkKnB6rB,yBAA2B,WASzB,IAPA,IAAMC,EAA6CpyB,GACjDsG,EAAKpC,MAAM6W,OAAO7Z,KAAK7J,gBACvBiP,EAAKpC,MAAM6W,OAAO5Y,aAAa1C,SAG7B4yB,EAAQ,GAPmB1E,EAAA,SAStBp1B,GAIP,IAHA,IAAM+5B,EAAcF,EAAoB75B,GAEpCg6B,EAAU,GAZeC,EAAA,SAapBva,GACP,IAAMwa,EAASH,EAAYra,GACrBya,GAAwB,IAAXD,EAAkB,SAAW,QAC1C7sB,GAAqB,IAAX6sB,EAAkB,UAAY,UACxCpY,EAAcpC,EAAI,EAAI,CAAE7J,WAAY,QAAW,KACrDmkB,EAAQnyB,KACNyE,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CACElC,IAAKjL,EAAI,IAAM0f,EACfrS,QAASA,EACT4D,MAAO6Q,EACP1U,QAAS,SAAApM,IACI,IAAXk5B,EACInsB,EAAKyrB,0BAA0Bx5B,EAAI,EAAG0f,EAAI,EAAG1e,GAC7C+M,EAAK2rB,yBAAyB15B,EAAI,EAAG0f,EAAI,EAAG1e,KAGjDm5B,EAVH,QAUoBn6B,EAAI,EAVxB,aAUqC0f,EAAI,KAhBpCA,EAAI,EAAGA,EAAIqa,EAAYv9B,OAAQkjB,IAAKua,EAApCva,GAqBToa,EAAMjyB,KACJyE,EAAAzL,EAAA0L,cAAA,OAAKtB,IAAKjL,GACRsM,EAAAzL,EAAA0L,cAAA,wCAAgCvM,EAAI,GACpCsM,EAAAzL,EAAA0L,cAAA,WAAMytB,GACLh6B,EAAI65B,EAAoBr9B,OAAS,EAAI8P,EAAAzL,EAAA0L,cAAA,WAAS,QA7B5CvM,EAAI,EAAGA,EAAI65B,EAAoBr9B,OAAQwD,IAAKo1B,EAA5Cp1B,GAkCT,OAAO85B,GA1MP/rB,EAAKyiB,gBAAkBziB,EAAKyiB,gBAAgB/f,KAArB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACvBA,EAAKqrB,eAAiBrrB,EAAKqrB,eAAe3oB,KAApB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACtBA,EAAKurB,0BAA4BvrB,EAAKurB,0BAA0B7oB,KAA/B7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACjCA,EAAKwrB,4BAA8BxrB,EAAKwrB,4BAA4B9oB,KAAjC7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACnCA,EAAKyrB,0BAA4BzrB,EAAKyrB,0BAA0B/oB,KAA/B7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACjCA,EAAK2rB,yBAA2B3rB,EAAK2rB,yBAAyBjpB,KAA9B7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IAChCA,EAAKe,oBAAsBf,EAAKe,oBAAoB2B,KAAzB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IAC3BA,EAAKc,gBAAkBd,EAAKc,gBAAgB4B,KAArB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IAEvBA,EAAKvP,MAAQ,CACXrC,IAAK,EACLk9B,GAAI,WACJl/B,MAAO,IAfQ4T,wEAiNjB,IAAI8e,EAAU,KACd,OAAQnhB,KAAKlN,MAAM66B,IACjB,IAAK,WACHxM,EAAUvgB,EAAAzL,EAAA0L,cAAC6tB,GAAD,CAAYnvB,IAAKS,KAAKlN,MAAMrC,IAAKA,IAAKuP,KAAKlN,MAAMrC,MAC3D,MACF,IAAK,SACH0wB,EACEvgB,EAAAzL,EAAA0L,cAAC8tB,GAAD,CAAUpvB,IAAKS,KAAKlN,MAAMrC,IAAKA,IAAKuP,KAAKlN,MAAMrC,IAAKiD,gBAAgB,OAAOq4B,kBAAkB,eAE/F,MACF,IAAK,oBACH5K,EACEvgB,EAAAzL,EAAA0L,cAAC8tB,GAAD,CACEpvB,IAAKS,KAAKlN,MAAMrC,IAChBA,IAAKuP,KAAKlN,MAAMrC,IAChBiD,gBAAiBsM,KAAKC,MAAM6W,OAAO7Z,KAAKvJ,gBACxCq4B,kBAAkB,sBAGtB,MACF,IAAK,oBACH5K,EACEvgB,EAAAzL,EAAA0L,cAAC8tB,GAAD,CACEpvB,IAAKS,KAAKlN,MAAMrC,IAChBA,IAAKuP,KAAKlN,MAAMrC,IAChBiD,gBAAiBsM,KAAKC,MAAM6W,OAAO7Z,KAAKvJ,gBACxCq4B,kBAAkB,sBAQ1B,IAAI6C,EAAc,KAclB,OAbI5uB,KAAKC,MAAM6W,OAAO7Z,KAAK9J,WAAa,IACtCy7B,EACEhuB,EAAAzL,EAAA0L,cAACyG,GAAA,EAAD,CACE2C,aAAcjK,KAAKlN,MAAMrC,IACzBuZ,eAAe,SACf3D,SAAUrG,KAAK8kB,gBACf7X,UAAWC,KAAOpgB,UAEjBkT,KAAKytB,mBAMV7sB,EAAAzL,EAAA0L,cAAA,OAAK0E,MAAO6Q,IACVxV,EAAAzL,EAAA0L,cAAC4E,GAAD,CACEhX,MAAOuR,KAAKlN,MAAMrE,MAClBuT,MAAM,cACNjB,KAA2B,KAArBf,KAAKlN,MAAMrE,MACjBwS,MAAOjB,KAAKmD,kBAGdvC,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,CAAOlN,QAAQ,WACbf,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,wBACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAAA,OAAK0E,MAAO,CAAEspB,WAAY,SAA1B,sEACAjuB,EAAAzL,EAAA0L,cAAA,WACCb,KAAKkuB,6BAIVttB,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,KACEjO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,gCACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CAAQC,QAAS1B,KAAK4tB,2BAAtB,+BAEAhtB,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CAAQC,QAAS1B,KAAK6tB,4BAA6BtoB,MAAO,CAAE4E,WAAY,SAAxE,sBAMJvJ,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,CAAOlN,QAAQ,QACbf,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,uBACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,CAAY4L,UAAWC,KAAOrgB,cAC3B+hC,EAEDhuB,EAAAzL,EAAA0L,cAACyG,GAAA,EAAD,CACE2C,aAAcjK,KAAKlN,MAAM66B,GACzB3jB,eAAe,SACf3D,SAAUrG,KAAK0tB,eACfzgB,UAAWC,KAAOpgB,SAClByY,MAAO,CAAE4E,WAAY,SAErBvJ,EAAAzL,EAAA0L,cAAA,UAAQoG,MAAM,YAAd,eAC4C,SAA3CjH,KAAKC,MAAM6W,OAAO7Z,KAAKvJ,gBACtBkN,EAAAzL,EAAA0L,cAAA,UAAQoG,MAAM,qBAAd,uBACE,KACwC,SAA3CjH,KAAKC,MAAM6W,OAAO7Z,KAAKvJ,gBACtBkN,EAAAzL,EAAA0L,cAAA,UAAQoG,MAAM,qBAAd,uBACE,KACJrG,EAAAzL,EAAA0L,cAAA,UAAQoG,MAAM,UAAd,kBAKLka,EAEDvgB,EAAAzL,EAAA0L,cAAA,SACE1I,GAAG,aACH2E,KAAK,OACLqJ,OAAO,8BACPZ,MAAO,CAAEa,QAAS,QAClBC,SAAUrG,KAAKoD,8BA9TC5C,IAAMoB,WAiVjBnB,eAZS,SAAC3N,GACvB,MAAO,CACLgkB,OAAQhkB,IAIe,SAAC+O,GAC1B,MAAO,CACLosB,cAAe,SAACx9B,EAAK2H,EAAU8G,GAAhB,OAAoC2C,ErC5U1B,SAACpR,EAAa2H,EAAkB8G,GAC3D,MAAO,CACLpC,KAAM,iBACNrM,IAAKA,EACL2H,SAAUA,EACV8G,gBAAiBA,GqCuU2C+uB,CAAcx9B,EAAK2H,EAAU8G,OAI9EuB,CAGb+sB,ICxXasB,oLAJX,OAAOluB,EAAAzL,EAAA0L,cAACkuB,GAAD,aAFoBvuB,IAAMoB,WCDxBotB,GAAe,WAE1B,OAAOn6B,KAAKo6B,SACT3Z,SAAS,IACT4Z,OAAO,IAICC,GAAY,SAACt5B,EAAaD,GACrC,OAAOf,KAAKC,MAAMD,KAAKo6B,UAAYr5B,EAAMC,EAAM,IAAMA,GAI1Cu5B,GAAmB,SAACv5B,EAAaD,EAAay5B,GACzD,IAAMC,EAAQz6B,KAAKqB,IAAI,GAAIm5B,GAM3B,OAHUx6B,KAAKC,MAAMD,KAAKo6B,UAAYr5B,EAAMC,EAAM,GAAKy5B,GAG5CA,EAAQz5B,GCNf05B,GAAsB,CAC1B,UACA,UACA,UACA,WACA,UACA,WACA,SACA,UACA,aAGIC,GAAoB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAE5EC,eACJ,SAAAA,EAAYxvB,GAAO,IAAAoC,EAAA,OAAAnF,OAAAoF,EAAA,EAAApF,CAAA8C,KAAAyvB,IACjBptB,EAAAnF,OAAAqF,EAAA,EAAArF,CAAA8C,KAAA9C,OAAAsF,EAAA,EAAAtF,CAAAuyB,GAAAhtB,KAAAzC,KAAMC,KACDyvB,mBAAqBrtB,EAAKqtB,mBAAmB3qB,KAAxB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IAFTA,oFAQjBrC,KAAKC,MAAMqG,YAAY0oB,KAAiBA,MAIxC,IAAMW,EAAMJ,GAAoBJ,GAAU,EAAGI,GAAoBz+B,OAAS,IAC1EkP,KAAKC,MAAMsG,cAAcopB,GAQzB,IAJA,IAAMC,EAAgBT,GAAU,EAAG,IAC7BU,EAAkBV,GAAU,EAAG,GAEjCW,EAAa,GACRx7B,EAAI,EAAGA,EAAIs7B,EAAet7B,IACjCw7B,EAAW3zB,KAAKizB,GAAiB,GAAI,IAAK,IAE5CU,EAAaA,EAAWnkB,KAAK,SAACxW,EAAGC,GAAJ,OAAUT,OAAOQ,GAAKR,OAAOS,KAG1D,IADA,IAAI26B,EAAe,GACVz7B,EAAI,EAAGA,EAAIu7B,EAAiBv7B,IACnCy7B,EAAa5zB,KAAKizB,GAAiB,GAAI,IAAK,IAE9CW,EAAeA,EAAapkB,KAAK,SAACxW,EAAGC,GAAJ,OAAUT,OAAOQ,GAAKR,OAAOS,KAG9D,IADA,IAAI46B,EAAY,GACP17B,EAAI,EAAGA,EAAIu7B,EAAiBv7B,IACnC07B,EAAU7zB,KAAKizB,GAAiB,GAAI,IAAK,IAE3CY,EAAYA,EAAUrkB,KAAK,SAACxW,EAAGC,GAAJ,OAAUT,OAAOQ,GAAKR,OAAOS,KAExD4K,KAAKC,MAAM0G,iBAAiB,IAAKmpB,GACjC9vB,KAAKC,MAAM0G,iBAAiB,IAAKopB,GACjC/vB,KAAKC,MAAM0G,iBAAiB,KAAMqpB,GAIlC,IAAM5yB,EAAU+xB,GAAU,EAAG,GAC7BnvB,KAAKC,MAAMwG,cAAcrJ,GAEzB,IAAK,IAAI9I,EAAI,EAAGA,EAAI8I,EAAS9I,IAAK,CAChC,IAAM7D,EAAM6D,EAAI,EACVsyB,EAAeuI,GAAU,EAAG,GAClCnvB,KAAKC,MAAMyG,mBAAmBjW,EAAKm2B,GAOrC,IAFA,IAAMqJ,EAAed,GAAU,EAAG,IAC9B97B,EAAY,GACPiB,EAAI,EAAGA,EAAI27B,EAAc37B,IAAK,CACrC,IAAI47B,EAAMV,GAAkBL,GAAU,EAAGK,GAAkB1+B,OAAS,IACpE,GAAI+D,KAAKo6B,SAAW,GAAK,CACvB,IAAMkB,EAAYhB,GAAU,EAAG,IACzBiB,EAAYjB,GAAUgB,EAAY,EAAG,IAC3CD,EAAMA,EAAM,IAAMt/B,OAAOu/B,GAAa,IAAMv/B,OAAOw/B,IAIrB,IAA5B/8B,EAAU5B,QAAQy+B,IACpB78B,EAAU8I,KAAK+zB,GAGnBlwB,KAAKC,MAAMuG,aAAanT,oCAIxB,OAAOuN,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CAAQC,QAAS1B,KAAK0vB,oBAAtB,qBA3E4BlvB,IAAMoB,WAuG9BnB,eAxBS,SAAA3N,GAAK,OAAAoK,OAAAC,EAAA,EAAAD,CAAA,GACxBpK,IAGsB,SAAA+O,GACzB,MAAO,CACL2E,aAAc,SAAAnT,GAAS,OAAIwO,EAAS2E,GAAanT,KACjDkT,cAAe,SAAAvT,GAAU,OAAI6O,EAAS0E,GAAcvT,KACpDyT,cAAe,SAAA3V,GAAM,OAAI+Q,EAAS4E,GAAc3V,KAChDwV,YAAa,SAAA1T,GAAI,OAAIiP,EAASyE,GAAY1T,KAC1C8T,mBAAoB,SAACjW,EAAK8M,GAAN,OAAgBsE,EAAS6E,GAAmBjW,EAAK8M,KACrEoJ,iBAAkB,SAAChR,EAAK+H,GAAN,OAAoBmE,EAAS8E,GAAiBhR,EAAK+H,OAa1D+C,CAGbgvB,IC/HIY,GAAqB,CACzB,UACA,QACA,OACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,OACA,SACA,UACA,WACA,aACA,QACA,OACA,WACA,OACA,WACA,OACA,SACA,UACA,SACA,QACA,QACA,OACA,UACA,OACA,WACA,QACA,YACA,SACA,UACA,QACA,QACA,aACA,YACA,SACA,UACA,QACA,UACA,OACA,UACA,SACA,SACA,QACA,SACA,WACA,QACA,SACA,OACA,MACA,MACA,QACA,WACA,SACA,WACA,OACA,UACA,UACA,SACA,SACA,QACA,UACA,SACA,YACA,MACA,YACA,SACA,OACA,QACA,OACA,QACA,UACA,WAGIC,GAAoB,CACxB,QACA,UACA,SACA,aACA,QACA,aACA,SACA,UACA,SACA,WACA,UACA,aACA,UACA,YACA,QACA,WACA,QACA,QACA,UACA,cACA,SACA,aACA,aACA,WACA,aACA,WACA,QACA,SACA,aACA,aACA,WACA,QACA,OACA,QACA,aACA,YACA,YACA,WACA,QACA,UACA,UACA,SACA,WACA,SACA,WACA,QACA,UACA,aACA,cACA,WACA,WACA,WACA,YACA,QACA,UACA,SACA,aACA,QACA,YACA,WACA,WACA,QACA,YACA,UACA,OACA,SACA,UAGIC,eACJ,SAAAA,EAAYtwB,GAAO,IAAAoC,EAAA,OAAAnF,OAAAoF,EAAA,EAAApF,CAAA8C,KAAAuwB,IACjBluB,EAAAnF,OAAAqF,EAAA,EAAArF,CAAA8C,KAAA9C,OAAAsF,EAAA,EAAAtF,CAAAqzB,GAAA9tB,KAAAzC,KAAMC,KACDuwB,4BAA8BnuB,EAAKmuB,4BAA4BzrB,KAAjC7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACnCA,EAAKouB,gBAAkBpuB,EAAKouB,gBAAgB1rB,KAArB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IACvBA,EAAKquB,sBAAwBruB,EAAKquB,sBAAsB3rB,KAA3B7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IAJZA,6FASjB,IADA,IAAM0U,EAAW/W,KAAKC,MAAM/B,aAAa1C,QAAQgV,IAAI,SAAAlb,GAAC,OAAIA,EAAE6C,KACnD7D,EAAI,EAAGA,EAAIyiB,EAASjmB,OAAQwD,IACnC0L,KAAKC,MAAMkR,mBAAmB4F,EAASziB,4CAM3B7D,EAAK2H,EAAUC,GAG7B,IAFA,IAAMs4B,EAAaxB,GAAU,EAAG,IAEvB76B,EAAI,EAAGA,EAAIq8B,EAAYr8B,IAAK,CAGnC,IAEM1B,EAFYy9B,GAAmBlB,GAAU,EAAGkB,GAAmBv/B,OAAS,IAErD,IADRw/B,GAAkBnB,GAAU,EAAGmB,GAAkBx/B,OAAS,IAKrE6E,EAAM,CAAC,IAAK,IAAK,MAAMw5B,GAAU,EAAG,IAItC12B,EAAS,GACT5D,KAAKo6B,SAAW,IAClBx2B,EAAO0D,KAAK,OAEVtH,KAAKo6B,SAAW,IAClBx2B,EAAO0D,KAAK,MAEVtH,KAAKo6B,SAAW,IAClBx2B,EAAO0D,KAAK,KAEVtH,KAAKo6B,SAAW,IAClBx2B,EAAO0D,KAAK,KAEVtH,KAAKo6B,SAAW,IAClBx2B,EAAO0D,KAAK,KAEQ,IAAlB1D,EAAO3H,QACT2H,EAAO0D,KAAK,OAOd,IADA,IAAImc,GAAW,EACNhkB,EAAI,EAAGA,EAAImE,EAAO3H,OAAQwD,IACjC,GAAImE,EAAOnE,GAAG6F,SAAS,KAAM,CAC3Bme,GAAW,EACX,MAIJ,IAAMsY,EAAkB/7B,KAAKo6B,SACzBz3B,EAAY,UACZo5B,EAAkB,KAEXA,EAAkB,GACvBtY,IACF9gB,EAAY,SAGdA,EADSo5B,EAAkB,IACf,aAEA,aAKd,IAAIv9B,EAAY,GAChB,GAAI2M,KAAKC,MAAMhD,KAAK5J,UAAUvC,OAAS,EAOrC,IANA,IAAM+/B,EAAsBh8B,KAAKe,IAAI,EAAGoK,KAAKC,MAAMhD,KAAK5J,UAAUvC,OAAS,GACrEm/B,EAAed,GAAU,EAAG0B,GAG9BC,EAAa9wB,KAAKC,MAAMhD,KAAK5J,UAAU1B,QAElC2C,EAAI,EAAGA,EAAI27B,EAAc37B,IAAK,CACrC,IAAMy8B,EAAS5B,GAAU,EAAG2B,EAAWhgC,OAAS,GAChDuC,EAAU8I,KAAK20B,EAAWC,IAG1BD,EAAW7c,OAAO8c,EAAQ,GAI9B/wB,KAAKC,MAAMiR,gBAAgB,CACzBzgB,IAAKA,EACL2H,SAAUA,EACVC,OAAQA,EACRzF,KAAMA,EACN+C,IAAKA,EACL8C,OAAQA,EACRjB,UAAWA,EACXnE,UAAWA,qDAQf2M,KAAKwwB,8BACL,IAAK,IAAI//B,EAAM,EAAGA,GAAOuP,KAAKC,MAAMhD,KAAK9J,WAAY1C,IAEnD,IADA,IAAMm2B,EAAe5mB,KAAKC,MAAMhD,KAAK7J,gBAAgB3C,EAAM,GAClD2H,EAAW,EAAGA,GAAYwuB,EAAcxuB,IAE/C,IADA,IAAM44B,EAAa7B,GAAU,EAAG,GACvB92B,EAAS,EAAGA,EAAS24B,EAAY34B,IACxC2H,KAAKywB,gBAAgBhgC,EAAK2H,EARZ,mBAQkCC,qCAOtD,OAAOuI,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CAAQC,QAAS1B,KAAK0wB,uBAAtB,uBA9H+BlwB,IAAMoB,WA0JjCnB,eAxBS,SAAA3N,GAAK,OAAAoK,OAAAC,EAAA,EAAAD,CAAA,GACxBpK,IAGsB,SAAA+O,GACzB,MAAO,CACLqP,gBAAiB,SAAA/S,GAAG,OAAI0D,EAASqP,GAAgB/S,KACjDgT,mBAAoB,SAAA5S,GAAO,OAAIsD,EAASsP,GAAmB5S,OAiBhDkC,CAGb8vB,ICjSIU,eACJ,SAAAA,EAAYhxB,GAAO,IAAAoC,EAAA,OAAAnF,OAAAoF,EAAA,EAAApF,CAAA8C,KAAAixB,IACjB5uB,EAAAnF,OAAAqF,EAAA,EAAArF,CAAA8C,KAAA9C,OAAAsF,EAAA,EAAAtF,CAAA+zB,GAAAxuB,KAAAzC,KAAMC,KAIRixB,cAAgB,WAEd,OAAI7uB,EAAKpC,MAAMhD,KAAKpJ,KADH,IAERgB,KAAKC,MAAMs6B,GAAiB,GAAI,IAAK,GAF7B,KAIRl+B,EAJQ,IAID2D,KAAKC,MAAMs6B,GAAiB,GAAI,IAAK,GAJpC,OANA/sB,EAcnB8uB,kBAAoB,WAIlB,IAHA,IAAM31B,EAAU6G,EAAKpC,MAAM/B,aAAa1C,QAClC3H,EAAgBwO,EAAKpC,MAAMhD,KAAKpJ,KAE7BS,EAAI,EAAGA,EAAIkH,EAAQ1K,OAAQwD,IAAK,CACvC,IAAMkF,EAAQgC,EAAQlH,GAIhBD,EAAeR,EAAOu7B,GAAiB,GAAI,IAAK,GAAKl+B,EAAOk+B,GAAiB,GAAI,IAAK,IAC5F/sB,EAAKpC,MAAMmR,mBAAmB5X,EAAMrB,GAAI,CACtC9D,aAAcA,IAIhB,IAAMkE,EAAM42B,GAAU,EAAG,IACzB9sB,EAAKpC,MAAMmR,mBAAmB5X,EAAMrB,GAAI,CACtCI,IAAKA,IAQP,IAHA,IAAI+f,GAAW,EACXC,GAAW,EACXC,GAAc,EACTxE,EAAI,EAAGA,EAAIxa,EAAMf,OAAO3H,OAAQkjB,IAAK,CAC5C,IAAM1e,EAAIkE,EAAMf,OAAOub,GACnB1e,EAAE6E,SAAS,OACbme,GAAW,GAEThjB,EAAE6E,SAAS,OACboe,GAAW,GAETjjB,EAAE6E,SAAS,OACbqe,GAAc,GAkBlB,GAZIF,GACFjW,EAAKpC,MAAMuX,aAAahe,EAAMrB,GAAI,IAAK,EAAGkK,EAAK6uB,iBAE7C3Y,GACFlW,EAAKpC,MAAMuX,aAAahe,EAAMrB,GAAI,IAAK,EAAGkK,EAAK6uB,iBAE7C1Y,GACFnW,EAAKpC,MAAMuX,aAAahe,EAAMrB,GAAI,IAAK,EAAGkK,EAAK6uB,iBAK7C5Y,EAAU,CACZ,IAAM8Y,EAASxgC,OAAOu+B,GAAU,EAAG,KAC7B/W,EAAMvjB,KAAKo6B,SAAW,GAAM,MAAQ,KAC1C5sB,EAAKpC,MAAMmR,mBAAmB5X,EAAMrB,GAAI,CACtCY,cAAeq4B,EAAShZ,IAI5B,GAAIG,EAAU,CACZ,IAAM6Y,EAASxgC,OAAOu+B,GAAU,EAAG,KAC7BkC,EAASzgC,OAAOu+B,GAAU,EAAG,IACnC9sB,EAAKpC,MAAMmR,mBAAmB5X,EAAMrB,GAAI,CACtCa,cAAeo4B,EAAS,IAAMC,OA5EpChvB,EAAK8uB,kBAAoB9uB,EAAK8uB,kBAAkBpsB,KAAvB7H,OAAAwG,GAAA,EAAAxG,CAAAmF,IAFRA,wEAqFjB,OAAOzB,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CAAQC,QAAS1B,KAAKmxB,mBAAtB,oBAtF2B3wB,IAAMoB,WAqG7BnB,eAXS,SAAC3N,GAAD,MAAqC,CAC3DmK,KAAMnK,EAAMmK,KACZiB,aAAcpL,EAAMoL,eAGK,SAAC2D,GAAD,MAA8B,CACvDuP,mBAAoB,SAAC7S,EAASJ,GAAV,OAAkB0D,EAASuP,GAAmB7S,EAASJ,KAC3EqZ,aAAc,SAACjZ,EAAS5C,EAAM8C,EAAmBhM,GAAnC,OACZoP,EAAS2V,GAAajZ,EAAS5C,EAAM8C,EAAmBhM,OAG7CgO,CAGbwwB,IC1HIK,8MAEJC,kBAAoB,WAClBC,aAAaC,QACb9hC,OAAOC,SAAS8hC,kFAIhB,OACE9wB,EAAAzL,EAAA0L,cAAA,WACED,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,CAAOlN,QAAQ,UACbf,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,mCACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAACY,GAAA,EAAD,CAAQ8D,MAAO,CAAEqiB,YAAa,QAAUjmB,QAAQ,SAASD,QAAS1B,KAAKuxB,mBAAvE,SAGA3wB,EAAAzL,EAAA0L,cAACmW,GAAA,EAAD,KACEpW,EAAAzL,EAAA0L,cAAC8wB,GAAD,MACA/wB,EAAAzL,EAAA0L,cAAC+wB,GAAD,MACAhxB,EAAAzL,EAAA0L,cAACgxB,GAAD,SAKNjxB,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,CAAOlN,QAAQ,QACbf,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,oBACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAAA,WAAMkD,KAAKS,UAAUxE,KAAKC,MAAO,KAAM,cA3B1BO,IAAMoB,WAuChBnB,eAJS,SAAA3N,GAAK,OAAAoK,OAAAC,EAAA,EAAAD,CAAA,GACxBpK,IAKH,KAFa2N,CAGb6wB,ICtCaQ,GARQ,WACrB,OACElxB,EAAAzL,EAAA0L,cAAA,OAAK0E,MAAO,CAAEqiB,YAAa,OAAQzd,WAAY,SAC7CvJ,EAAAzL,EAAA0L,cAACkxB,GAAD,QCyESC,oLAhEX,OACEpxB,EAAAzL,EAAA0L,cAACyE,GAAA,EAAD,KACE1E,EAAAzL,EAAA0L,cAAC6E,GAAA,EAAD,KACE9E,EAAAzL,EAAA0L,cAAC8E,GAAA,EAAD,CAAKC,GAAI,GACPhF,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,KACEjO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,gBACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAAA,qCAC4B,IAC1BD,EAAAzL,EAAA0L,cAAA,KAAGkF,KAAK,mCAAmCC,IAAI,sBAAsB/B,OAAO,UAA5E,4BAFF,KAOArD,EAAAzL,EAAA0L,cAAA,SACED,EAAAzL,EAAA0L,cAAA,UACED,EAAAzL,EAAA0L,cAAA,+CACAD,EAAAzL,EAAA0L,cAAA,2CACAD,EAAAzL,EAAA0L,cAAA,yDACAD,EAAAzL,EAAA0L,cAAA,4DACAD,EAAAzL,EAAA0L,cAAA,+DACAD,EAAAzL,EAAA0L,cAAA,8DAOVD,EAAAzL,EAAA0L,cAAC8E,GAAA,EAAD,CAAKC,GAAI,GACPhF,EAAAzL,EAAA0L,cAACgO,GAAA,EAAD,KACEjO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMC,QAAP,gBACAlO,EAAAzL,EAAA0L,cAACgO,GAAA,EAAMxN,KAAP,KACET,EAAAzL,EAAA0L,cAAA,gFACAD,EAAAzL,EAAA0L,cAAA,0FACAD,EAAAzL,EAAA0L,cAAA,UACED,EAAAzL,EAAA0L,cAAA,0EACAD,EAAAzL,EAAA0L,cAAA,oFACAD,EAAAzL,EAAA0L,cAAA,wEACAD,EAAAzL,EAAA0L,cAAA,oFAEFD,EAAAzL,EAAA0L,cAAA,2NAGOD,EAAAzL,EAAA0L,cAAA,mBAHP,gIAMAD,EAAAzL,EAAA0L,cAAA,6CACAD,EAAAzL,EAAA0L,cAAA,WA3Dd,ofA4DcD,EAAAzL,EAAA0L,cAAA,KAAGkF,KAAK,gDAAgDC,IAAI,sBAAsB/B,OAAO,UAAzF,iEAGArD,EAAAzL,EAAA0L,cAAA,WACAD,EAAAzL,EAAA0L,cAAA,KAAGkF,KAAK,4CAA4CC,IAAI,sBAAsB/B,OAAO,UAArF,sCAtDazD,IAAMoB,yCCoCpBqwB,GA1CI,WACjB,OACErxB,EAAAzL,EAAA0L,cAACqxB,GAAA,EAAD,KACEtxB,EAAAzL,EAAA0L,cAACqxB,GAAA,EAAOC,MAAR,KACEvxB,EAAAzL,EAAA0L,cAAA,OAAKgF,IAAI,aAAaC,IAAI,0BAK5BlF,EAAAzL,EAAA0L,cAACqxB,GAAA,EAAOE,OAAR,MACAxxB,EAAAzL,EAAA0L,cAACqxB,GAAA,EAAOG,SAAR,KACEzxB,EAAAzL,EAAA0L,cAACyxB,GAAA,EAAD,KACE1xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAegxB,OAAK,EAAC/wB,GAAG,KACtBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,SAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,eAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,eAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,iBAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,iBAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,cAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,cAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,iBAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,iBAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,YAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,YAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,YAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,YAEF7xB,EAAAzL,EAAA0L,cAACU,GAAA,cAAD,CAAeC,GAAG,UAChBZ,EAAAzL,EAAA0L,cAAC2xB,GAAA,EAAD,CAASC,SAAU,GAAnB,cCtBZC,aAAa,GAAAznB,OAAA/N,OAAAgO,EAAA,EAAAhO,CAAK2C,MAAL3C,OAAAgO,EAAA,EAAAhO,CAAY4C,YAwCV6yB,oLArCJ,IAAAC,EzERI,WAAwDj2B,UAAA7L,OAAA,QAAA8L,IAAAD,UAAA,IAAAA,UAAA,OACjEI,EAAqB81B,YAAYpzB,GAAkBqzB,YAAgBC,MAEvE,MAAO,CAAEh2B,QAAOi2B,UADAC,YAAal2B,IyEOAm2B,GAArBn2B,EADC61B,EACD71B,MAAOi2B,EADNJ,EACMI,UAEb,OAQEpyB,EAAAzL,EAAA0L,cAAChB,EAAA,EAAD,CAAU9C,MAAOA,GACf6D,EAAAzL,EAAA0L,cAACsyB,EAAA,EAAD,CAAajZ,QAAS,KAAM8Y,UAAWA,GACrCpyB,EAAAzL,EAAA0L,cAACuyB,GAAD,KACExyB,EAAAzL,EAAA0L,cAACwyB,GAAA,EAAD,CAAQC,SAAUpjC,kBAChB0Q,EAAAzL,EAAA0L,cAAA,WACED,EAAAzL,EAAA0L,cAAC0yB,GAAD,MACA3yB,EAAAzL,EAAA0L,cAAC2yB,GAAA,EAAD,KACE5yB,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOlB,OAAK,EAACmB,KAAK,IAAIC,UAAWvxB,KACjCxB,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWzjB,KACrCtP,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWxc,KACvCvW,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWxa,KACpCvY,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAW7J,KACvClpB,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWxL,KAClCvnB,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,WAAWC,UAAW7E,KAClCluB,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,SAASC,UAAW7B,KAChClxB,EAAAzL,EAAA0L,cAAC4yB,GAAA,EAAD,CAAOC,KAAK,SAASC,UAAW3B,kBA3BhCxxB,IAAMoB,WCblBgyB,yBAAchxB,SAASC,eAAe,SACxB,OAAhB+wB,IACFC,IAASC,OAAOlzB,EAAAzL,EAAA0L,cAACkzB,GAAD,MAASH,I7F6GrB,kBAAmBI,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAj2B,GACjCA,EAAak2B,mC8F7InBloC,EAAAC,QAAA,CAAkBY,UAAA,6BAAA4vB,WAAA,8BAAAL,WAAA,8BAAAI,YAAA,+BAAAF,QAAA,2BAAAD,SAAA,iDCAlBrwB,EAAAC,QAAA,CAAkB08B,YAAA","file":"static/js/main.b7a3f2da.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"swatch\":\"ColorPicker_swatch__2ipyO\",\"color\":\"ColorPicker_color__cXLvH\",\"popover\":\"ColorPicker_popover__3aG6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liftingView\":\"LiftingView_liftingView__W3VXA\",\"middleParentContainer\":\"LiftingView_middleParentContainer__1ysAw\",\"leftPanelContainer\":\"LiftingView_leftPanelContainer__2GOco\",\"rightPanelContainer\":\"LiftingView_rightPanelContainer__YTOzi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topBar\":\"TopBar_topBar__2HsiY\",\"lifterName\":\"TopBar_lifterName__1Hu9m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ResultsView_controlPanel__J3R0v\",\"dropdown\":\"ResultsView_dropdown__2UB4b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BarLoad_container__2ae8O\",\"rackInfo\":\"BarLoad_rackInfo__2RVUT\",\"bar\":\"BarLoad_bar__TP6yB\",\"kg50\":\"BarLoad_kg50__i7LXH\",\"kg25\":\"BarLoad_kg25__nlLuS\",\"kg20\":\"BarLoad_kg20__3xVPK\",\"kg15\":\"BarLoad_kg15__nFGDt\",\"kg10\":\"BarLoad_kg10__2mAso\",\"kg5\":\"BarLoad_kg5__2H1CX\",\"kg2p5\":\"BarLoad_kg2p5__hc46t\",\"kg1p25\":\"BarLoad_kg1p25__2YvAd\",\"kg1\":\"BarLoad_kg1__3JT5m\",\"kg0p75\":\"BarLoad_kg0p75__3ebq8\",\"kg0p5\":\"BarLoad_kg0p5__3ehD9\",\"kg0p25\":\"BarLoad_kg0p25__1nUX-\",\"lbs100\":\"BarLoad_lbs100__VaSr7\",\"lbs55\":\"BarLoad_lbs55__TustM\",\"lbs45\":\"BarLoad_lbs45__DubJx\",\"lbs35\":\"BarLoad_lbs35__37o3u\",\"lbs25\":\"BarLoad_lbs25__35m-j\",\"lbs10\":\"BarLoad_lbs10__162Qu\",\"lbs5\":\"BarLoad_lbs5__3B-J3\",\"lbs2p5\":\"BarLoad_lbs2p5__lnKdM\",\"lbs1p25\":\"BarLoad_lbs1p25__1yMbs\",\"lbs0p5\":\"BarLoad_lbs0p5__1LZiS\",\"collar\":\"BarLoad_collar__3IXT7\",\"error\":\"BarLoad_error__1t6Re\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liftingtable\":\"LiftingTable_liftingtable__2-Rse\",\"textCell\":\"LiftingTable_textCell__gOmZ-\",\"smallCell\":\"LiftingTable_smallCell__vwNWg\",\"spacerCell\":\"LiftingTable_spacerCell__3EnYx\",\"attemptInputCell\":\"LiftingTable_attemptInputCell__1YoPG\",\"current\":\"LiftingTable_current__1v05Z\",\"goodlift\":\"LiftingTable_goodlift__1v8vY\",\"nolift\":\"LiftingTable_nolift__GDNkx\",\"attemptInput\":\"LiftingTable_attemptInput__tuKcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"LiftingFooter_footer__2Mb6I\",\"leftControls\":\"LiftingFooter_leftControls__kesKc\",\"rightControls\":\"LiftingFooter_rightControls__mXLjl\",\"fullscreen\":\"LiftingFooter_fullscreen__1HPVI\",\"goodLift\":\"LiftingFooter_goodLift__T-O7p\",\"noLift\":\"LiftingFooter_noLift__3-y0k\",\"selector\":\"LiftingFooter_selector__1Ndtq\"};","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// See comments in src/versions.js.\n\nimport { stateVersion, releaseVersion } from \"../versions\";\nimport type { OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { VersionsState } from \"../types/stateTypes\";\n\nconst initialState: VersionsState = {\n  stateVersion,\n  releaseVersion\n};\n\ntype Action = OverwriteStoreAction;\n\nexport default (state: VersionsState = initialState, action: Action): VersionsState => {\n  switch (action.type) {\n    case \"OVERWRITE_STORE\":\n      return action.store.versions;\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Versioning for the global State object.\n//\n// Incrementing the version string breaks compatibility between implementations,\n// with the expectation that a converter will be automatically applied if possible,\n// such that a version of OpenLifter that internally uses version \"B\" can still\n// load files written in version \"A\", by means of auto-upgrading.\n//\n// This string is stored on the GlobalState as the property \"versions.stateVersion\".\n// Each save file thereby reports its own version.\nexport const stateVersion: string = \"0\";\n\n// Versioning for the OpenLifter project as a whole.\n//\n// This is safely incrementable on *releases*. Its function is exclusively to alert\n// users to \"automatic\" upgrades of the software, and it is reported explicitly\n// on the Home page.\n//\n// Changing this version does *not* represent data incompatibilities; for that,\n// please use the \"stateVersion\".\n//\n// This string is stored on the GlobalState as the property \"versions.releaseVersion\".\n//\n// It's defined by the '.env' file in the project root, which references\n// the package.json variable 'version'.\nexport const releaseVersion: string =\n  typeof process.env.REACT_APP_VERSION === \"string\" ? process.env.REACT_APP_VERSION : \"[undefined REACT_APP_VERSION]\";\n\n// Strictly-presentational representation of when the releaseVersion was changed.\n// Update this concurrently with modifying the releaseVersion.\n// This value is not stored in the state: it's purely informational.\nexport const releaseDate: string = \"2019-07-31\";\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for working with Dates, which is trickier than you might expect:\n// the global state wants strings in YYYY-MM-DD, date objects get created from\n// strings in UTC time, and React widgets create Dates in local time.\n\nexport const iso8601ToLocalDate = (s: string): Date => {\n  const [yearStr, monthStr, dayStr] = s.split(\"-\");\n\n  const year = parseInt(yearStr, 10);\n  const month = parseInt(monthStr, 10);\n  const day = parseInt(dayStr, 10);\n\n  let d = new Date();\n  d.setFullYear(year, month - 1, day);\n  return d;\n};\n\nexport const localDateToIso8601 = (d: Date): string => {\n  const year: number = d.getFullYear();\n  const month: number = d.getMonth() + 1;\n  const day: number = d.getDate();\n\n  const yearStr = String(year);\n  let monthStr = String(month);\n  if (monthStr.length === 1) {\n    monthStr = \"0\" + monthStr;\n  }\n  let dayStr = String(day);\n  if (dayStr.length === 1) {\n    dayStr = \"0\" + dayStr;\n  }\n\n  return yearStr + \"-\" + monthStr + \"-\" + dayStr;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines operations for converting between different units, usually\n// pounds and kg.\n\nexport const kg2lbs = (kg: number): number => {\n  return kg * 2.20462262;\n};\n\nexport const lbs2kg = (lbs: number): number => {\n  return lbs / 2.20462262;\n};\n\n// Renders a weight (kg or lbs) for display, rounding to two decimal places,\n// hiding unnecessary zeros on the right.\n//\n// This rounding behavior eliminates all the visual inconsistencies of lbs->kg\n// conversion -- for example, how 112.5lbs isn't representable exactly in kg.\nexport const displayWeight = (weight: number): string => {\n  const s = weight.toFixed(2).replace(\".00\", \"\");\n\n  // If the string isn't \".00\" but has a decimal, try to chop off a zero.\n  if (s.indexOf(\".\") >= 0 && s.endsWith(\"0\")) {\n    return s.slice(0, -1);\n  }\n\n  // Otherwise all the digits are necessary.\n  return s;\n};\n\n// Renders a weight (kg or lbs) for display, rounding to one decimal place.\n// hiding unnecessary zeros on the right.\nexport const displayWeightOnePlace = (weight: number): string => {\n  return weight.toFixed(1).replace(\".0\", \"\");\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Color codes must be in upper-case to match the ColorPicker output.\nexport const PlateColors = {\n  PLATE_DEFAULT_BLACK: \"#000000\",\n  PLATE_DEFAULT_WHITE: \"#FFFFFF\",\n  PLATE_DEFAULT_BLUE: \"#4990E2\",\n  PLATE_DEFAULT_GREEN: \"#2AB003\",\n  PLATE_DEFAULT_GRAY: \"#575757\",\n  PLATE_DEFAULT_RED: \"#FF0000\",\n  PLATE_DEFAULT_YELLOW: \"#FFEF2A\",\n  PLATE_DEFAULT_ORANGE: \"#F25A1D\",\n  PLATE_DEFAULT_PINK: \"#E81FA5\",\n  PLATE_DEFAULT_PURPLE: \"#9B16F2\"\n};\n\nexport type PlateColorsType = $Keys<typeof PlateColors>;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { localDateToIso8601 } from \"../logic/date\";\nimport { kg2lbs, lbs2kg, displayWeight } from \"../logic/units\";\nimport { PlateColors } from \"../constants/plateColors\";\n\nimport type { MeetSetupAction, OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { Plate } from \"../types/dataTypes\";\nimport type { MeetState } from \"../types/stateTypes\";\n\nconst defaultPlatformsOnDay = 1;\n\nconst defaultBarAndCollarsWeightKg = 25; // Assuming metal 2.5kg collars.\nconst defaultBarAndCollarsWeightLbs = 45; // Assuming plastic collars.\n\n// Default kg plates, allowing for increments of 0.5kg.\nconst defaultPlatesKg: Array<Plate> = [\n  { weightKg: 50, pairCount: 0, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: 25, pairCount: 8, color: PlateColors.PLATE_DEFAULT_RED },\n  { weightKg: 20, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLUE },\n  { weightKg: 15, pairCount: 1, color: PlateColors.PLATE_DEFAULT_YELLOW },\n  { weightKg: 10, pairCount: 1, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: 5, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLACK },\n  { weightKg: 2.5, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLACK },\n  { weightKg: 1.25, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLACK },\n  { weightKg: 1, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLUE },\n  { weightKg: 0.75, pairCount: 1, color: PlateColors.PLATE_DEFAULT_RED },\n  { weightKg: 0.5, pairCount: 1, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: 0.25, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLUE }\n];\n\n// Default lbs plates, allowing for increments of 1lb.\nconst defaultPlatesLbs: Array<Plate> = [\n  { weightKg: lbs2kg(100), pairCount: 0, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: lbs2kg(55), pairCount: 0, color: PlateColors.PLATE_DEFAULT_RED },\n  { weightKg: lbs2kg(45), pairCount: 8, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(35), pairCount: 0, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(25), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(10), pairCount: 2, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(5), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(2.5), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(1.25), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(0.5), pairCount: 2, color: PlateColors.PLATE_DEFAULT_GRAY }\n];\n\nconst initialState: MeetState = {\n  // Sanction information.\n  name: \"\",\n  country: \"\",\n  state: \"\",\n  city: \"\",\n  federation: \"\",\n  date: localDateToIso8601(new Date()),\n  lengthDays: 1,\n  platformsOnDays: [defaultPlatformsOnDay],\n\n  // Competition Rules.\n  divisions: [],\n  weightClassesKgMen: [],\n  weightClassesKgWomen: [],\n  weightClassesKgMx: [],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true,\n\n  // Weights and Loading Setup.\n  inKg: true,\n  showAlternateUnits: true,\n  squatBarAndCollarsWeightKg: defaultBarAndCollarsWeightKg,\n  benchBarAndCollarsWeightKg: defaultBarAndCollarsWeightKg,\n  deadliftBarAndCollarsWeightKg: defaultBarAndCollarsWeightKg,\n  plates: defaultPlatesKg\n};\n\n// Given a sorted list of weight classes (in kg) and a bodyweight (in kg),\n// return a string describing the weight class.\nexport const getWeightClassStr = (classes: Array<number>, bodyweightKg: number): string => {\n  if (bodyweightKg === 0) return \"\";\n  if (classes.length === 0) return \"\";\n\n  for (let i = 0; i < classes.length; i++) {\n    if (bodyweightKg <= classes[i]) {\n      return displayWeight(classes[i]);\n    }\n  }\n  return displayWeight(classes[classes.length - 1]) + \"+\";\n};\n\n// Converts a kg weightclass to pounds.\n//\n// For example, the 90kg class is technically 198.41lbs,\n// but this will return \"198\".\nexport const wtclsStrKg2Lbs = (kgcls: string): string => {\n  const shw: boolean = kgcls.endsWith(\"+\");\n  const asNumber = Number(kgcls.replace(\"+\", \"\"));\n\n  // Convert to pounds and round down.\n  let truncated = Math.floor(kg2lbs(asNumber));\n\n  // This works for everything but the 183 class, which\n  // rounds down to 182.\n  if (truncated === 182) {\n    truncated = 183;\n  }\n\n  return shw ? String(truncated) + \"+\" : String(truncated);\n};\n\n// Given a sorted list of weight classes (in kg) and a bodyweight (in kg),\n// return a string describing the weight class.\n//\n// This is a separate method because it turns out that many exact translations\n// of kilo values are not what the audience expects for traditionally-reported\n// pounds classes. So a bunch of rounding must occur.\nexport const getWeightClassLbsStr = (classes: Array<number>, bodyweightKg: number): string => {\n  if (bodyweightKg === 0) return \"\";\n  if (classes.length === 0) return \"\";\n\n  for (let i = 0; i < classes.length; i++) {\n    if (bodyweightKg <= classes[i]) {\n      return wtclsStrKg2Lbs(String(classes[i]));\n    }\n  }\n  return wtclsStrKg2Lbs(String(classes[classes.length - 1])) + \"+\";\n};\n\ntype Action = MeetSetupAction | OverwriteStoreAction;\n\nexport default (state: MeetState = initialState, action: Action): MeetState => {\n  switch (action.type) {\n    case \"SET_MEET_NAME\":\n      return { ...state, name: action.name };\n\n    case \"SET_FORMULA\":\n      return { ...state, formula: action.formula };\n\n    case \"SET_FEDERATION\":\n      return { ...state, federation: action.federation };\n\n    case \"SET_DIVISIONS\":\n      return { ...state, divisions: action.divisions };\n\n    case \"SET_MEET_DATE\":\n      return { ...state, date: action.date };\n\n    case \"SET_LENGTH_DAYS\": {\n      const numDays = Number(action.length);\n\n      if (numDays >= state.platformsOnDays.length) {\n        const diff = numDays - state.platformsOnDays.length;\n\n        let newPlatformsOnDays: Array<number> = state.platformsOnDays.slice();\n        for (let i = 0; i < diff; i++) {\n          newPlatformsOnDays.push(defaultPlatformsOnDay);\n        }\n\n        return { ...state, lengthDays: numDays, platformsOnDays: newPlatformsOnDays };\n      }\n      return { ...state, lengthDays: numDays };\n    }\n\n    case \"SET_PLATFORM_COUNT\": {\n      const day = Number(action.day);\n      const count = Number(action.count);\n\n      let newPlatformsOnDays: Array<number> = state.platformsOnDays.slice();\n      newPlatformsOnDays[day - 1] = count;\n      return { ...state, platformsOnDays: newPlatformsOnDays };\n    }\n\n    case \"SET_IN_KG\": {\n      // Changing the units also changes the loading, so re-initialize from defaults.\n      const defaultPlates = action.inKg ? defaultPlatesKg : defaultPlatesLbs;\n      const defaultBar = action.inKg ? defaultBarAndCollarsWeightKg : lbs2kg(defaultBarAndCollarsWeightLbs);\n      return {\n        ...state,\n        inKg: action.inKg,\n        plates: defaultPlates,\n        squatBarAndCollarsWeightKg: defaultBar,\n        benchBarAndCollarsWeightKg: defaultBar,\n        deadliftBarAndCollarsWeightKg: defaultBar\n      };\n    }\n\n    case \"SET_WEIGHTCLASSES\": {\n      const sex = action.sex;\n      const classesKg = action.classesKg;\n      switch (sex) {\n        case \"M\":\n          return { ...state, weightClassesKgMen: classesKg };\n        case \"F\":\n          return { ...state, weightClassesKgWomen: classesKg };\n        case \"Mx\":\n          return { ...state, weightClassesKgMx: classesKg };\n        default:\n          (sex: empty) // eslint-disable-line\n          return state;\n      }\n    }\n\n    case \"SET_BAR_AND_COLLARS_WEIGHT_KG\": {\n      switch (action.lift) {\n        case \"S\":\n          return { ...state, squatBarAndCollarsWeightKg: action.weightKg };\n        case \"B\":\n          return { ...state, benchBarAndCollarsWeightKg: action.weightKg };\n        case \"D\":\n          return { ...state, deadliftBarAndCollarsWeightKg: action.weightKg };\n        default:\n          (action.lift: empty) // eslint-disable-line\n          return state;\n      }\n    }\n\n    case \"SET_PLATE_CONFIG\": {\n      const { weightKg, pairCount, color } = action;\n\n      // Find the index of the object in the platesOnSide array by comparing weights.\n      const index = state.plates.findIndex(p => p.weightKg === weightKg);\n\n      // Clone the array.\n      let newPlates: Array<Plate> = state.plates.slice();\n\n      // Replace with a new object in the new array.\n      newPlates[index] = { weightKg, pairCount, color };\n\n      return { ...state, plates: newPlates };\n    }\n\n    case \"UPDATE_MEET\": {\n      const changes = action.changes;\n\n      // Make a new MeetState with just the changes overwritten.\n      let newState = Object.assign({}, state);\n      return Object.assign(newState, changes);\n    }\n\n    case \"OVERWRITE_STORE\":\n      return action.store.meet;\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of points as a multiple of bodyweight.\n//\n// Although this logic is very simple, there is some finesse to avoid\n// division by zero that is easier to write once and import than repeat.\n\nexport const bodyweight_multiple = (bodyweightKg: number, totalKg: number): number => {\n  if (bodyweightKg <= 0 || totalKg <= 0) {\n    return 0;\n  }\n  return totalKg / bodyweightKg;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Dots points.\n//\n// Dots were introduced by the German IPF Affiliate BVDK after the IPF switched to\n// IPF Points, which do not allow comparing between sexes. The BVDK hosts team\n// competitions that allow lifters of all sexes to compete on a singular team.\n//\n// Since Wilks points have been ostracized from the IPF, and IPF Points are\n// unsuitable, German lifters therefore came up with their own formula.\n//\n// The author of the Dots formula is Tim Konertz <tim.konertz@outlook.com>.\n//\n// Tim says that Dots is an acronym for \"Dynamic Objective Team Scoring,\"\n// but that they chose the acronym before figuring out the expansion.\n//\n// Implementation taken from the main OpenPowerlifting repo, also AGPLv3+.\n\nimport type { Sex } from \"../../types/dataTypes\";\n\nfunction dotsPoly(a: number, b: number, c: number, d: number, e: number, x: number): number {\n  const x2 = x * x;\n  const x3 = x2 * x;\n  const x4 = x3 * x;\n  return 500.0 / (a * x4 + b * x3 + c * x2 + d * x + e);\n}\n\nexport function dotsMen(bodyweightKg: number): number {\n  const A = -0.000001093;\n  const B = 0.0007391293;\n  const C = -0.1918759221;\n  const D = 24.0900756;\n  const E = -307.75076;\n\n  const adjusted = Math.max(Math.min(bodyweightKg, 210.0), 40.0);\n  return dotsPoly(A, B, C, D, E, adjusted);\n}\n\nexport function dotsWomen(bodyweightKg: number): number {\n  const A = -0.0000010706;\n  const B = 0.0005158568;\n  const C = -0.1126655495;\n  const D = 13.6175032;\n  const E = -57.96288;\n\n  const adjusted = Math.max(Math.min(bodyweightKg, 150.0), 40.0);\n  return dotsPoly(A, B, C, D, E, adjusted);\n}\n\nexport const dots = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  if (bodyweightKg === 0 || totalKg === 0) {\n    return 0.0;\n  }\n\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return dotsMen(bodyweightKg) * totalKg;\n    case \"F\":\n      return dotsWomen(bodyweightKg) * totalKg;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Schwartz-Malone points.\n// Taken from https://gitlab.com/openpowerlifting/opl-data.\n\nimport type { Sex } from \"../../types/dataTypes\";\n\n// Calculated the Schwartz coefficient, used for men.\nexport const schwartz_coefficient = (bodyweightKg: number): number => {\n  // Values calculated by fitting to coefficient tables.\n  const A = 3565.902903983125;\n  const B = -2.244917050872728;\n  const C = 0.445775838479913;\n\n  // Arbitrary choice of lower bound.\n  let adjusted = Math.max(bodyweightKg, 40.0);\n\n  return A * Math.pow(adjusted, B) + C;\n};\n\n// Calculates the Malone coefficient, used for women.\nexport const malone_coefficient = (bodyweightKg: number): number => {\n  // Values calculated by fitting to coefficient tables.\n  const A = 106.011586323613;\n  const B = -1.293027130579051;\n  const C = 0.322935585328304;\n\n  // Lower bound chosen at point where Malone = max(Wilks).\n  let adjusted = Math.max(bodyweightKg, 29.24);\n\n  return A * Math.pow(adjusted, B) + C;\n};\n\n// Calculates Schwartz-Malone points.\n//\n// Schwartz-Malone is an older system that was superseded by Wilks.\nexport const schwartzmalone = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n      return schwartz_coefficient(bodyweightKg) * totalKg;\n    case \"F\":\n      return malone_coefficient(bodyweightKg) * totalKg;\n    default:\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Wilks points.\n// Taken from https://gitlab.com/openpowerlifting/ipf-points-calculator.\n\nimport type { Sex } from \"../../types/dataTypes\";\n\nfunction wilksPoly(a: number, b: number, c: number, d: number, e: number, f: number, x: number): number {\n  var x2 = x * x,\n    x3 = x2 * x,\n    x4 = x3 * x,\n    x5 = x4 * x;\n  return 500.0 / (a + b * x + c * x2 + d * x3 + e * x4 + f * x5);\n}\n\nexport function wilksMen(bodyweightKg: number): number {\n  const normalized = Math.min(Math.max(bodyweightKg, 40.0), 201.9);\n  return wilksPoly(-216.0475144, 16.2606339, -0.002388645, -0.00113732, 7.01863e-6, -1.291e-8, normalized);\n}\n\nexport function wilksWomen(bodyweightKg: number): number {\n  const normalized = Math.min(Math.max(bodyweightKg, 26.51), 154.53);\n  return wilksPoly(\n    594.31747775582,\n    -27.23842536447,\n    0.82112226871,\n    -0.00930733913,\n    0.00004731582,\n    -0.00000009054,\n    normalized\n  );\n}\n\nexport const wilks = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return wilksMen(bodyweightKg) * totalKg;\n    case \"F\":\n      return wilksWomen(bodyweightKg) * totalKg;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Glossbrenner points.\n// Taken from https://gitlab.com/openpowerlifting/opl-data.\n\nimport { schwartz_coefficient, malone_coefficient } from \"./schwartzmalone\";\nimport { wilksMen, wilksWomen } from \"./wilks\";\n\nimport type { Sex } from \"../../types/dataTypes\";\n\nconst glossbrenner_coefficient_men = (bodyweightKg: number): number => {\n  // Glossbrenner is defined piecewise.\n  if (bodyweightKg < 153.05) {\n    return (schwartz_coefficient(bodyweightKg) + wilksMen(bodyweightKg)) / 2.0;\n  } else {\n    // Linear coefficients found by fitting to a table.\n    const A = -0.000821668402557;\n    const B = 0.676940740094416;\n    return (schwartz_coefficient(bodyweightKg) + A * bodyweightKg + B) / 2.0;\n  }\n};\n\nconst glossbrenner_coefficient_women = (bodyweightKg: number): number => {\n  // Glossbrenner is defined piecewise.\n  if (bodyweightKg < 106.3) {\n    return (malone_coefficient(bodyweightKg) + wilksWomen(bodyweightKg)) / 2.0;\n  } else {\n    // Linear coefficients found by fitting to a table.\n    const A = -0.000313738002024;\n    const B = 0.852664892884785;\n    return (malone_coefficient(bodyweightKg) + A * bodyweightKg + B) / 2.0;\n  }\n};\n\n// Calculates Glossbrenner points.\n//\n// Glossbrenner is the average of two older systems, Schwartz-Malone and Wilks,\n// with a piecewise linear section.\n//\n// This points system is most often used by GPC affiliates.\nexport const glossbrenner = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return glossbrenner_coefficient_men(bodyweightKg) * totalKg;\n    case \"F\":\n      return glossbrenner_coefficient_women(bodyweightKg) * totalKg;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of IPF Points.\n// Taken from https://gitlab.com/openpowerlifting/ipf-points-calculator.\n\nimport type { Sex, Event, Equipment } from \"../../types/dataTypes\";\n\ntype Coefficients = Array<number>;\ntype ByEvent = {\n  SBD: Coefficients,\n  S: Coefficients,\n  B: Coefficients,\n  D: Coefficients\n};\ntype ByEquipment = {\n  Sleeves: ByEvent,\n  \"Single-ply\": ByEvent\n};\ntype BySex = {\n  M: ByEquipment,\n  F: ByEquipment\n};\n\nconst PARAMETERS: BySex = {\n  M: {\n    Sleeves: {\n      SBD: [310.67, 857.785, 53.216, 147.0835],\n      S: [123.1, 363.085, 25.1667, 75.4311],\n      B: [86.4745, 259.155, 17.57845, 53.122],\n      D: [103.5355, 244.765, 15.3714, 31.5022]\n    },\n    \"Single-ply\": {\n      SBD: [387.265, 1121.28, 80.6324, 222.4896],\n      S: [150.485, 446.445, 36.5155, 103.7061],\n      B: [133.94, 441.465, 35.3938, 113.0057],\n      D: [110.135, 263.66, 14.996, 23.011]\n    }\n  },\n  F: {\n    Sleeves: {\n      SBD: [125.1435, 228.03, 34.5246, 86.8301],\n      S: [50.479, 105.632, 19.1846, 56.2215],\n      B: [25.0485, 43.848, 6.7172, 13.952],\n      D: [47.136, 67.349, 9.1555, 13.67]\n    },\n    \"Single-ply\": {\n      SBD: [176.58, 373.315, 48.4534, 110.0103],\n      S: [74.6855, 171.585, 21.9475, 52.2948],\n      B: [49.106, 124.209, 23.199, 67.4926],\n      D: [51.002, 69.8265, 8.5802, 5.7258]\n    }\n  }\n};\n\nexport const ipfpoints = (\n  totalKg: number,\n  bodyweightKg: number,\n  sex: Sex,\n  equipment: Equipment,\n  event: Event\n): number => {\n  if (totalKg === 0) return 0;\n  if (bodyweightKg < 40) return 0;\n\n  // Restrict inputs to only the defined subset.\n  let normalizedEquipment = equipment;\n  if (equipment === \"Bare\" || equipment === \"Wraps\") {\n    normalizedEquipment = \"Sleeves\";\n  } else if (equipment === \"Multi-ply\") {\n    normalizedEquipment = \"Single-ply\";\n  }\n  if (normalizedEquipment !== \"Sleeves\" && normalizedEquipment !== \"Single-ply\") {\n    return 0;\n  }\n\n  // Consider Mx athletes as M, since that's the harsher formula.\n  let normalizedSex = sex;\n  if (sex === \"Mx\") normalizedSex = \"M\";\n\n  if (event !== \"SBD\" && event !== \"S\" && event !== \"B\" && event !== \"D\") return 0;\n  if (normalizedSex !== \"M\" && normalizedSex !== \"F\") return 0;\n\n  const params = PARAMETERS[normalizedSex][normalizedEquipment][event];\n  const bw_log = Math.log(bodyweightKg);\n\n  const mean = params[0] * bw_log - params[1];\n  const dev = params[2] * bw_log - params[3];\n\n  const points = 500 + (100 * (totalKg - mean)) / dev;\n  if (isNaN(points) || points < 0) {\n    return 0;\n  }\n  return points;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of NASA Points.\n// They are defined in a coefficient table: http://nasa-sports.com/coefficient-system/\n// It turns out that they are a simple line.\n\nexport const nasapoints = (bodyweightKg: number, totalKg: number): number => {\n  // The function was determined using fitting in GNUPlot:\n  //\n  // Final set of parameters            Asymptotic Standard Error\n  // =======================            ==========================\n  // m               = 0.00620912       +/- 1.265e-06    (0.02037%)\n  // b               = 0.565697         +/- 0.0001322    (0.02337%)\n  const m = 0.00620912;\n  const b = 0.565697;\n\n  if (bodyweightKg < 30) return 0; // Arbitrary lower bound.\n  return (totalKg / bodyweightKg) * (m * bodyweightKg + b);\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for creating and working with Entry objects.\n\nimport { bodyweight_multiple } from \"./coefficients/bodyweight-multiple\";\nimport { dots } from \"./coefficients/dots\";\nimport { glossbrenner } from \"./coefficients/glossbrenner\";\nimport { ipfpoints } from \"./coefficients/ipf\";\nimport { nasapoints } from \"./coefficients/nasa\";\nimport { schwartzmalone } from \"./coefficients/schwartzmalone\";\nimport { wilks } from \"./coefficients/wilks\";\n\nimport type { Entry, Lift, Event, FieldKg, FieldStatus } from \"../types/dataTypes\";\n\n// Length of {squat,bench,deadlift}{Kg,Status} in each Entry.\nexport const MAX_ATTEMPTS = 5;\n\nexport const newDefaultEntry = (id: number): Entry => {\n  return {\n    // Bookkeeping internal information for OpenLifter.\n    id: id, // The global unique ID of this registration.\n\n    // Information about when the lifter is scheduled to lift.\n    day: 1, // The day on which the lifter is lifting.\n    platform: 1, // The platform on which the lifter is lifting.\n    flight: \"A\", // The flight in which the lifter is lifting.\n\n    // Information about the lifter themselves.\n    name: \"\", // The lifter's name.\n    sex: \"M\", // The lifter's sex.\n    birthDate: \"\", // The lifter's birthdate (YYYY-MM-DD).\n    age: 0, // The lifter's age in years\n    country: \"\", // Lifter's home country, or blank.\n    state: \"\", // Lifter's home state, or blank.\n    intendedWeightClassKg: \"\", // The weightclass for which the lifter registered.\n    equipment: \"Sleeves\", // The equipment category for which the lifter registered.\n    divisions: [], // A list of divisions the lifter entered.\n    events: [], // A list of events the lifter entered.\n\n    // Metadata about the lifter, assigned by the meet director.\n    lot: 0, // The lifter's lot number, for breaking ties in lifting order.\n    memberId: \"\", // Optional federation MemberID, for reporting in results.\n    paid: false, // Used by the meet director for tracking whether the lifter paid.\n    team: \"\", // Optional. Only used in the final results export.\n    notes: \"\", // Free-form text for the meet director to use as a scratchpad.\n\n    // Information added on the \"Weigh-ins\" page.\n    // But we might as well track it in this object.\n    bodyweightKg: 0.0,\n    squatRackInfo: \"\", // A freeform string for the benefit of the loaders.\n    benchRackInfo: \"\", // A freeform string for the benefit of the loaders.\n\n    // Lifting information. Weights always stored internally in kg.\n    squatKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n    benchKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n    deadliftKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n\n    // Lifting information, success state:\n    //  -1 => No Lift.\n    //   0 => Not Yet Done.\n    //   1 => Good Lift.\n    //\n    // Note that this system has the property where corresponding (kg*status)\n    // produces the SquatXKg as expected by the main OpenPowerlifting CSV format.\n    squatStatus: [0, 0, 0, 0, 0],\n    benchStatus: [0, 0, 0, 0, 0],\n    deadliftStatus: [0, 0, 0, 0, 0]\n  };\n};\n\n// Gets the best squat, including extra attempts that don't count for the total.\nexport const getBest5SquatKg = (entry: Entry): number => {\n  let best3SquatKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.squatStatus[i] === 1) {\n      best3SquatKg = Math.max(best3SquatKg, entry.squatKg[i]);\n    }\n  }\n  return best3SquatKg;\n};\n\n// Gets the best bench, including extra attempts that don't count for the total.\nexport const getBest5BenchKg = (entry: Entry): number => {\n  let best3BenchKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.benchStatus[i] === 1) {\n      best3BenchKg = Math.max(best3BenchKg, entry.benchKg[i]);\n    }\n  }\n  return best3BenchKg;\n};\n\n// Gets the best deadlift, including extra attempts that don't count for the total.\nexport const getBest5DeadliftKg = (entry: Entry): number => {\n  let best3DeadliftKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.deadliftStatus[i] === 1) {\n      best3DeadliftKg = Math.max(best3DeadliftKg, entry.deadliftKg[i]);\n    }\n  }\n  return best3DeadliftKg;\n};\n\n// The ProjectedTotal optimistically assumes that lifters will get *first* attempts\n// that have not yet been taken. It is used for calculating a total while lifters\n// are still squatting and benching.\n//\n// 2nd and 3rd attempts are treated normally, where they only count toward the\n// total if they have been successful.\nexport const getProjectedTotalKg = (entry: Entry): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] >= 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n\n  let best3Bench = 0.0;\n  if (entry.benchStatus[0] >= 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n  if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n  if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n\n  let best3Dead = 0.0;\n  if (entry.deadliftStatus[0] >= 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n  if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n  if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  if (best3Bench === 0 && entry.benchStatus[0] === -1) return 0.0;\n  if (best3Dead === 0 && entry.deadliftStatus[0] === -1) return 0.0;\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\nexport const getProjectedEventTotalKg = (entry: Entry, event: Event): number => {\n  let best3Squat = 0.0;\n  if (event.includes(\"S\")) {\n    if (entry.squatStatus[0] >= 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n    if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n    if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n  }\n\n  let best3Bench = 0.0;\n  if (event.includes(\"B\")) {\n    if (entry.benchStatus[0] >= 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n    if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n    if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n  }\n\n  let best3Dead = 0.0;\n  if (event.includes(\"D\")) {\n    if (entry.deadliftStatus[0] >= 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n    if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n    if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n  }\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  if (best3Bench === 0 && entry.benchStatus[0] === -1) return 0.0;\n  if (best3Dead === 0 && entry.deadliftStatus[0] === -1) return 0.0;\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\nexport const getBest3SquatKg = (entry: Entry): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n  return best3Squat;\n};\n\nexport const getBest3BenchKg = (entry: Entry): number => {\n  let best3Bench = 0.0;\n  if (entry.benchStatus[0] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n  if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n  if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n  return best3Bench;\n};\n\nexport const getBest3DeadliftKg = (entry: Entry): number => {\n  let best3Dead = 0.0;\n  if (entry.deadliftStatus[0] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n  if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n  if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n  return best3Dead;\n};\n\n// The Total is the sum of best of the first 3 attempts of each lift.\nexport const getFinalTotalKg = (entry: Entry): number => {\n  const best3Squat = getBest3SquatKg(entry);\n  const best3Bench = getBest3BenchKg(entry);\n  const best3Dead = getBest3DeadliftKg(entry);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  if (best3Bench === 0 && entry.benchStatus[0] === -1) return 0.0;\n  if (best3Dead === 0 && entry.deadliftStatus[0] === -1) return 0.0;\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\n// Restricts the total calculation to just for the specified Event.\nexport const getFinalEventTotalKg = (entry: Entry, event: Event): number => {\n  let best3Squat = 0.0;\n  if (event.includes(\"S\")) {\n    best3Squat = getBest3SquatKg(entry);\n    if (best3Squat === 0) return 0.0;\n  }\n\n  let best3Bench = 0.0;\n  if (event.includes(\"B\")) {\n    best3Bench = getBest3BenchKg(entry);\n    if (best3Bench === 0) return 0.0;\n  }\n\n  let best3Dead = 0.0;\n  if (event.includes(\"D\")) {\n    best3Dead = getBest3DeadliftKg(entry);\n    if (best3Dead === 0) return 0.0;\n  }\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\n// Gets the Wilks score using the projected total.\nexport const getProjectedWilks = (entry: Entry): number => {\n  return wilks(entry.sex, entry.bodyweightKg, getProjectedTotalKg(entry));\n};\n\n// Gets the Wilks score using the final total.\nexport const getFinalWilks = (entry: Entry): number => {\n  return wilks(entry.sex, entry.bodyweightKg, getFinalTotalKg(entry));\n};\n\nexport const getProjectedIPFPoints = (entry: Entry, event: Event): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return ipfpoints(totalKg, entry.bodyweightKg, entry.sex, entry.equipment, event);\n};\nexport const getFinalIPFPoints = (entry: Entry, event: Event): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return ipfpoints(totalKg, entry.bodyweightKg, entry.sex, entry.equipment, event);\n};\n\nexport const getProjectedBodyweightMultiple = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return bodyweight_multiple(entry.bodyweightKg, totalKg);\n};\nexport const getFinalBodyweightMultiple = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return bodyweight_multiple(entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedDots = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return dots(entry.sex, entry.bodyweightKg, totalKg);\n};\nexport const getFinalDots = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return dots(entry.sex, entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedGlossbrenner = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return glossbrenner(entry.sex, entry.bodyweightKg, totalKg);\n};\nexport const getFinalGlossbrenner = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return glossbrenner(entry.sex, entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedNASAPoints = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return nasapoints(entry.bodyweightKg, totalKg);\n};\nexport const getFinalNASAPoints = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return nasapoints(entry.bodyweightKg, totalKg);\n};\n\nexport const getProjectedSchwartzMalone = (entry: Entry): number => {\n  const totalKg = getProjectedTotalKg(entry);\n  return schwartzmalone(entry.sex, entry.bodyweightKg, totalKg);\n};\nexport const getFinalSchwartzMalone = (entry: Entry): number => {\n  const totalKg = getFinalTotalKg(entry);\n  return schwartzmalone(entry.sex, entry.bodyweightKg, totalKg);\n};\n\n// Filter entries to only get lifters that are lifting on a given day\nexport const getLiftersOnDay = (entries: Array<Entry>, day: number): Array<Entry> => {\n  if (!entries) {\n    return [];\n  }\n  return entries.filter(entry => {\n    return entry.day === day;\n  });\n};\n\n// Convert a lift like \"S\" to the kg array field name, like \"squatKg\".\nexport const liftToAttemptFieldName = (lift: Lift): FieldKg => {\n  switch (lift) {\n    case \"S\":\n      return \"squatKg\";\n    case \"B\":\n      return \"benchKg\";\n    case \"D\":\n      return \"deadliftKg\";\n    default:\n      (lift: empty); // eslint-disable-line\n      return \"squatKg\";\n  }\n};\n\n// Convert a lift like \"S\" to the status array field name, like \"squatStatus\".\nexport const liftToStatusFieldName = (lift: Lift): FieldStatus => {\n  switch (lift) {\n    case \"S\":\n      return \"squatStatus\";\n    case \"B\":\n      return \"benchStatus\";\n    case \"D\":\n      return \"deadliftStatus\";\n    default:\n      (lift: empty); // eslint-disable-line\n      return \"squatStatus\";\n  }\n};\n\n// Whether the Entry has taken any attempts.\nexport const entryHasLifted = (entry: Entry): boolean => {\n  if (entry.squatStatus[0] !== 0) return true;\n  if (entry.benchStatus[0] !== 0) return true;\n  if (entry.deadliftStatus[0] !== 0) return true;\n  return false;\n};\n\n// Whether any Entry has taken any attempts on the given (day, platform). O(n).\nexport const liftingPresentOnPlatform = (entries: Array<Entry>, day: number, platform: number): boolean => {\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    if (entry.day !== day || entry.platform !== platform) continue;\n    if (entryHasLifted(entry)) return true;\n  }\n  return false;\n};\n\n// Given an array of how many platforms are on each day and the Entries,\n// returns an array of arrays of booleans, such that array[day-1][platform-1] is\n// true iff at least one Entry corresponding to that (day, platform) has\n// taken an attempt.\nexport const getWhetherPlatformsHaveLifted = (\n  platformsOnDays: Array<number>,\n  entries: Array<Entry>\n): Array<Array<boolean>> => {\n  let ret = [];\n  for (let day = 1; day <= platformsOnDays.length; day++) {\n    const platformsOnDay = platformsOnDays[day - 1];\n    let acc = [];\n    for (let platform = 1; platform <= platformsOnDay; platform++) {\n      acc.push(liftingPresentOnPlatform(entries, day, platform));\n    }\n    ret.push(acc);\n  }\n  return ret;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { newDefaultEntry, liftToAttemptFieldName, liftToStatusFieldName } from \"../logic/entry\";\n\nimport type {\n  RegistrationAction,\n  OverwriteStoreAction,\n  EnterAttemptAction,\n  MarkLiftAction\n} from \"../types/actionTypes\";\nimport type { Entry, Lift, FieldKg } from \"../types/dataTypes\";\nimport type { RegistrationState } from \"../types/stateTypes\";\n\nconst initialState: RegistrationState = {\n  // The next unique ID to assign.\n  //\n  // This is stored in global state to handle the case of deleting registration\n  // rows during the course of lifting.\n  //\n  // A large number is used as the initial value to make it clear that this is\n  // specifically not an index into the `entries` array.\n  nextEntryId: 5000,\n\n  // Entry objects in the order they appear on the Registration page.\n  // This array owns all registration information.\n  entries: [],\n\n  // Hash from unique ID to `entries` array index.\n  //\n  // This is for the benefit of pages other than the Registration page.\n  // Because the sort order of the `entries` array can change arbitrarily,\n  // the other pages remember globally-unique identifiers for each registration,\n  // instead of a simple array index.\n  //\n  // This lookup table allows mapping those identifiers to whatever\n  // the current location of that data is in the canonical `entries` store.\n  lookup: {}\n};\n\ntype Action = RegistrationAction | EnterAttemptAction | MarkLiftAction | OverwriteStoreAction;\n\nexport default (state: RegistrationState = initialState, action: Action): RegistrationState => {\n  switch (action.type) {\n    case \"NEW_REGISTRATION\": {\n      // The object provides optional properties that can overwrite the default.\n      // Although the UI doesn't pass properties this way, debugging code does.\n      const obj = action.overwriteDefaults;\n\n      // Generate an entries array with one more item (without modifying the orginal).\n      // Object.assign() allows `obj` to overwrite defaults if present.\n      let entries: Array<Entry> = state.entries.slice();\n      let newEntry = newDefaultEntry(state.nextEntryId);\n\n      // If a previous entry exists, pre-populate some information from it.\n      if (entries.length > 0) {\n        const previousEntry = entries[entries.length - 1];\n        newEntry.day = previousEntry.day;\n        newEntry.platform = previousEntry.platform;\n        newEntry.flight = previousEntry.flight;\n      }\n\n      // Overwrite any newEntry properties with those given in obj.\n      entries.push(Object.assign(newEntry, obj));\n\n      // Since a new entry was added, generate a new 'lookup' object,\n      // mapping from the globally-unique EntryId to the array index.\n      let lookup = Object.assign({}, state.lookup);\n      lookup[state.nextEntryId] = entries.length - 1;\n\n      return {\n        ...state,\n        nextEntryId: state.nextEntryId + 1,\n        entries: entries,\n        lookup: lookup\n      };\n    }\n\n    case \"DELETE_REGISTRATION\": {\n      const entryId = action.entryId;\n\n      // Generate an entries array without the given item.\n      let entries: Array<Entry> = state.entries.filter((item, index) => item.id !== entryId);\n\n      // Since the entry was deleted from anywhere in the array,\n      // construct a new lookup table from scratch.\n      let lookup = {};\n      for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i];\n        lookup[entry.id] = i;\n      }\n\n      return {\n        ...state,\n        entries: entries,\n        lookup: lookup\n      };\n    }\n\n    case \"UPDATE_REGISTRATION\": {\n      const entryId = action.entryId;\n      const changes = action.changes;\n\n      // Clone the entries array, since one entry will reference a new object.\n      let entries: Array<Entry> = state.entries.slice();\n\n      // Make a new object with just the changes overwritten,\n      // and reference that object from the new array.\n      const index = entries.findIndex(obj => obj.id === entryId);\n      let newEntry = Object.assign({}, entries[index]);\n      entries[index] = Object.assign(newEntry, changes);\n\n      return {\n        ...state,\n        entries: entries\n      };\n    }\n\n    case \"ENTER_ATTEMPT\": {\n      // Action parameters, with expected types.\n      const entryId = Number(action.entryId);\n      const lift: Lift = action.lift;\n      const attemptOneIndexed = Number(action.attemptOneIndexed);\n      const weightKg = Number(action.weightKg);\n\n      const field: FieldKg = liftToAttemptFieldName(lift);\n\n      // Clone the entries array, since one slot will reference a new object.\n      let newEntries: Array<Entry> = state.entries.slice();\n      const index = newEntries.findIndex(obj => obj.id === entryId);\n      const oldEntry = newEntries[index];\n\n      // Make a copy of the attempts array containing the new attempt.\n      let newarray = oldEntry[field].slice();\n      newarray[attemptOneIndexed - 1] = weightKg;\n\n      // Put that new attempts array into an object so we can use Object.assign().\n      let newfields = {};\n      newfields[field] = newarray;\n\n      // Make a new entry from the old entry, with the attempts field overwritten.\n      newEntries[index] = Object.assign(oldEntry, newfields);\n\n      return {\n        ...state,\n        entries: newEntries\n      };\n    }\n\n    case \"MARK_LIFT\": {\n      const entryId = Number(action.entryId);\n      const lift: Lift = action.lift;\n      const attemptOneIndexed = Number(action.attemptOneIndexed);\n      const success = Boolean(action.success);\n\n      // Map true to '1' and false to '-1'.\n      const status = success === true ? 1 : -1;\n\n      const fieldStatus = liftToStatusFieldName(lift);\n\n      // Clone the entries array, since one slot will reference a new object.\n      let newEntries: Array<Entry> = state.entries.slice();\n      const index = newEntries.findIndex(obj => obj.id === entryId);\n      const oldEntry = newEntries[index];\n\n      // Make a copy of the status array containing the new status.\n      let newarray = oldEntry[fieldStatus].slice();\n      newarray[attemptOneIndexed - 1] = status;\n\n      // Put that new array into an object so we can use Object.assign().\n      let newfields = {};\n      newfields[fieldStatus] = newarray;\n\n      // Make a new entry from the old entry, with the status field overwritten.\n      let newEntry = Object.assign({}, oldEntry);\n      newEntries[index] = Object.assign(newEntry, newfields);\n\n      return {\n        ...state,\n        entries: newEntries\n      };\n    }\n\n    // Caused by clicking a \"Merge\" button on the Results page.\n    case \"MERGE_PLATFORM\": {\n      const day: number = action.day;\n      const platform: number = action.platform;\n      const platformEntries: Array<Entry> = action.platformEntries;\n\n      // Filter out state entries assigned to the merged (day, platform).\n      let newEntries = state.entries.filter(e => {\n        return !(e.day === day && e.platform === platform);\n      });\n\n      // Get the nextEntryId: the merged entries will be reassigned IDs.\n      let nextEntryId: number = state.nextEntryId;\n\n      // For each incoming Entry, copy the object, assign a new ID,\n      // and place it in the newEntries array.\n      for (let i = 0; i < platformEntries.length; i++) {\n        let entry: Entry = Object.assign({}, platformEntries[i]);\n        entry.id = nextEntryId++;\n        newEntries.push(entry);\n      }\n\n      // Generate an entirely new lookup table.\n      let lookup = {};\n      for (let i = 0; i < newEntries.length; i++) {\n        lookup[newEntries[i].id] = i;\n      }\n\n      // Return a new object with the new components replaced.\n      return {\n        ...state,\n        nextEntryId: nextEntryId,\n        entries: newEntries,\n        lookup: lookup\n      };\n    }\n\n    case \"OVERWRITE_STORE\":\n      return action.store.registration;\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Lifting state only tracks manual overrides.\n//\n// Outside of overrides, the state of the meet is fully-calculated by the LiftingView.\n//\n// For safety, correctness, and ease of understanding, the state of the meet is\n// intentionally *not* stored in the global state. It is continuously recalculated.\n//\n// Please do not attempt to store meet state in the Redux store!\n\nimport type {\n  MarkLiftAction,\n  SetLiftingGroupAction,\n  OverrideAttemptAction,\n  OverrideEntryIdAction,\n  OverwriteStoreAction,\n  SetTableInfoAction\n} from \"../types/actionTypes\";\nimport type { LiftingState } from \"../types/stateTypes\";\n\nconst initialState: LiftingState = {\n  // Specifies the initial settings for the control widgets on the lifting page.\n  // The intention is that the score table sets these manually.\n  day: 1,\n  platform: 1,\n  flight: \"A\",\n  lift: \"S\",\n\n  // These properties are normally calculated, but exist here as a mechanism\n  // for a one-shot override of the normal logic. After being handled,\n  // they are unset.\n  overrideAttempt: null, // Allows selecting an attempt, even if it's completed.\n  overrideEntryId: null, // Allows selecting a lifter, even if they've already gone.\n\n  // Presentational configuration.\n  columnDivisionWidthPx: 90\n};\n\ntype Action =\n  | MarkLiftAction\n  | SetLiftingGroupAction\n  | OverrideAttemptAction\n  | OverrideEntryIdAction\n  | OverwriteStoreAction\n  | SetTableInfoAction;\n\nexport default (state: LiftingState = initialState, action: Action): LiftingState => {\n  switch (action.type) {\n    case \"MARK_LIFT\": {\n      // Unset any overrides, returning to normal lifting flow.\n      return { ...state, overrideAttempt: null, overrideEntryId: null };\n    }\n\n    case \"SET_LIFTING_GROUP\":\n      return {\n        // Keep all the UI customization stuff.\n        ...state,\n\n        // Change all the real state stuff.\n        day: action.day,\n        platform: action.platform,\n        flight: action.flight,\n        lift: action.lift,\n\n        // If the group changes, unset any overrides.\n        overrideAttempt: null,\n        overrideEntryId: null\n      };\n\n    case \"OVERRIDE_ATTEMPT\":\n      return { ...state, overrideAttempt: action.attempt };\n\n    case \"OVERRIDE_ENTRY_ID\":\n      return { ...state, overrideEntryId: action.entryId };\n\n    case \"OVERWRITE_STORE\":\n      return action.store.lifting;\n\n    case \"SET_TABLE_INFO\": {\n      const changes = action.changes;\n\n      // As a safeguard, ensure that fields unrelated to customization\n      // are not overwritten by this action.\n\n      // Make a new object that's state + changes, with changes taking priority.\n      let combined = Object.assign({}, state);\n      Object.assign(combined, changes);\n\n      // Source from this new combined object, with fields unrelated to customization\n      // deferring to the original state.\n      //\n      // So that means:\n      //  - Fields unrelated to customization will be the same as in 'state'.\n      //  - Customization fields will be from 'combined', which includes all fields\n      //    and allowed the 'changes' object to overwrite any of them.\n      return {\n        ...combined,\n\n        day: state.day,\n        platform: state.platform,\n        flight: state.flight,\n        lift: state.lift,\n\n        overrideAttempt: state.overrideAttempt,\n        overrideEntryId: state.overrideEntryId\n      };\n    }\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { combineReducers } from \"redux\";\n\nimport versionsReducer from \"./versionsReducer\";\nimport languageReducer from \"./languageReducer\";\nimport meetReducer from \"./meetReducer\";\nimport registrationReducer from \"./registrationReducer\";\nimport liftingReducer from \"./liftingReducer\";\n\n// Using combineReducers() guarantees that each part of the state object\n// fully bears the responsibility of managing itself by only sending a\n// subset of the state to the reducer.\n//\n// For example, the meetReducer() receives a new 'state' object\n// equal to 'state.meet' from the root. Because there is no way to access\n// the root state object from a child state object, the meetReducer() is\n// fully-encapsulated, allowing for sane reasoning about effects on global state.\nexport default combineReducers({\n  versions: versionsReducer,\n  language: languageReducer,\n  meet: meetReducer,\n  registration: registrationReducer,\n  lifting: liftingReducer\n});\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { ChangeLanguageAction, OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { LanguageState } from \"../types/stateTypes\";\n\ntype Action = ChangeLanguageAction | OverwriteStoreAction;\n\nexport default (state: LanguageState = \"en\", action: Action): LanguageState => {\n  switch (action.type) {\n    case \"CHANGE_LANGUAGE\":\n      return action.language;\n\n    case \"OVERWRITE_STORE\":\n      return action.store.language;\n\n    default:\n      (action.type: empty); // eslint-disable-line\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nimport type { GlobalState } from \"./types/stateTypes\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function configureStore(initialState: GlobalState = {}) {\n  let store: GlobalState = createStore(persistedReducer, applyMiddleware(thunk));\n  let persistor = persistStore(store);\n  return { store, persistor };\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport es from \"./es.json\";\nimport eo from \"./eo.json\";\n\nexport default { es, eo };\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport translations from \"../../translations/locales\";\n\nimport type { GlobalState, LanguageState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  language: LanguageState;\n}\n\n// TODO: Can get rid of this if we can get Flow typedefs for React.Component.\ninterface ImplicitProps {\n  children: Array<Object>;\n}\n\ntype Props = StateProps & ImplicitProps;\n\nclass OpenLifterIntlProvider extends React.Component<Props> {\n  render() {\n    const language = this.props.language;\n\n    // Load our translations from the json files\n    const messages = translations[language];\n\n    return (\n      // This is going to wrap any children passed to this component with an IntlProvider\n      // This will put translations of all of our child components in our app\n      <IntlProvider locale={language} key={language} messages={messages}>\n        {this.props.children}\n      </IntlProvider>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  language: state.language\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(OpenLifterIntlProvider);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { OverwriteStoreAction } from \"../types/actionTypes\";\nimport type { GlobalState } from \"../types/stateTypes\";\n\n// Overwrites the entire Redux store, handled separately by each reducer.\n// This is used to implement \"Load from File\" functionality.\nexport const overwriteStore = (store: GlobalState): OverwriteStoreAction => {\n  return {\n    type: \"OVERWRITE_STORE\",\n    store: store\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The confirmation modal that pops up when the \"New Meet\" button is clicked.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport { overwriteStore } from \"../../actions/globalActions.js\";\nimport rootReducer from \"../../reducers/rootReducer.js\";\n\nimport type { GlobalState } from \"../../types/stateTypes.js\";\n\ninterface OwnProps {\n  show: boolean;\n  close: () => void;\n}\n\ninterface DispatchProps {\n  overwriteStore: () => any;\n}\n\ntype Props = OwnProps & DispatchProps;\n\nclass NewMeetModal extends React.Component<Props> {\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.close}>\n        <Modal.Header closeButton>\n          <Modal.Title>Are you sure?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>Starting a new meet will remove all data from the current meet.</p>\n          <p>Are you sure you want to continue?</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <LinkContainer to=\"/meet-setup\">\n            <Button onClick={this.props.overwriteStore} bsStyle=\"primary\">\n              Continue\n            </Button>\n          </LinkContainer>\n          <Button onClick={this.props.close}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  const newGlobal: GlobalState = rootReducer({}, \"OVERWRITE_STORE\");\n\n  return {\n    overwriteStore: () => dispatch(overwriteStore(newGlobal))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NewMeetModal);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows a popup with an error message.\n// This exists because Chrome only allows window.alert() to execute once,\n// because Chrome is bad and Google should feel bad.\n//\n// This is intended only for use with buttons that load external resources,\n// like save files and CSV registration importation files.\n//\n// Regular old errors in widgets should be reported by setting their\n// validationState.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button } from \"react-bootstrap\";\n\ninterface OwnProps {\n  error: string;\n  title: string;\n  show: boolean;\n  close: () => void;\n}\n\ntype Props = OwnProps;\n\nclass ErrorModal extends React.Component<Props> {\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.close}>\n        <Modal.Header closeButton>\n          <Modal.Title>{this.props.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{this.props.error}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button bsStyle=\"info\" onClick={this.props.close}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(ErrorModal);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Col, Grid, Row } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport saveAs from \"file-saver\";\n\n// import LanguageSelector from \"../components/translations/LanguageSelector\";\nimport { overwriteStore } from \"../actions/globalActions\";\n\nimport NewMeetModal from \"../components/home/NewMeetModal\";\nimport ErrorModal from \"../components/ErrorModal\";\n\nimport { stateVersion, releaseVersion, releaseDate } from \"../versions\";\n\nimport type { GlobalState } from \"../types/stateTypes\";\n\n// Temporary CSS, just for prototyping.\nconst centerConsole = { maxWidth: 700, margin: \"0 auto 10px\" };\n\ninterface StateProps {\n  redux: GlobalState;\n}\n\ninterface DispatchProps {\n  overwriteStore: (store: GlobalState) => void;\n}\n\ninterface InternalState {\n  showNewMeetModal: boolean;\n  // Controls the ErrorModal popup. Shown when error !== \"\".\n  error: string;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass HomeContainer extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.handleLoadClick = this.handleLoadClick.bind(this);\n    this.handleNewClick = this.handleNewClick.bind(this);\n    this.closeConfirmModal = this.closeConfirmModal.bind(this);\n    this.closeErrorModal = this.closeErrorModal.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.handleSaveClick = this.handleSaveClick.bind(this);\n    this.renderContinueButton = this.renderContinueButton.bind(this);\n\n    this.state = { showNewMeetModal: false, error: \"\" };\n  }\n\n  // The file input is hidden, and we want to use a button to activate it.\n  // This event handler is just a proxy to call the *real* event handler.\n  handleLoadClick = () => {\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  // When we click the new meet button\n  // Open the popover modal to confirm the user is willing to delete any current progress\n  handleNewClick = () => {\n    this.setState({ showNewMeetModal: true });\n  };\n\n  // Close the new meet confirmation modal\n  closeConfirmModal = () => {\n    this.setState({ showNewMeetModal: false });\n  };\n\n  closeErrorModal = () => {\n    this.setState({ error: \"\" });\n  };\n\n  // Called when a file is selected.\n  handleLoadFileInput = () => {\n    // Load the element and make sure it's an HTMLInputElement.\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement)) {\n      return;\n    }\n\n    const selectedFile = loadHelper.files[0];\n    let rememberThis = this;\n\n    let reader = new FileReader();\n    reader.onload = function(event) {\n      let errored = false;\n      try {\n        let obj = JSON.parse(event.target.result);\n\n        // Basic error checking, make sure it's the right format.\n        if (\n          obj.language === undefined ||\n          obj.meet === undefined ||\n          obj.registration === undefined ||\n          obj.lifting === undefined\n        ) {\n          errored = true;\n        } else {\n          rememberThis.props.overwriteStore(obj);\n        }\n      } catch (err) {\n        errored = true;\n      }\n\n      if (errored) {\n        const error = \"That didn't look like an OpenLifter file!\";\n        rememberThis.setState({ error: error });\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  handleSaveClick = () => {\n    // TODO: Share this logic with ResultsView.\n    let meetname = this.props.redux.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const state = JSON.stringify(this.props.redux);\n    const blob = new Blob([state], { type: \"application/json;charset=utf-8\" });\n    saveAs(blob, meetname + \".openlifter\");\n  };\n\n  renderContinueButton = () => {\n    let meetname = this.props.redux.meet.name;\n    if (meetname === \"\") {\n      // Unnamed or unstarted meet, so don't render a continue button\n      return;\n    }\n    return (\n      <LinkContainer to=\"/meet-setup\">\n        <Button bsStyle=\"primary\" bsSize=\"large\" block>\n          Continue {meetname}\n        </Button>\n      </LinkContainer>\n    );\n  };\n\n  render() {\n    let newMeetButton = undefined;\n    if (this.props.redux.meet.name) {\n      // A meet is active: use the modal.\n      newMeetButton = (\n        <Button bsStyle=\"primary\" bsSize=\"large\" block onClick={this.handleNewClick}>\n          New Meet\n        </Button>\n      );\n    } else {\n      // No meet is active: just use a LinkContainer.\n      newMeetButton = (\n        <LinkContainer to=\"/meet-setup\">\n          <Button bsStyle=\"primary\" bsSize=\"large\" block onClick={this.handleNewClick}>\n            New Meet\n          </Button>\n        </LinkContainer>\n      );\n    }\n\n    const wrongVersion: boolean = this.props.redux.versions.stateVersion !== stateVersion;\n    const dataReleaseVersion = this.props.redux.versions.releaseVersion;\n\n    const buttonMargin = { marginBottom: \"5px\" };\n\n    let warning = null;\n    if (wrongVersion === true) {\n      warning = (\n        <h2>\n          <p>\n            <b>DANGER!!!</b>\n          </p>\n          <p>\n            The loaded meet was made in OpenLifter <b>{dataReleaseVersion}</b>.\n          </p>\n          <p>\n            That format is incompatible with OpenLifter <b>{releaseVersion}</b>.\n          </p>\n        </h2>\n      );\n    }\n\n    return (\n      <Grid style={centerConsole}>\n        <NewMeetModal show={this.state.showNewMeetModal} close={this.closeConfirmModal} />\n        <ErrorModal\n          error={this.state.error}\n          title=\"Load from File Error\"\n          show={this.state.error !== \"\"}\n          close={this.closeErrorModal}\n        />\n\n        <Row>\n          <Col md={12}>\n            <img alt=\"OpenLifter\" src=\"openlifter.svg\" />\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={12}>{warning}</Col>\n        </Row>\n\n        <Row>\n          <Col md={8}>\n            <br />\n            <div>\n              {wrongVersion === false ? (\n                this.renderContinueButton()\n              ) : (\n                <a href={\"https://www.openlifter.com/releases/\" + dataReleaseVersion}>\n                  <Button bsStyle=\"success\" bsSize=\"large\" block style={{ marginBottom: \"5px\" }}>\n                    Switch to OpenLifter {dataReleaseVersion}\n                  </Button>\n                </a>\n              )}\n\n              {newMeetButton}\n\n              <Button bsStyle=\"warning\" bsSize=\"large\" block onClick={this.handleLoadClick}>\n                Load from File\n              </Button>\n              <Button bsStyle=\"success\" bsSize=\"large\" block onClick={this.handleSaveClick}>\n                Save to File\n              </Button>\n            </div>\n          </Col>\n\n          <Col md={4}>\n            <br />\n            <a\n              href=\"https://gitlab.com/openpowerlifting/openlifter/issues/new\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <Button bsSize=\"large\" block style={buttonMargin}>\n                Report an Issue\n              </Button>\n            </a>\n            <a href=\"https://www.openlifter.com/support\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <Button bsSize=\"large\" block style={buttonMargin}>\n                Official Support\n              </Button>\n            </a>\n            <a href=\"https://gitlab.com/openpowerlifting/openlifter\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <Button bsSize=\"large\" block style={buttonMargin}>\n                Full Source Code\n              </Button>\n            </a>\n            <LinkContainer to=\"/about\">\n              <Button bsSize=\"large\" block style={buttonMargin}>\n                Credits and License\n              </Button>\n            </LinkContainer>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={12} style={{ textAlign: \"center\", marginTop: \"2em\" }}>\n            <h3>\n              Version {releaseVersion}, {releaseDate}.\n            </h3>\n          </Col>\n        </Row>\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".openlifter,.openlifter.txt\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </Grid>\n    );\n  }\n}\n\n// Because we want to save the state, separate it out specifically\n// into a \"redux\" prop. Otherwise it gets contaminated by other props.\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  redux: {\n    ...state\n  }\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    overwriteStore: store => dispatch(overwriteStore(store))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomeContainer);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type {\n  SetMeetNameAction,\n  SetFormulaAction,\n  SetFederationAction,\n  SetDivisionsAction,\n  SetMeetDateAction,\n  SetLengthDaysAction,\n  SetPlatformsOnDaysAction,\n  SetInKgAction,\n  SetWeightClassesAction,\n  SetBarAndCollarsWeightKgAction,\n  SetPlateConfigAction,\n  UpdateMeetAction\n} from \"../types/actionTypes\";\nimport type { Formula, Lift, Sex } from \"../types/dataTypes\";\nimport type { MeetState } from \"../types/stateTypes\";\n\nexport const setMeetName = (name: string): SetMeetNameAction => {\n  return {\n    type: \"SET_MEET_NAME\",\n    name\n  };\n};\n\nexport const setFormula = (formula: Formula): SetFormulaAction => {\n  return {\n    type: \"SET_FORMULA\",\n    formula\n  };\n};\n\nexport const setFederation = (federation: string): SetFederationAction => {\n  return {\n    type: \"SET_FEDERATION\",\n    federation\n  };\n};\n\nexport const setDivisions = (divisions: Array<string>): SetDivisionsAction => {\n  return {\n    type: \"SET_DIVISIONS\",\n    divisions\n  };\n};\n\nexport const setMeetDate = (date: string): SetMeetDateAction => {\n  return {\n    type: \"SET_MEET_DATE\",\n    date\n  };\n};\n\nexport const setLengthDays = (length: number): SetLengthDaysAction => {\n  return {\n    type: \"SET_LENGTH_DAYS\",\n    length\n  };\n};\n\nexport const setPlatformsOnDays = (day: number, count: number): SetPlatformsOnDaysAction => {\n  return {\n    type: \"SET_PLATFORM_COUNT\",\n    day: day,\n    count: count\n  };\n};\n\nexport const setInKg = (inKg: boolean): SetInKgAction => {\n  return {\n    type: \"SET_IN_KG\",\n    inKg\n  };\n};\n\nexport const setWeightClasses = (sex: Sex, classesKg: Array<number>): SetWeightClassesAction => {\n  return {\n    type: \"SET_WEIGHTCLASSES\",\n    sex: sex,\n    classesKg: classesKg\n  };\n};\n\nexport const setBarAndCollarsWeightKg = (lift: Lift, weightKg: number): SetBarAndCollarsWeightKgAction => {\n  return {\n    type: \"SET_BAR_AND_COLLARS_WEIGHT_KG\",\n    lift: lift,\n    weightKg: weightKg\n  };\n};\n\nexport const setPlateConfig = (weightKg: number, pairCount: number, color: string): SetPlateConfigAction => {\n  return {\n    type: \"SET_PLATE_CONFIG\",\n    weightKg,\n    pairCount,\n    color\n  };\n};\n\nexport const updateMeet = (obj: $Shape<MeetState>): UpdateMeetAction => {\n  return {\n    type: \"UPDATE_MEET\",\n    changes: obj\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the MeetName text input box with validation.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { setMeetName } from \"../../actions/meetSetupActions\";\n\nclass MeetName extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      value: this.props.name\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    if (!value) return \"warning\";\n    if (value.includes('\"')) return \"error\";\n    return \"success\";\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    this.setState({ value: value });\n  }\n\n  // When the control loses focus, possibly update the Redux store.\n  handleBlur(event) {\n    if (this.getValidationState() !== \"success\") {\n      return;\n    }\n    this.props.setMeetName(event.target.value);\n  }\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>Meet Name</ControlLabel>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Meet Name\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  name: state.meet.name\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setMeetName: name => dispatch(setMeetName(name))\n  };\n};\n\nMeetName.propTypes = {\n  name: PropTypes.string.isRequired,\n  setMeetName: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetName);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the MeetDate date picker.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport DatePicker from \"react-datepicker\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\n\nimport { setMeetDate } from \"../../actions/meetSetupActions\";\nimport { iso8601ToLocalDate, localDateToIso8601 } from \"../../logic/date\";\n\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  date: string;\n}\n\ninterface DispatchProps {\n  setMeetDate: (date: Date) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass MeetDate extends React.Component<Props> {\n  render() {\n    // The DatePicker manipulates a Date object in local time.\n    const initialDate: Date = iso8601ToLocalDate(this.props.date);\n\n    return (\n      <FormGroup>\n        <ControlLabel>Start Date</ControlLabel>\n        <div>\n          <DatePicker dateFormat=\"yyyy-MM-dd\" selected={initialDate} onChange={this.props.setMeetDate} />\n        </div>\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  date: state.meet.date\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setMeetDate: date => {\n      dispatch(setMeetDate(localDateToIso8601(date)));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetDate);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setLengthDays } from \"../../actions/meetSetupActions\";\n\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  lengthDays: number;\n}\n\ninterface DispatchProps {\n  setLengthDays: (days: number) => any;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  value: number | string;\n}\n\nclass MeetLength extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: this.props.lengthDays\n    };\n  }\n\n  getValidationState = () => {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber > 14) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n\n    this.setState({ value: value }, () => {\n      // As callback, save successful value into Redux store.\n      if (this.getValidationState() !== \"error\") {\n        this.props.setLengthDays(Number(value));\n      }\n    });\n  };\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>Days of Lifting</ControlLabel>\n        <FormControl\n          type=\"text\"\n          pattern=\"[0-9]+\"\n          min=\"0\"\n          step=\"1\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  lengthDays: state.meet.lengthDays\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setLengthDays: days => dispatch(setLengthDays(days))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetLength);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the Meet Location.\n// Country, State/Province, City/Town\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { updateMeet } from \"../../actions/meetSetupActions\";\n\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  country: string;\n  state: string;\n  city: string;\n}\n\ninterface DispatchProps {\n  updateMeet: (changes: $Shape<MeetState>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  country: string;\n  state: string;\n  city: string;\n}\n\nclass MeetLocation extends React.Component<Props, InternalState> {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      country: this.props.country,\n      state: this.props.state,\n      city: this.props.city\n    };\n  }\n\n  getValidationState = (value: string): string | null => {\n    if (!value) return \"warning\";\n    if (value.includes('\"')) return \"error\";\n    return \"success\";\n  };\n\n  handleChange = (key, event) => {\n    const value = event.target.value;\n    let obj = {};\n    obj[key] = value;\n    this.setState(obj);\n  };\n\n  // When the control loses focus, possibly update the Redux store.\n  handleBlur = (key, event) => {\n    if (this.getValidationState(event.target.value) !== \"success\") {\n      return;\n    }\n\n    switch (key) {\n      case \"country\":\n        this.props.updateMeet({ country: event.target.value });\n        break;\n      case \"state\":\n        this.props.updateMeet({ state: event.target.value });\n        break;\n      case \"city\":\n        this.props.updateMeet({ city: event.target.value });\n        break;\n      default:\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <FormGroup validationState={this.getValidationState(this.state.country)}>\n          <ControlLabel>Country</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Country\"\n            value={this.state.country}\n            onChange={event => this.handleChange(\"country\", event)}\n            onBlur={event => this.handleBlur(\"country\", event)}\n          />\n        </FormGroup>\n        <FormGroup validationState={this.getValidationState(this.state.state)}>\n          <ControlLabel>State/Province</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"State/Province\"\n            value={this.state.state}\n            onChange={event => this.handleChange(\"state\", event)}\n            onBlur={event => this.handleBlur(\"state\", event)}\n          />\n        </FormGroup>\n        <FormGroup validationState={this.getValidationState(this.state.city)}>\n          <ControlLabel>City/Town</ControlLabel>\n          <FormControl\n            type=\"text\"\n            placeholder=\"City/Town\"\n            value={this.state.city}\n            onChange={event => this.handleChange(\"city\", event)}\n            onBlur={event => this.handleBlur(\"city\", event)}\n          />\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  country: state.meet.country,\n  state: state.meet.state,\n  city: state.meet.city\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateMeet: changes => dispatch(updateMeet(changes))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetLocation);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setPlatformsOnDays } from \"../../actions/meetSetupActions\";\n\nclass PlatformCount extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: this.props.platformsOnDays[this.props.day - 1]\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber > 20) {\n      return \"error\";\n    }\n    return \"success\";\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    this.setState({ value: value }, () => {\n      if (this.getValidationState() === \"success\") {\n        this.props.setPlatformsOnDays(this.props.day, value);\n      }\n    });\n  }\n\n  render() {\n    const { day } = this.props;\n    const label = \"Platforms on Day \" + day;\n\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>{label}</ControlLabel>\n        <FormControl type=\"number\" value={this.state.value} onChange={this.handleChange} />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  platformsOnDays: state.meet.platformsOnDays\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setPlatformsOnDays: (day, count) => dispatch(setPlatformsOnDays(day, count))\n  };\n};\n\nPlatformCount.propTypes = {\n  platformsOnDays: PropTypes.array.isRequired,\n  setPlatformsOnDays: PropTypes.func.isRequired,\n  day: PropTypes.number.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlatformCount);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport PlatformCount from \"./PlatformCount\";\n\nclass PlatformCounts extends React.Component {\n  constructor(props) {\n    super(props);\n    this.createPlatformInputs = this.createPlatformInputs.bind(this);\n  }\n\n  createPlatformInputs() {\n    let inputs = [];\n    const lengthDays = this.props.lengthDays;\n    for (let i = 1; i <= lengthDays; i++) {\n      inputs.push(<PlatformCount key={i} day={i} />);\n    }\n    return inputs;\n  }\n  render() {\n    return <div>{this.createPlatformInputs()}</div>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  lengthDays: state.meet.lengthDays\n});\n\nPlatformCounts.propTypes = {\n  lengthDays: PropTypes.number.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PlatformCounts);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the FederationSelect text input box with validation.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { setFederation } from \"../../actions/meetSetupActions\";\n\nclass FederationSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      value: this.props.federation\n    };\n  }\n\n  getValidationState() {\n    const { value } = this.state;\n    if (!value) return \"warning\";\n    if (value.includes('\"')) return \"error\";\n    return \"success\";\n  }\n\n  handleChange(event) {\n    const value = event.target.value;\n    this.setState({ value: value });\n  }\n\n  // When the control loses focus, possibly update the Redux store.\n  handleBlur(event) {\n    if (this.getValidationState() !== \"success\") {\n      return;\n    }\n    this.props.setFederation(event.target.value);\n  }\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>Federation</ControlLabel>\n        <FormControl\n          type=\"text\"\n          placeholder=\"Federation\"\n          value={this.state.value}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  federation: state.meet.federation\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setFederation: name => dispatch(setFederation(name))\n  };\n};\n\nFederationSelect.propTypes = {\n  federation: PropTypes.string.isRequired,\n  setFederation: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FederationSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Provides widgets that overwrite rules with federation defaults.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Button, ControlLabel, FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { updateMeet } from \"../../actions/meetSetupActions\";\n\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  federation: string;\n}\n\ninterface DispatchProps {\n  updateMeet: (changes: $Shape<MeetState>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ntype AutoFillOption = \"Traditional\" | \"USAPL\";\n\ninterface InternalState {\n  selectedOption: AutoFillOption;\n}\n\nconst traditionalDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Youth\",\n    \"T13-15\",\n    \"T16-17\",\n    \"T18-19\",\n    \"J20-23\",\n    \"S35-39\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"M80+\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst gpcDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"F-JE\",\n    \"F-JR\",\n    \"F-M1E\",\n    \"F-M1R\",\n    \"F-M2E\",\n    \"F-M2R\",\n    \"F-M3E\",\n    \"F-M3R\",\n    \"F-M4E\",\n    \"F-M4R\",\n    \"F-M5E\",\n    \"F-M5R\",\n    \"F-M6E\",\n    \"F-M6R\",\n    \"F-M7E\",\n    \"F-M7R\",\n    \"F-M8E\",\n    \"F-M8R\",\n    \"F-M9E\",\n    \"F-M9R\",\n    \"F-OE\",\n    \"F-OR\",\n    \"F-SME\",\n    \"F-SMR\",\n    \"F-T1E\",\n    \"F-T1R\",\n    \"F-T2E\",\n    \"F-T2R\",\n    \"F-T3E\",\n    \"F-T3R\",\n    \"M-JE\",\n    \"M-JR\",\n    \"M-M1E\",\n    \"M-M1R\",\n    \"M-M2E\",\n    \"M-M2R\",\n    \"M-M3E\",\n    \"M-M3R\",\n    \"M-M4E\",\n    \"M-M4R\",\n    \"M-M5E\",\n    \"M-M5R\",\n    \"M-M6E\",\n    \"M-M6R\",\n    \"M-M7E\",\n    \"M-M7R\",\n    \"M-M8E\",\n    \"M-M8R\",\n    \"M-M9E\",\n    \"M-M9R\",\n    \"M-OE\",\n    \"M-OR\",\n    \"M-SME\",\n    \"M-SMR\",\n    \"M-T1E\",\n    \"M-T1R\",\n    \"M-T2E\",\n    \"M-T2R\",\n    \"M-T3E\",\n    \"M-T3R\"\n  ],\n  weightClassesKgMen: [56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 110],\n  weightClassesKgMx: [56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Glossbrenner\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: true,\n  allow4thAttempts: true\n};\n\nconst spfDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Pre-Teen\",\n    \"T13-15\",\n    \"T16-17\",\n    \"T18-19\",\n    \"J20-23\",\n    \"S33-39\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"G80+\"\n  ],\n  weightClassesKgMen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 118, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110],\n  weightClassesKgMx: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 118, 125, 140],\n  formula: \"Schwartz/Malone\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst upaDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"FG\",\n    \"FG-AD\",\n    \"FGR\",\n    \"FGR-AD\",\n    \"FJ\",\n    \"FJ-AD\",\n    \"FJR\",\n    \"FJR-AD\",\n    \"FJRE\",\n    \"FJRE-AD\",\n    \"FM1\",\n    \"FM1-AD\",\n    \"FM1R\",\n    \"FM1R-AD\",\n    \"FM1RE\",\n    \"FM1RE-AD\",\n    \"FM2\",\n    \"FM2-AD\",\n    \"FM2R\",\n    \"FM2R-AD\",\n    \"FM2RE\",\n    \"FM2RE-AD\",\n    \"FM3\",\n    \"FM3-AD\",\n    \"FM3R\",\n    \"FM3R-AD\",\n    \"FM3RE\",\n    \"FM3RE-AD\",\n    \"FM4\",\n    \"FM4-AD\",\n    \"FM4R\",\n    \"FM4R-AD\",\n    \"FM4RE\",\n    \"FM4RE-AD\",\n    \"FM5\",\n    \"FM5-AD\",\n    \"FM5R\",\n    \"FM5R-AD\",\n    \"FM5RE\",\n    \"FM5RE-AD\",\n    \"FM6\",\n    \"FM6-AD\",\n    \"FM6R\",\n    \"FM6R-AD\",\n    \"FM6RE\",\n    \"FM6RE-AD\",\n    \"FM7\",\n    \"FM7-AD\",\n    \"FM7R\",\n    \"FM7R-AD\",\n    \"FM7RE\",\n    \"FM7RE-AD\",\n    \"FM8\",\n    \"FM8-AD\",\n    \"FM8R\",\n    \"FM8R-AD\",\n    \"FM8RE\",\n    \"FM8RE-AD\",\n    \"FM9\",\n    \"FM9-AD\",\n    \"FM9R\",\n    \"FM9R-AD\",\n    \"FM9RE\",\n    \"FM9RE-AD\",\n    \"FMX\",\n    \"FMX-AD\",\n    \"FMXR\",\n    \"FMXR-AD\",\n    \"FMXRE\",\n    \"FMXRE-AD\",\n    \"FO\",\n    \"FO-AD\",\n    \"FOR\",\n    \"FOR-AD\",\n    \"FORE\",\n    \"FORE-AD\",\n    \"FPFR\",\n    \"FPFR-AD\",\n    \"FS\",\n    \"FS-AD\",\n    \"FSR\",\n    \"FSR-AD\",\n    \"FSRE\",\n    \"FSRE-AD\",\n    \"FT1\",\n    \"FT1-AD\",\n    \"FT1R\",\n    \"FT1R-AD\",\n    \"FT1RE\",\n    \"FT1RE-AD\",\n    \"FT2\",\n    \"FT2-AD\",\n    \"FT2R\",\n    \"FT2R-AD\",\n    \"FT2RE\",\n    \"FT2RE-AD\",\n    \"FT3\",\n    \"FT3-AD\",\n    \"FT3R\",\n    \"FT3R-AD\",\n    \"FT3RE\",\n    \"FT3RE-AD\",\n    \"FTX\",\n    \"FTX-AD\",\n    \"FTXR\",\n    \"FTXR-AD\",\n    \"FTXRE\",\n    \"FTXRE-AD\",\n    \"MG\",\n    \"MG-AD\",\n    \"MGR\",\n    \"MGR-AD\",\n    \"MJ\",\n    \"MJ-AD\",\n    \"MJR\",\n    \"MJR-AD\",\n    \"MJRE\",\n    \"MJRE-AD\",\n    \"MM1\",\n    \"MM1-AD\",\n    \"MM1R\",\n    \"MM1R-AD\",\n    \"MM1RE\",\n    \"MM1RE-AD\",\n    \"MM2\",\n    \"MM2-AD\",\n    \"MM2R\",\n    \"MM2R-AD\",\n    \"MM2RE\",\n    \"MM2RE-AD\",\n    \"MM3\",\n    \"MM3-AD\",\n    \"MM3R\",\n    \"MM3R-AD\",\n    \"MM3RE\",\n    \"MM3RE-AD\",\n    \"MM4\",\n    \"MM4-AD\",\n    \"MM4R\",\n    \"MM4R-AD\",\n    \"MM4RE\",\n    \"MM4RE-AD\",\n    \"MM5\",\n    \"MM5-AD\",\n    \"MM5R\",\n    \"MM5R-AD\",\n    \"MM5RE\",\n    \"MM5RE-AD\",\n    \"MM6\",\n    \"MM6-AD\",\n    \"MM6R\",\n    \"MM6R-AD\",\n    \"MM6RE\",\n    \"MM6RE-AD\",\n    \"MM7\",\n    \"MM7-AD\",\n    \"MM7R\",\n    \"MM7R-AD\",\n    \"MM7RE\",\n    \"MM7RE-AD\",\n    \"MM8\",\n    \"MM8-AD\",\n    \"MM8R\",\n    \"MM8R-AD\",\n    \"MM8RE\",\n    \"MM8RE-AD\",\n    \"MM9\",\n    \"MM9-AD\",\n    \"MM9R\",\n    \"MM9R-AD\",\n    \"MM9RE\",\n    \"MM9RE-AD\",\n    \"MMX\",\n    \"MMX-AD\",\n    \"MMXR\",\n    \"MMXR-AD\",\n    \"MMXRE\",\n    \"MMXRE-AD\",\n    \"MO\",\n    \"MO-AD\",\n    \"MOR\",\n    \"MOR-AD\",\n    \"MORE\",\n    \"MORE-AD\",\n    \"MPFR\",\n    \"MPFR-AD\",\n    \"MS\",\n    \"MS-AD\",\n    \"MSR\",\n    \"MSR-AD\",\n    \"MSRE\",\n    \"MSRE-AD\",\n    \"MT1\",\n    \"MT1-AD\",\n    \"MT1R\",\n    \"MT1R-AD\",\n    \"MT1RE\",\n    \"MT1RE-AD\",\n    \"MT2\",\n    \"MT2-AD\",\n    \"MT2R\",\n    \"MT2R-AD\",\n    \"MT2RE\",\n    \"MT2RE-AD\",\n    \"MT3\",\n    \"MT3-AD\",\n    \"MT3R\",\n    \"MT3R-AD\",\n    \"MT3RE\",\n    \"MT3RE-AD\",\n    \"MTX\",\n    \"MTX-AD\",\n    \"MTXR\",\n    \"MTXR-AD\",\n    \"MTXRE\",\n    \"MTXRE-AD\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Schwartz/Malone\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: true,\n  allow4thAttempts: true\n};\n\nconst usaplDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"MR-O\",\n    \"MR-Y\",\n    \"MR-Y1\",\n    \"MR-Y2\",\n    \"MR-Y3\",\n    \"MR-T1\",\n    \"MR-T2\",\n    \"MR-T3\",\n    \"MR-Jr\",\n    \"MR-M1a\",\n    \"MR-M1b\",\n    \"MR-M2a\",\n    \"MR-M2b\",\n    \"MR-M3a\",\n    \"MR-M3b\",\n    \"MR-M4a\",\n    \"MR-M4b\",\n    \"MR-M5a\",\n    \"MR-M5b\",\n    \"MR-M6a\",\n    \"MR-M6b\",\n    \"MR-G\",\n    \"M-O\",\n    \"M-Y\",\n    \"M-Y1\",\n    \"M-Y2\",\n    \"M-Y3\",\n    \"M-T1\",\n    \"M-T2\",\n    \"M-T3\",\n    \"M-Jr\",\n    \"M-M1a\",\n    \"M-M1b\",\n    \"M-M2a\",\n    \"M-M2b\",\n    \"M-M3a\",\n    \"M-M3b\",\n    \"M-M4a\",\n    \"M-M4b\",\n    \"M-M5a\",\n    \"M-M5b\",\n    \"M-M6a\",\n    \"M-M6b\",\n    \"M-G\",\n    \"FR-O\",\n    \"FR-Y\",\n    \"FR-Y1\",\n    \"FR-Y2\",\n    \"FR-Y3\",\n    \"FR-T1\",\n    \"FR-T2\",\n    \"FR-T3\",\n    \"FR-Jr\",\n    \"FR-M1a\",\n    \"FR-M1b\",\n    \"FR-M2a\",\n    \"FR-M2b\",\n    \"FR-M3a\",\n    \"FR-M3b\",\n    \"FR-M4a\",\n    \"FR-M4b\",\n    \"FR-M5a\",\n    \"FR-M5b\",\n    \"FR-M6a\",\n    \"FR-M6b\",\n    \"FR-G\",\n    \"F-O\",\n    \"F-Y\",\n    \"F-Y1\",\n    \"F-Y2\",\n    \"F-Y3\",\n    \"F-T1\",\n    \"F-T2\",\n    \"F-T3\",\n    \"F-Jr\",\n    \"F-M1a\",\n    \"F-M1b\",\n    \"F-M2a\",\n    \"F-M2b\",\n    \"F-M3a\",\n    \"F-M3b\",\n    \"F-M4a\",\n    \"F-M4b\",\n    \"F-M5a\",\n    \"F-M5b\",\n    \"F-M6a\",\n    \"F-M6b\",\n    \"F-G\"\n  ],\n  weightClassesKgMen: [53, 59, 66, 74, 83, 93, 105, 120],\n  weightClassesKgWomen: [43, 47, 52, 57, 63, 72, 84],\n  weightClassesKgMx: [53, 59, 66, 74, 83, 93, 105, 120],\n  formula: \"IPF Points\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: false\n};\n\nconst uspaDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Y4-12\",\n    \"J13-15\",\n    \"J16-17\",\n    \"J18-19\",\n    \"J20-23\",\n    \"S35-39\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"M80+\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst wabdlDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"T12-13\",\n    \"T14-15\",\n    \"T16-17\",\n    \"T18-19\",\n    \"J20-25\",\n    \"S33-39\",\n    \"M40-46\",\n    \"M47-53\",\n    \"M54-60\",\n    \"M61-67\",\n    \"M68-74\",\n    \"M75-79\",\n    \"M80-84\",\n    \"M85-89\",\n    \"M90+\"\n  ],\n  weightClassesKgMen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 117.5, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100],\n  weightClassesKgMx: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 117.5, 125, 140],\n  formula: \"Schwartz/Malone\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst wpcDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"F_GCR\",\n    \"F_GCR_A\",\n    \"F_GEM\",\n    \"F_GEM_A\",\n    \"F_GES\",\n    \"F_GES_A\",\n    \"F_GR\",\n    \"F_GR_A\",\n    \"F_JCR\",\n    \"F_JCR_A\",\n    \"F_JEM\",\n    \"F_JEM_A\",\n    \"F_JES\",\n    \"F_JES_A\",\n    \"F_JR\",\n    \"F_JR_A\",\n    \"F_MCR_1\",\n    \"F_MCR_1_A\",\n    \"F_MCR_2\",\n    \"F_MCR_2_A\",\n    \"F_MCR_3\",\n    \"F_MCR_3_A\",\n    \"F_MCR_4\",\n    \"F_MCR_4_A\",\n    \"F_MCR_5\",\n    \"F_MCR_5_A\",\n    \"F_MCR_6\",\n    \"F_MCR_6_A\",\n    \"F_MCR_7\",\n    \"F_MCR_7_A\",\n    \"F_MCR_8\",\n    \"F_MCR_8_A\",\n    \"F_MCR_9\",\n    \"F_MCR_9_A\",\n    \"F_MCR_X\",\n    \"F_MCR_X_A\",\n    \"F_MEM_1\",\n    \"F_MEM_1_A\",\n    \"F_MEM_2\",\n    \"F_MEM_2_A\",\n    \"F_MEM_3\",\n    \"F_MEM_3_A\",\n    \"F_MEM_4\",\n    \"F_MEM_4_A\",\n    \"F_MEM_5\",\n    \"F_MEM_5_A\",\n    \"F_MEM_6\",\n    \"F_MEM_6_A\",\n    \"F_MEM_7\",\n    \"F_MEM_7_A\",\n    \"F_MEM_8\",\n    \"F_MEM_8_A\",\n    \"F_MEM_9\",\n    \"F_MEM_9_A\",\n    \"F_MEM_X\",\n    \"F_MEM_X_A\",\n    \"F_MES_1\",\n    \"F_MES_1_A\",\n    \"F_MES_2\",\n    \"F_MES_2_A\",\n    \"F_MES_3\",\n    \"F_MES_3_A\",\n    \"F_MES_4\",\n    \"F_MES_4_A\",\n    \"F_MES_5\",\n    \"F_MES_5_A\",\n    \"F_MES_6\",\n    \"F_MES_6_A\",\n    \"F_MES_7\",\n    \"F_MES_7_A\",\n    \"F_MES_8\",\n    \"F_MES_8_A\",\n    \"F_MES_9\",\n    \"F_MES_9_A\",\n    \"F_MES_X\",\n    \"F_MES_X_A\",\n    \"F_MR_1\",\n    \"F_MR_1_A\",\n    \"F_MR_2\",\n    \"F_MR_2_A\",\n    \"F_MR_3\",\n    \"F_MR_3_A\",\n    \"F_MR_4\",\n    \"F_MR_4_A\",\n    \"F_MR_5\",\n    \"F_MR_5_A\",\n    \"F_MR_6\",\n    \"F_MR_6_A\",\n    \"F_MR_7\",\n    \"F_MR_7_A\",\n    \"F_MR_8\",\n    \"F_MR_8_A\",\n    \"F_MR_9\",\n    \"F_MR_9_A\",\n    \"F_MR_X\",\n    \"F_MR_X_A\",\n    \"F_NEM\",\n    \"F_NR\",\n    \"F_OCR\",\n    \"F_OCR_A\",\n    \"F_OEM\",\n    \"F_OEM_A\",\n    \"F_OES\",\n    \"F_OES_A\",\n    \"F_OR\",\n    \"F_OR_A\",\n    \"F_SCR\",\n    \"F_SCR_A\",\n    \"F_SEM\",\n    \"F_SEM_A\",\n    \"F_SES\",\n    \"F_SES_A\",\n    \"F_SOR\",\n    \"F_SOR_A\",\n    \"F_SR\",\n    \"F_SR_A\",\n    \"F_TCR_1\",\n    \"F_TCR_1_A\",\n    \"F_TCR_2\",\n    \"F_TCR_2_A\",\n    \"F_TCR_3\",\n    \"F_TCR_3_A\",\n    \"F_TCR_X\",\n    \"F_TCR_X_A\",\n    \"F_TEM_1\",\n    \"F_TEM_1_A\",\n    \"F_TEM_2\",\n    \"F_TEM_2_A\",\n    \"F_TEM_3\",\n    \"F_TEM_3_A\",\n    \"F_TEM_X\",\n    \"F_TEM_X_A\",\n    \"F_TES_1\",\n    \"F_TES_1_A\",\n    \"F_TES_2\",\n    \"F_TES_2_A\",\n    \"F_TES_3\",\n    \"F_TES_3_A\",\n    \"F_TES_X\",\n    \"F_TES_X_A\",\n    \"F_TR_1\",\n    \"F_TR_1_A\",\n    \"F_TR_2\",\n    \"F_TR_2_A\",\n    \"F_TR_3\",\n    \"F_TR_3_A\",\n    \"F_TR_X\",\n    \"F_TR_X_A\",\n    \"F_YCR\",\n    \"F_YCR_A\",\n    \"F_YEM\",\n    \"F_YEM_A\",\n    \"F_YES\",\n    \"F_YES_A\",\n    \"F_YR\",\n    \"F_YR_A\",\n    \"M_GCR\",\n    \"M_GCR_A\",\n    \"M_GEM\",\n    \"M_GEM_A\",\n    \"M_GES\",\n    \"M_GES_A\",\n    \"M_GR\",\n    \"M_GR_A\",\n    \"M_JCR\",\n    \"M_JCR_A\",\n    \"M_JEM\",\n    \"M_JEM_A\",\n    \"M_JES\",\n    \"M_JES_A\",\n    \"M_JR\",\n    \"M_JR_A\",\n    \"M_MCR_1\",\n    \"M_MCR_1_A\",\n    \"M_MCR_2\",\n    \"M_MCR_2_A\",\n    \"M_MCR_3\",\n    \"M_MCR_3_A\",\n    \"M_MCR_4\",\n    \"M_MCR_4_A\",\n    \"M_MCR_5\",\n    \"M_MCR_5_A\",\n    \"M_MCR_6\",\n    \"M_MCR_6_A\",\n    \"M_MCR_7\",\n    \"M_MCR_7_A\",\n    \"M_MCR_8\",\n    \"M_MCR_8_A\",\n    \"M_MCR_9\",\n    \"M_MCR_9_A\",\n    \"M_MCR_X\",\n    \"M_MCR_X_A\",\n    \"M_MEM_1\",\n    \"M_MEM_1_A\",\n    \"M_MEM_2\",\n    \"M_MEM_2_A\",\n    \"M_MEM_3\",\n    \"M_MEM_3_A\",\n    \"M_MEM_4\",\n    \"M_MEM_4_A\",\n    \"M_MEM_5\",\n    \"M_MEM_5_A\",\n    \"M_MEM_6\",\n    \"M_MEM_6_A\",\n    \"M_MEM_7\",\n    \"M_MEM_7_A\",\n    \"M_MEM_8\",\n    \"M_MEM_8_A\",\n    \"M_MEM_9\",\n    \"M_MEM_9_A\",\n    \"M_MEM_X\",\n    \"M_MEM_X_A\",\n    \"M_MES_1\",\n    \"M_MES_1_A\",\n    \"M_MES_2\",\n    \"M_MES_2_A\",\n    \"M_MES_3\",\n    \"M_MES_3_A\",\n    \"M_MES_4\",\n    \"M_MES_4_A\",\n    \"M_MES_5\",\n    \"M_MES_5_A\",\n    \"M_MES_6\",\n    \"M_MES_6_A\",\n    \"M_MES_7\",\n    \"M_MES_7_A\",\n    \"M_MES_8\",\n    \"M_MES_8_A\",\n    \"M_MES_9\",\n    \"M_MES_9_A\",\n    \"M_MES_X\",\n    \"M_MES_X_A\",\n    \"M_MR_1\",\n    \"M_MR_1_A\",\n    \"M_MR_2\",\n    \"M_MR_2_A\",\n    \"M_MR_3\",\n    \"M_MR_3_A\",\n    \"M_MR_4\",\n    \"M_MR_4_A\",\n    \"M_MR_5\",\n    \"M_MR_5_A\",\n    \"M_MR_6\",\n    \"M_MR_6_A\",\n    \"M_MR_7\",\n    \"M_MR_7_A\",\n    \"M_MR_8\",\n    \"M_MR_8_A\",\n    \"M_MR_9\",\n    \"M_MR_9_A\",\n    \"M_MR_X\",\n    \"M_MR_X_A\",\n    \"M_NEM\",\n    \"M_NEM_A\",\n    \"M_NR\",\n    \"M_NR_A\",\n    \"M_OCR\",\n    \"M_OCR_A\",\n    \"M_OEM\",\n    \"M_OEM_A\",\n    \"M_OES\",\n    \"M_OES_A\",\n    \"M_OR\",\n    \"M_OR_A\",\n    \"M_PFEM\",\n    \"M_PFEM_A\",\n    \"M_PFR_A\",\n    \"M_SCR\",\n    \"M_SCR_A\",\n    \"M_SEM\",\n    \"M_SEM_A\",\n    \"M_SES\",\n    \"M_SES_A\",\n    \"M_SOEM\",\n    \"M_SOEM_A\",\n    \"M_SOR\",\n    \"M_SOR_A\",\n    \"M_SR\",\n    \"M_SR_A\",\n    \"M_TCR_1\",\n    \"M_TCR_1_A\",\n    \"M_TCR_2\",\n    \"M_TCR_2_A\",\n    \"M_TCR_3\",\n    \"M_TCR_3_A\",\n    \"M_TCR_X\",\n    \"M_TCR_X_A\",\n    \"M_TEM_1\",\n    \"M_TEM_1_A\",\n    \"M_TEM_2\",\n    \"M_TEM_2_A\",\n    \"M_TEM_3\",\n    \"M_TEM_3_A\",\n    \"M_TEM_X\",\n    \"M_TEM_X_A\",\n    \"M_TES_1\",\n    \"M_TES_1_A\",\n    \"M_TES_2\",\n    \"M_TES_2_A\",\n    \"M_TES_3\",\n    \"M_TES_3_A\",\n    \"M_TES_X\",\n    \"M_TES_X_A\",\n    \"M_TR_1\",\n    \"M_TR_1_A\",\n    \"M_TR_2\",\n    \"M_TR_2_A\",\n    \"M_TR_3\",\n    \"M_TR_3_A\",\n    \"M_TR_X\",\n    \"M_TR_X_A\",\n    \"M_YCR\",\n    \"M_YCR_A\",\n    \"M_YEM\",\n    \"M_YEM_A\",\n    \"M_YR\",\n    \"M_YR_A\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Glossbrenner\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: true,\n  allow4thAttempts: true\n};\n\nconst wrpfDefaults: $Shape<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Y5-13\",\n    \"T14-16\",\n    \"S17-19\",\n    \"J20-23\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"M80+\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nclass AutoFillRules extends React.Component<Props, InternalState> {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      selectedOption: \"Traditional\"\n    };\n  }\n\n  handleSelectChange = event => {\n    this.setState({ selectedOption: event.target.value });\n  };\n\n  handleClick = event => {\n    switch (this.state.selectedOption) {\n      case \"Traditional\":\n        this.props.updateMeet(traditionalDefaults);\n        return;\n      case \"GPC\":\n        this.props.updateMeet(gpcDefaults);\n        return;\n      case \"SPF\":\n        this.props.updateMeet(spfDefaults);\n        return;\n      case \"UPA\":\n        this.props.updateMeet(upaDefaults);\n        return;\n      case \"USAPL\":\n        this.props.updateMeet(usaplDefaults);\n        return;\n      case \"USPA\":\n        this.props.updateMeet(uspaDefaults);\n        return;\n      case \"WABDL\":\n        this.props.updateMeet(wabdlDefaults);\n        return;\n      case \"WPC\":\n        this.props.updateMeet(wpcDefaults);\n        return;\n      case \"WRPF\":\n        this.props.updateMeet(wrpfDefaults);\n        return;\n      default:\n        (this.state.selectedOption: empty); // eslint-disable-line\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <FormGroup>\n          <ControlLabel>Auto-Fill Rules</ControlLabel>\n          <div>\n            <FormControl\n              componentClass=\"select\"\n              onChange={this.handleSelectChange}\n              defaultValue={this.state.selectedOption}\n              style={{ width: \"70%\", display: \"inline-block\" }}\n            >\n              <option key=\"Traditional\" value=\"Traditional\">\n                Traditional Rules\n              </option>\n              <option key=\"GPC\" value=\"GPC\">\n                GPC Rules\n              </option>\n              <option key=\"SPF\" value=\"SPF\">\n                SPF Rules\n              </option>\n              <option key=\"UPA\" value=\"UPA\">\n                UPA Rules\n              </option>\n              <option key=\"USAPL\" value=\"USAPL\">\n                USAPL Rules\n              </option>\n              <option key=\"USPA\" value=\"USPA\">\n                USPA Rules\n              </option>\n              <option key=\"WABDL\" value=\"WABDL\">\n                WABDL Rules\n              </option>\n              <option key=\"WPC\" value=\"WPC\">\n                WPC Rules\n              </option>\n              <option key=\"WRPF\" value=\"WRPF\">\n                WRPF Rules\n              </option>\n            </FormControl>\n\n            <Button onClick={this.handleClick} bsStyle=\"primary\" style={{ width: \"25%\", marginLeft: \"5%\" }}>\n              Auto-Fill\n            </Button>\n          </div>\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  federation: state.meet.federation\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateMeet: changes => dispatch(updateMeet(changes))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AutoFillRules);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\nimport CreatableSelect from \"react-select/lib/Creatable\";\n\nimport { setDivisions } from \"../../actions/meetSetupActions\";\n\nconst components = {\n  DropdownIndicator: null\n};\n\nconst createOption = label => ({\n  label,\n  value: label\n});\n\nclass DivisionSelect extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n\n    let objarray = [];\n    for (let i = 0; i < props.divisions.length; i++) {\n      const division = props.divisions[i];\n      objarray.push({ value: division, label: division });\n    }\n\n    this.state = {\n      inputValue: \"\",\n      value: objarray\n    };\n\n    this.maybeUpdateRedux = this.maybeUpdateRedux.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  // Updates the Redux store if a division was added or removed.\n  // Since updates are synchronous, we can simply check length.\n  maybeUpdateRedux(objarray) {\n    // objarray is a list of {value: \"foo\", label: \"foo\"} objects.\n    if (objarray.length === this.props.divisions.length) {\n      return;\n    }\n\n    // The divisions changed: save to Redux.\n    let divisions = [];\n    for (let i = 0; i < objarray.length; i++) {\n      divisions.push(objarray[i].label);\n    }\n    this.props.setDivisions(divisions);\n  }\n\n  // Handles the case of deleting an existing division.\n  handleChange(value, actionMeta) {\n    this.setState({ value });\n    this.maybeUpdateRedux(value);\n  }\n\n  // Reflects the current typing status in the state.\n  handleInputChange(inputValue) {\n    this.setState({ inputValue });\n  }\n\n  // Handles the case of creating a new division.\n  handleKeyDown(event) {\n    const { inputValue, value } = this.state;\n    if (!inputValue) return;\n    if (event.key === \"Enter\" || event.key === \"Tab\") {\n      // Disallow creating redundant divisions.\n      for (let i = 0; i < value.length; i++) {\n        if (value[i].label === inputValue) {\n          // Silently drop the redundant division.\n          this.setState({ inputValue: \"\" });\n          event.preventDefault();\n          return;\n        }\n      }\n\n      const newValue = [...value, createOption(inputValue)];\n      this.setState({\n        inputValue: \"\",\n        value: newValue\n      });\n      this.maybeUpdateRedux(newValue);\n      event.preventDefault();\n    }\n  }\n\n  render() {\n    const { inputValue, value } = this.state;\n    return (\n      <FormGroup>\n        <ControlLabel>Divisions (prefer short codes!)</ControlLabel>\n        <CreatableSelect\n          components={components}\n          inputValue={inputValue}\n          isMulti\n          menuIsOpen={false}\n          onChange={this.handleChange}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"Type a division and press Enter...\"\n          value={value}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  divisions: state.meet.divisions\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDivisions: divisions => dispatch(setDivisions(divisions))\n  };\n};\n\nDivisionSelect.propTypes = {\n  divisions: PropTypes.array.isRequired,\n  setDivisions: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DivisionSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormGroup } from \"react-bootstrap\";\nimport CreatableSelect from \"react-select/lib/Creatable\";\n\nimport { setWeightClasses } from \"../../actions/meetSetupActions\";\n\nimport type { Sex } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nconst components = {\n  DropdownIndicator: null\n};\n\ntype OptionType = {\n  label: string,\n  value: string\n};\n\nconst createOption = (label: string): OptionType => ({\n  label,\n  value: label\n});\n\ninterface OwnProps {\n  label: string;\n  sex: Sex;\n}\n\ninterface StateProps {\n  classes: Array<number>;\n}\n\ninterface DispatchProps {\n  setWeightClasses: (sex: Sex, classesKg: Array<number>) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  inputValue: string;\n  value: Array<OptionType>;\n}\n\nclass WeightClassesSelect extends React.Component<Props, InternalState> {\n  constructor(props, context) {\n    super(props, context);\n\n    let objarray: Array<OptionType> = [];\n    for (let i = 0; i < props.classes.length; i++) {\n      const c = String(props.classes[i]);\n      objarray.push({ value: c, label: c });\n    }\n\n    this.state = {\n      inputValue: \"\",\n      value: objarray\n    };\n\n    this.maybeUpdateRedux = this.maybeUpdateRedux.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  // Updates the Redux store if a weightclass was added or removed.\n  // Since updates are synchronous, we can simply check length.\n  maybeUpdateRedux = (objarray: Array<OptionType>): void => {\n    if (objarray.length === this.props.classes.length) {\n      return;\n    }\n\n    // The classes changed: save to Redux.\n    let classes = [];\n    for (let i = 0; i < objarray.length; i++) {\n      classes.push(Number(objarray[i].label));\n    }\n    this.props.setWeightClasses(this.props.sex, classes);\n  };\n\n  // Handles the case of deleting an existing weightclass.\n  handleChange = (value: Array<OptionType>, actionMeta): void => {\n    this.setState({ value });\n    this.maybeUpdateRedux(value);\n  };\n\n  // Reflects the current typing status in the state.\n  handleInputChange = (inputValue: string): void => {\n    this.setState({ inputValue });\n  };\n\n  // Handles the case of creating a new weightclass.\n  handleKeyDown = event => {\n    const { inputValue, value } = this.state;\n    if (!inputValue) return;\n    if (event.key === \"Enter\" || event.key === \"Tab\") {\n      // Disallow creating redundant classes.\n      for (let i = 0; i < value.length; i++) {\n        if (value[i].label === inputValue) {\n          // Silently drop the redundant weightclass.\n          this.setState({ inputValue: \"\" });\n          event.preventDefault();\n          return;\n        }\n      }\n\n      // Disallow creating non-numeric inputs.\n      if (isNaN(Number(inputValue))) {\n        this.setState({ inputValue: \"\" });\n        event.preventDefault();\n        return;\n      }\n\n      // Sort the new value into the array.\n      let newValue = [...value, createOption(inputValue)];\n      newValue = newValue.sort((a, b) => Number(a.value) - Number(b.value));\n\n      this.setState({\n        inputValue: \"\",\n        value: newValue\n      });\n      this.maybeUpdateRedux(newValue);\n      event.preventDefault();\n    }\n  };\n\n  render() {\n    const { inputValue, value } = this.state;\n    return (\n      <FormGroup>\n        <ControlLabel>{this.props.label}</ControlLabel>\n        <CreatableSelect\n          components={components}\n          inputValue={inputValue}\n          isMulti\n          menuIsOpen={false}\n          onChange={this.handleChange}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"Type a weight class and press Enter...\"\n          value={value}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst selectClassesBySex = (sex: Sex, state: GlobalState): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return state.meet.weightClassesKgMen;\n    case \"F\":\n      return state.meet.weightClassesKgWomen;\n    case \"Mx\":\n      return state.meet.weightClassesKgMx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return state.meet.weightClassesKgMen;\n  }\n};\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  return {\n    classes: selectClassesBySex(ownProps.sex, state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setWeightClasses: (sex, classesKg) => dispatch(setWeightClasses(sex, classesKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeightClassesSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setBarAndCollarsWeightKg } from \"../../actions/meetSetupActions\";\nimport { kg2lbs, lbs2kg } from \"../../logic/units\";\n\nimport type { Lift } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  lift: Lift;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  squatBarAndCollarsWeightKg: number;\n  benchBarAndCollarsWeightKg: number;\n  deadliftBarAndCollarsWeightKg: number;\n}\n\ninterface DispatchProps {\n  setBarAndCollarsWeightKg: (Lift, number) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  value: number;\n}\n\nclass BarAndCollarsWeightKg extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    const weight = this.getInitialBarAndCollarsWeightKg(this.props.lift);\n    const value = this.props.inKg ? weight : kg2lbs(weight);\n\n    this.state = {\n      value: value\n    };\n  }\n\n  getInitialBarAndCollarsWeightKg = (lift: Lift): number => {\n    switch (lift) {\n      case \"S\":\n        return this.props.squatBarAndCollarsWeightKg;\n      case \"B\":\n        return this.props.benchBarAndCollarsWeightKg;\n      case \"D\":\n        return this.props.deadliftBarAndCollarsWeightKg;\n      default:\n        (lift: empty) // eslint-disable-line\n        return 0;\n    }\n  };\n\n  getValidationState = () => {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber < 5) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    this.setState({ value: value }, () => {\n      if (this.getValidationState() === \"success\") {\n        const asNum = Number(value);\n        const weight = this.props.inKg ? asNum : lbs2kg(asNum);\n        this.props.setBarAndCollarsWeightKg(this.props.lift, weight);\n      }\n    });\n  };\n\n  getLiftLabel = (lift: Lift): string => {\n    switch (lift) {\n      case \"S\":\n        return \"Squat\";\n      case \"B\":\n        return \"Bench\";\n      case \"D\":\n        return \"Deadlift\";\n      default:\n        (lift: empty) // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  render() {\n    const label =\n      this.getLiftLabel(this.props.lift) + \" Bar + Collars weight (\" + (this.props.inKg ? \"kg\" : \"lbs\") + \")\";\n\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>{label}</ControlLabel>\n        <FormControl type=\"number\" value={this.state.value} onChange={this.handleChange} step={2.5} />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  squatBarAndCollarsWeightKg: state.meet.squatBarAndCollarsWeightKg,\n  benchBarAndCollarsWeightKg: state.meet.benchBarAndCollarsWeightKg,\n  deadliftBarAndCollarsWeightKg: state.meet.deadliftBarAndCollarsWeightKg\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setBarAndCollarsWeightKg: (lift, weightKg) => dispatch(setBarAndCollarsWeightKg(lift, weightKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BarAndCollarsWeightKg);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a widget for selecting a plate color.\n\nimport React from \"react\";\nimport { TwitterPicker } from \"react-color\";\n\nimport { PlateColors } from \"../../constants/plateColors\";\n\nimport styles from \"./ColorPicker.module.scss\";\n\ninterface OwnProps {\n  color: string;\n  onChange: (color: string) => any;\n}\n\ntype Props = OwnProps;\n\ninterface InternalState {\n  displayColorPicker: boolean;\n  color: string;\n\n  // Handle returned by setTimeout() for the timeout that closes the color\n  // selector popup after the mouse leaves and time has elapsed.\n  timeoutId: any;\n}\n\nclass ColorPicker extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      displayColorPicker: false,\n      color: props.color,\n      timeoutId: null\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick = () => {\n    clearTimeout(this.state.timeoutId);\n    this.setState({ displayColorPicker: !this.state.displayColorPicker, timeoutId: null });\n  };\n\n  handleClose = () => {\n    clearTimeout(this.state.timeoutId);\n    this.setState({ displayColorPicker: false, timeoutId: null });\n  };\n\n  handleMouseLeave = () => {\n    // Close the popup after a second has elapsed.\n    // This gives the user a chance to bring the mouse back into the popup.\n    let timeoutId = setTimeout(\n      function() {\n        this.setState({ displayColorPicker: false, timeoutId: null });\n      }.bind(this),\n      1000\n    );\n    this.setState({ timeoutId: timeoutId });\n  };\n\n  handleMouseEnter = () => {\n    // Prevent any close-popup timeout from executing.\n    if (this.state.timeoutId !== null) {\n      clearTimeout(this.state.timeoutId);\n      this.setState({ timeoutId: null });\n    }\n  };\n\n  handleChange = (color: Object) => {\n    this.setState({ displayColorPicker: false, color: color.rgb });\n    this.props.onChange(color.hex.toUpperCase());\n  };\n\n  render() {\n    const colors = Object.values(PlateColors);\n\n    let picker = null;\n    if (this.state.displayColorPicker) {\n      picker = (\n        <div className={styles.popover}>\n          <div className={styles.cover} onClick={this.handleClose} />\n          <TwitterPicker color={this.state.color} colors={colors} triangle=\"hide\" onChange={this.handleChange} />\n        </div>\n      );\n    }\n\n    return (\n      <div onMouseLeave={this.handleMouseLeave} onMouseEnter={this.handleMouseEnter}>\n        <div className={styles.swatch} onClick={this.handleClick}>\n          <div className={styles.color} style={{ background: this.state.color }} />\n        </div>\n        {picker}\n      </div>\n    );\n  }\n}\n\nexport default ColorPicker;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the selector for determining how many plates are available\n// to loaders on one side.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FormControl, FormGroup, Table } from \"react-bootstrap\";\n\nimport ColorPicker from \"./ColorPicker\";\n\nimport { setPlateConfig } from \"../../actions/meetSetupActions\";\n\nimport { kg2lbs } from \"../../logic/units\";\n\nimport type { Plate } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  inKg: boolean;\n  plates: Array<Plate>;\n}\n\ninterface DispatchProps {\n  setPlateConfig: (number, number, string) => any;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass Plates extends React.Component<Props> {\n  constructor(props, context) {\n    super(props, context);\n\n    this.validateAmountInput = this.validateAmountInput.bind(this);\n    this.updateHandler = this.updateHandler.bind(this);\n  }\n\n  validateAmountInput = id => {\n    const widget: any = document.getElementById(id);\n\n    // This can happen because the FormGroup is created before the widget exists.\n    if (widget === null) return;\n    const value = widget.value;\n\n    if (value === undefined) return \"error\";\n\n    // Ensure that the value is an integer in a reasonable range.\n    let asNum = Number(value);\n    if (Math.floor(asNum) !== asNum) return \"error\";\n    if (asNum < 0 || asNum > 20) return \"error\";\n    if (String(asNum) !== value) return \"error\";\n\n    return null;\n  };\n\n  updateHandler = (weightKg, id, amount, color) => {\n    if (this.validateAmountInput(id) === \"error\") {\n      // Although no state is set, this is used to trigger the FormGroup\n      // to re-query the validationState on change.\n      return this.setState({});\n    }\n\n    this.props.setPlateConfig(weightKg, Number(amount), color);\n  };\n\n  renderWeightRow = (weightKg, amount, color) => {\n    // The input event value isn't passed by the event, so we assign a unique ID\n    // and then just search the whole document for it.\n    const id = \"weight\" + String(weightKg);\n\n    // Don't use displayWeight(): the 1.25lb plates need two decimal places.\n    const weight = this.props.inKg ? weightKg : kg2lbs(weightKg);\n\n    return (\n      <tr key={String(weightKg) + \"_\" + color}>\n        <td>{weight}</td>\n        <td>\n          <FormGroup validationState={this.validateAmountInput(id)} style={{ marginBottom: 0 }}>\n            <FormControl\n              id={id}\n              onChange={e => this.updateHandler(weightKg, id, e.target.value, color)}\n              type=\"number\"\n              defaultValue={amount}\n              min={0}\n            />\n          </FormGroup>\n        </td>\n        <td>\n          <ColorPicker color={color} onChange={color => this.updateHandler(weightKg, id, amount, color)} />\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    let plateRows = [];\n    for (let i = 0; i < this.props.plates.length; i++) {\n      const obj: Plate = this.props.plates[i];\n      plateRows.push(this.renderWeightRow(obj.weightKg, obj.pairCount, obj.color));\n    }\n\n    const units = this.props.inKg ? \"kg\" : \"lbs\";\n\n    return (\n      <div>\n        <Table striped condensed hover style={{ margin: \"0px\" }}>\n          <thead>\n            <tr>\n              <th>Weight ({units})</th>\n              <th>Pairs of Plates</th>\n              <th>Color</th>\n            </tr>\n          </thead>\n          <tbody>{plateRows}</tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  plates: state.meet.plates\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setPlateConfig: (weightKg, amount, color) => dispatch(setPlateConfig(weightKg, amount, color))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Plates);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, Col, Row, Panel, FormGroup, ControlLabel, FormControl } from \"react-bootstrap\";\n\nimport MeetName from \"./MeetName\";\nimport MeetDate from \"./MeetDate\";\nimport MeetLength from \"./MeetLength\";\nimport MeetLocation from \"./MeetLocation\";\nimport PlatformCounts from \"./PlatformCounts\";\nimport FederationSelect from \"./FederationSelect\";\nimport AutoFillRules from \"./AutoFillRules\";\nimport DivisionSelect from \"./DivisionSelect\";\nimport WeightClassesSelect from \"./WeightClassesSelect\";\nimport BarAndCollarsWeightKg from \"./BarAndCollarsWeightKg\";\nimport Plates from \"./Plates\";\n\nimport { updateMeet, setInKg } from \"../../actions/meetSetupActions\";\n\nimport type { GlobalState } from \"../../types/stateTypes\";\nimport type { AgeCoefficients, Formula } from \"../../types/dataTypes\";\n\ninterface StateProps {\n  allow4thAttempts: boolean;\n  combineSleevesAndWraps: boolean;\n  inKg: boolean;\n  showAlternateUnits: boolean;\n  formula: Formula;\n  ageCoefficients: AgeCoefficients;\n\n  masterKey: string; // Used to force-update rules components on Auto-Fill.\n}\n\ninterface DispatchProps {\n  setCombineSleevesAndWraps: (event: Object) => void;\n  setAllow4thAttempts: (event: Object) => void;\n  setInKg: (event: Object) => void;\n  setShowAlternateUnits: (event: Object) => void;\n  setFormula: (event: Object) => void;\n  setAgeCoefficients: (event: Object) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst yesNoBooleanOptions = [\n  <option key=\"Yes\" value=\"Yes\">\n    Yes\n  </option>,\n  <option key=\"No\" value=\"No\">\n    No\n  </option>\n];\n\n// The widgets speak strings, but the state speaks boolean.\nconst yesNoToBoolean = (yesno: string): boolean => {\n  if (yesno === \"Yes\") return true;\n  return false;\n};\nconst yesNoFromBoolean = (bool: boolean): string => {\n  if (bool === true) return \"Yes\";\n  return \"No\";\n};\n\nclass MeetSetup extends React.Component<Props> {\n  render() {\n    // This is used as a key to force unit-dependent components to re-initialize state.\n    const inKg = String(this.props.inKg);\n\n    return (\n      <Grid>\n        <Row>\n          <Col md={4}>\n            <Panel bsStyle=\"info\">\n              <Panel.Heading>Sanction Information</Panel.Heading>\n              <Panel.Body>\n                <MeetName />\n                <MeetLocation />\n                <FederationSelect />\n                <MeetDate />\n                <MeetLength />\n                <PlatformCounts />\n              </Panel.Body>\n            </Panel>\n          </Col>\n\n          <Col md={4}>\n            <Panel>\n              <Panel.Heading>Competition Rules</Panel.Heading>\n              <Panel.Body>\n                <AutoFillRules />\n                <DivisionSelect key={this.props.masterKey} />\n                <WeightClassesSelect\n                  sex=\"M\"\n                  label=\"Men's Weight Classes (kg), omit SHW\"\n                  key={this.props.masterKey + \"-M\"}\n                />\n                <WeightClassesSelect\n                  sex=\"F\"\n                  label=\"Women's Weight Classes (kg), omit SHW\"\n                  key={this.props.masterKey + \"-F\"}\n                />\n                <WeightClassesSelect\n                  sex=\"Mx\"\n                  label=\"Mx Weight Classes (kg), omit SHW\"\n                  key={this.props.masterKey + \"-Mx\"}\n                />\n\n                <FormGroup key={this.props.masterKey + \"-formula\"}>\n                  <ControlLabel>Best Lifter Formula</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={this.props.formula}\n                    onChange={this.props.setFormula}\n                  >\n                    <option value=\"Bodyweight Multiple\">Bodyweight Multiple</option>\n                    <option value=\"Dots\">Dots</option>\n                    <option value=\"Glossbrenner\">Glossbrenner</option>\n                    <option value=\"IPF Points\">IPF Points</option>\n                    <option value=\"NASA Points\">NASA Points</option>\n                    <option value=\"Schwartz/Malone\">Schwartz/Malone</option>\n                    <option value=\"Total\">Total</option>\n                    <option value=\"Wilks\">Wilks</option>\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup key={this.props.masterKey + \"-ageCoefficients\"}>\n                  <ControlLabel>Age Coefficients for Best Juniors/Masters Lifter</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={this.props.ageCoefficients}\n                    onChange={this.props.setAgeCoefficients}\n                  >\n                    <option key=\"None\" value=\"None\">\n                      None\n                    </option>\n                    <option key=\"FosterMcCulloch\" value=\"FosterMcCulloch\">\n                      Foster-McCulloch\n                    </option>\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup key={this.props.masterKey + \"-sleeves-wraps\"}>\n                  <ControlLabel>Should Sleeves and Wraps be combined for placing?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.combineSleevesAndWraps)}\n                    onChange={this.props.setCombineSleevesAndWraps}\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup key={this.props.masterKey + \"-4th-attempts\"}>\n                  <ControlLabel>Can lifters take 4th attempts for records?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.allow4thAttempts)}\n                    onChange={this.props.setAllow4thAttempts}\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n              </Panel.Body>\n            </Panel>\n          </Col>\n\n          <Col md={4}>\n            <Panel bsStyle=\"info\">\n              <Panel.Heading>Weights and Loading Setup</Panel.Heading>\n              <Panel.Body>\n                <FormGroup>\n                  <ControlLabel>In what units are attempts and bodyweights?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.inKg)}\n                    onChange={this.props.setInKg}\n                  >\n                    <option key=\"Yes\" value=\"Yes\">\n                      Kilograms\n                    </option>\n                    <option key=\"No\" value=\"No\">\n                      Pounds\n                    </option>\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup>\n                  <ControlLabel>Also show attempts in {this.props.inKg ? \"pounds\" : \"kilograms\"}?</ControlLabel>\n                  <FormControl\n                    componentClass=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.showAlternateUnits)}\n                    onChange={this.props.setShowAlternateUnits}\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n\n                <BarAndCollarsWeightKg key={\"S\" + inKg} lift=\"S\" />\n                <BarAndCollarsWeightKg key={\"B\" + inKg} lift=\"B\" />\n                <BarAndCollarsWeightKg key={\"D\" + inKg} lift=\"D\" />\n                <Plates />\n              </Panel.Body>\n            </Panel>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  showAlternateUnits: state.meet.showAlternateUnits,\n  combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n  allow4thAttempts: state.meet.allow4thAttempts,\n  formula: state.meet.formula,\n  ageCoefficients: state.meet.ageCoefficients,\n  masterKey: state.meet.divisions.join()\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => ({\n  setCombineSleevesAndWraps: event =>\n    dispatch(updateMeet({ combineSleevesAndWraps: yesNoToBoolean(event.target.value) })),\n  setAllow4thAttempts: event => dispatch(updateMeet({ allow4thAttempts: yesNoToBoolean(event.target.value) })),\n  setInKg: event => dispatch(setInKg(yesNoToBoolean(event.target.value))),\n  setShowAlternateUnits: event => dispatch(updateMeet({ showAlternateUnits: yesNoToBoolean(event.target.value) })),\n  setFormula: event => dispatch(updateMeet({ formula: event.target.value })),\n  setAgeCoefficients: event => dispatch(updateMeet({ ageCoefficients: event.target.value }))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetSetup);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport MeetSetup from \"../components/meet-setup/MeetSetup\";\n\nclass MeetSetupContainer extends React.Component<{}> {\n  render() {\n    return <MeetSetup />;\n  }\n}\n\nexport default MeetSetupContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the table of LifterRows\n// Generalized to accept a rowRenderer component, so that different pages\n// can render different row level items, while re-using the logic in this component\n// to handle rendering one row per lifter\n// This is the parent component that determines how many rows to render,\n// what data each row should see, etc.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass LifterTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n  }\n\n  renderRows() {\n    const LifterRow = this.props.rowRenderer;\n    const { entries } = this.props;\n    return entries.map(entry => <LifterRow key={entry.id} id={entry.id} />);\n  }\n\n  render() {\n    return <div>{this.renderRows()}</div>;\n  }\n}\n\nLifterTable.propTypes = {\n  entries: PropTypes.array.isRequired,\n  rowRenderer: PropTypes.any.isRequired\n};\n\nexport default LifterTable;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This defines a generic text input that colors itself based upon a validation\n// function passed in OwnProps. On blur, an onSuccess() callback is called\n// if validation passes; otherwise, the text input reverts to the initial state.\n\nimport React from \"react\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nimport type { Validation } from \"../types/dataTypes\";\n\ninterface OwnProps {\n  initialValue: string;\n  placeholder?: ?string;\n  disabled?: boolean;\n  getValidationState: (value: ?string) => Validation;\n  onSuccess: (value: string) => any;\n}\n\ntype Props = $ReadOnly<OwnProps>;\n\ninterface InternalState {\n  value: string;\n}\n\nclass BirthDateInput extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      value: props.initialValue\n    };\n  }\n\n  getValidationState = (): Validation => {\n    return this.props.getValidationState(this.state.value);\n  };\n\n  handleKeyDown = (event: Object) => {\n    if (event.key === \"Enter\") {\n      event.target.blur();\n    }\n  };\n\n  handleChange = (event: Object) => {\n    this.setState({ value: event.target.value });\n  };\n\n  handleBlur = (event: Object) => {\n    if (this.getValidationState() === \"error\") {\n      this.setState({ value: this.props.initialValue });\n      return;\n    }\n\n    if (this.props.initialValue !== this.state.value) {\n      this.props.onSuccess(this.state.value);\n    }\n  };\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()} style={{ marginBottom: 0 }}>\n        <FormControl\n          type=\"text\"\n          placeholder={this.props.placeholder}\n          disabled={this.props.disabled === true ? true : undefined}\n          value={this.state.value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nexport default BirthDateInput;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { Validation } from \"../types/dataTypes\";\n\n// Validates a string date in the ISO8601 \"YYYY-MM-DD\" format.\nexport const validateIso8601Date = (s: ?string): Validation => {\n  if (typeof s !== \"string\") return \"error\";\n\n  if (s === \"\") return null;\n  if (s.length !== \"YYYY-MM-DD\".length) return \"error\";\n\n  const pieces: Array<string> = s.split(\"-\");\n  if (pieces.length !== 3) return \"error\";\n\n  const [yearStr, monthStr, dayStr] = pieces;\n\n  // Ensure that the strings only contain numbers, because the Number() constructor\n  // will ignore whitespace.\n  const onlyNumbers = /^[0-9]+$/;\n\n  if (!yearStr.match(onlyNumbers)) return \"error\";\n  if (!monthStr.match(onlyNumbers)) return \"error\";\n  if (!dayStr.match(onlyNumbers)) return \"error\";\n\n  const year = Number(yearStr);\n  const month = Number(monthStr);\n  const day = Number(dayStr);\n\n  if (isNaN(year) || isNaN(month) || isNaN(day)) return \"error\";\n  if (year <= 0 || month <= 0 || month > 12 || day <= 0 || day > 31) return \"error\";\n\n  // Disallow dates that are out of the plausible range for powerlifting.\n  if (year < 1880 || year >= new Date().getFullYear() + 2) return \"error\";\n\n  return \"success\";\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type {\n  NewRegistrationAction,\n  DeleteRegistrationAction,\n  UpdateRegistrationAction,\n  MergePlatformAction\n} from \"../types/actionTypes\";\nimport type { Entry } from \"../types/dataTypes\";\n\n// Adds a blank (or default-initalized) row to the registrations table.\nexport const newRegistration = (obj: $Shape<Entry>): NewRegistrationAction => {\n  return {\n    type: \"NEW_REGISTRATION\",\n    overwriteDefaults: obj\n  };\n};\n\n// Deletes an existing entry from the registrations table.\n//\n// Corresponding data from the registration is *not* deleted, for example\n// from the lifting page, but because the state.registrations.lookups map\n// will no longer find an associated entry given a global unique EntryId,\n// the data will simply stop being displayed.\n//\n// The global ID from the deleted entry is not recycled.\nexport const deleteRegistration = (entryId: number): DeleteRegistrationAction => {\n  return {\n    type: \"DELETE_REGISTRATION\",\n    entryId: entryId\n  };\n};\n\n// Updates an existing entry in the registrations table.\n//\n// Because there are a lot of fields in a single entry, for the sake of\n// simplicity, this is a general method that knows how to update the\n// existing entry object with whatever has changed, as passed\n// through object properties.\nexport const updateRegistration = (entryId: number, obj: $Shape<Entry>): UpdateRegistrationAction => {\n  return {\n    type: \"UPDATE_REGISTRATION\",\n    entryId: entryId,\n    changes: obj\n  };\n};\n\n// Deletes all entries assigned to a given (day, platform), and then adds entries\n// assigned to that (day, platform) from a foreign save state.\nexport const mergePlatform = (day: number, platform: number, platformEntries: Array<Entry>): MergePlatformAction => {\n  return {\n    type: \"MERGE_PLATFORM\",\n    day: day,\n    platform: platform,\n    platformEntries: platformEntries\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a row in the LifterTable on the Registration page.\n// This provides a bunch of widgets, each of which correspond to\n// the state of a single entry.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button, Col, ControlLabel, FormControl, FormGroup, Grid, Panel } from \"react-bootstrap\";\nimport Select from \"react-select\";\n\nimport ValidatedTextInput from \"../ValidatedTextInput\";\n\nimport { validateIso8601Date } from \"../../validation/iso8601Date\";\n\nimport { deleteRegistration, updateRegistration } from \"../../actions/registrationActions\";\n\nconst eventOptions = [\n  { value: \"S\", label: \"S\" },\n  { value: \"B\", label: \"B\" },\n  { value: \"D\", label: \"D\" },\n  { value: \"BD\", label: \"BD\" },\n  { value: \"SBD\", label: \"SBD\" },\n  { value: \"SB\", label: \"SB\" },\n  { value: \"SD\", label: \"SD\" }\n];\n\nclass LifterRow extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Store the Day in state to update the Platform options when the Day changes.\n    // Store the Birth Date in state to re-render when a new date is selected\n    this.state = {\n      selectedDay: props.entry.day\n    };\n\n    this.deleteRegistrationClick = this.deleteRegistrationClick.bind(this);\n    this.updateRegistrationDay = this.updateRegistrationDay.bind(this);\n    this.updateRegistrationPlatform = this.updateRegistrationPlatform.bind(this);\n    this.updateRegistrationFlight = this.updateRegistrationFlight.bind(this);\n    this.updateRegistrationName = this.updateRegistrationName.bind(this);\n    this.updateRegistrationSex = this.updateRegistrationSex.bind(this);\n    this.updateRegistrationLot = this.updateRegistrationLot.bind(this);\n    this.updateRegistrationMemberId = this.updateRegistrationMemberId.bind(this);\n    this.updateRegistrationBirthDate = this.updateRegistrationBirthDate.bind(this);\n    this.updateRegistrationCountry = this.updateRegistrationCountry.bind(this);\n    this.updateRegistrationState = this.updateRegistrationState.bind(this);\n    this.updateRegistrationDivisions = this.updateRegistrationDivisions.bind(this);\n    this.updateRegistrationEvents = this.updateRegistrationEvents.bind(this);\n    this.updateRegistrationEquipment = this.updateRegistrationEquipment.bind(this);\n    this.updateRegistrationTeam = this.updateRegistrationTeam.bind(this);\n    this.updateRegistrationNotes = this.updateRegistrationNotes.bind(this);\n  }\n\n  deleteRegistrationClick(event) {\n    this.props.deleteRegistration(this.props.id);\n  }\n\n  updateRegistrationDay(event) {\n    const day = Number(event.target.value);\n    const entry = this.props.entry;\n\n    // Also check whether the platform is now impossible.\n    let platform = entry.platform;\n    if (platform > this.props.meet.platformsOnDays[day - 1]) {\n      platform = 1; // This matches the default behavior of the select element.\n    }\n\n    if (entry.day !== day) {\n      this.setState({ selectedDay: day });\n      this.props.updateRegistration(this.props.id, { day: day, platform: platform });\n    }\n  }\n\n  updateRegistrationPlatform(event) {\n    const platform = Number(event.target.value);\n    if (this.props.entry.platform !== platform) {\n      this.props.updateRegistration(this.props.id, { platform: platform });\n    }\n  }\n\n  updateRegistrationFlight(event) {\n    const flight = event.target.value;\n    if (this.props.entry.flight !== flight) {\n      this.props.updateRegistration(this.props.id, { flight: flight });\n    }\n  }\n\n  updateRegistrationName(event) {\n    const name = event.target.value;\n    if (this.props.entry.name !== name) {\n      this.props.updateRegistration(this.props.id, { name: name });\n    }\n  }\n\n  updateRegistrationSex(event) {\n    const sex = event.target.value;\n    if (this.props.entry.sex !== sex) {\n      this.props.updateRegistration(this.props.id, { sex: sex });\n    }\n  }\n\n  updateRegistrationLot = event => {\n    const lot = event.target.value;\n    const asNumber = Number(lot);\n    if (asNumber >= 0 && asNumber !== this.props.entry.lot) {\n      this.props.updateRegistration(this.props.id, { lot: asNumber });\n    }\n  };\n\n  updateRegistrationMemberId = event => {\n    const memberId = event.target.value;\n    if (this.props.entry.memberId !== memberId) {\n      this.props.updateRegistration(this.props.id, { memberId: memberId });\n    }\n  };\n\n  updateRegistrationBirthDate = birthDate => {\n    if (this.props.entry.birthDate !== birthDate) {\n      this.props.updateRegistration(this.props.id, { birthDate: birthDate });\n    }\n  };\n\n  updateRegistrationCountry = country => {\n    if (this.props.entry.country !== country) {\n      this.props.updateRegistration(this.props.id, { country: country });\n    }\n  };\n\n  updateRegistrationState = state => {\n    if (this.props.entry.state !== state) {\n      this.props.updateRegistration(this.props.id, { state: state });\n    }\n  };\n\n  updateRegistrationDivisions(value, actionMeta) {\n    // Value is an array of { value, label } objects.\n    // Since updates are synchronous, we can just compare lengths.\n    if (value.length !== this.props.entry.divisions.length) {\n      let divisions = [];\n      for (let i = 0; i < value.length; i++) {\n        divisions.push(value[i].label);\n      }\n      this.props.updateRegistration(this.props.id, { divisions: divisions });\n    }\n  }\n\n  updateRegistrationEvents(value, actionMeta) {\n    // Value is an array of { value, label } objects.\n    // Since updates are synchronous, we can just compare lengths.\n    if (value.length !== this.props.entry.events.length) {\n      let events = [];\n      for (let i = 0; i < value.length; i++) {\n        events.push(value[i].label);\n      }\n      this.props.updateRegistration(this.props.id, { events: events });\n    }\n  }\n\n  updateRegistrationEquipment(event) {\n    const equipment = event.target.value;\n    if (this.props.entry.equipment !== equipment) {\n      this.props.updateRegistration(this.props.id, { equipment: equipment });\n    }\n  }\n\n  updateRegistrationTeam = event => {\n    this.props.updateRegistration(this.props.id, { team: event.target.value });\n  };\n\n  updateRegistrationNotes = event => {\n    this.props.updateRegistration(this.props.id, { notes: event.target.value });\n  };\n\n  render() {\n    const entry = this.props.entry;\n\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.meet.lengthDays; i++) {\n      dayOptions.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    let platformOptions = [];\n    for (let i = 1; i <= this.props.meet.platformsOnDays[entry.day - 1]; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    let divisionOptions = [];\n    for (let i = 0; i < this.props.meet.divisions.length; i++) {\n      let division = this.props.meet.divisions[i];\n      divisionOptions.push({ value: division, label: division });\n    }\n\n    let selectedDivisions = [];\n    for (let i = 0; i < entry.divisions.length; i++) {\n      const division = entry.divisions[i];\n      selectedDivisions.push({ value: division, label: division });\n    }\n\n    let selectedEvents = [];\n    for (let i = 0; i < entry.events.length; i++) {\n      const events = entry.events[i];\n      selectedEvents.push({ value: events, label: events });\n    }\n\n    const gridStyle = { padding: \"0px\", margin: \"0px\" };\n\n    return (\n      <Panel>\n        <Panel.Heading style={{ display: \"flex\" }}>\n          <FormControl type=\"text\" placeholder=\"Name\" defaultValue={entry.name} onBlur={this.updateRegistrationName} />\n          <Button onClick={this.deleteRegistrationClick} bsStyle=\"danger\" style={{ marginLeft: \"15px\" }}>\n            Delete\n          </Button>\n        </Panel.Heading>\n        <Panel.Body>\n          <Grid style={gridStyle}>\n            {/* Day */}\n            <Col md={1}>\n              <FormGroup>\n                <ControlLabel>Day</ControlLabel>\n                <FormControl\n                  defaultValue={this.state.selectedDay}\n                  componentClass=\"select\"\n                  onChange={this.updateRegistrationDay}\n                >\n                  {dayOptions}\n                </FormControl>\n              </FormGroup>\n            </Col>\n\n            {/* Platform */}\n            <Col md={1}>\n              <FormGroup>\n                <ControlLabel>Platform</ControlLabel>\n                <FormControl\n                  defaultValue={entry.platform}\n                  componentClass=\"select\"\n                  onChange={this.updateRegistrationPlatform}\n                >\n                  {platformOptions}\n                </FormControl>\n              </FormGroup>\n            </Col>\n\n            {/* Flight */}\n            <Col md={1}>\n              <FormGroup>\n                <ControlLabel>Flight</ControlLabel>\n                <FormControl\n                  defaultValue={entry.flight}\n                  componentClass=\"select\"\n                  onChange={this.updateRegistrationFlight}\n                >\n                  <option value=\"A\">A</option>\n                  <option value=\"B\">B</option>\n                  <option value=\"C\">C</option>\n                  <option value=\"D\">D</option>\n                  <option value=\"E\">E</option>\n                  <option value=\"F\">F</option>\n                  <option value=\"G\">G</option>\n                  <option value=\"H\">H</option>\n                </FormControl>\n              </FormGroup>\n            </Col>\n\n            {/* Sex */}\n            <Col md={1}>\n              <FormGroup>\n                <ControlLabel>Sex</ControlLabel>\n                <FormControl defaultValue={entry.sex} componentClass=\"select\" onChange={this.updateRegistrationSex}>\n                  <option value=\"M\">M</option>\n                  <option value=\"F\">F</option>\n                  <option value=\"Mx\">Mx</option>\n                </FormControl>\n              </FormGroup>\n            </Col>\n\n            {/* Equipment */}\n            <Col md={2}>\n              <FormGroup>\n                <ControlLabel>Equipment</ControlLabel>\n                <FormControl\n                  defaultValue={entry.equipment}\n                  componentClass=\"select\"\n                  onChange={this.updateRegistrationEquipment}\n                >\n                  <option value=\"Bare\">Bare</option>\n                  <option value=\"Sleeves\">Sleeves</option>\n                  <option value=\"Wraps\">Wraps</option>\n                  <option value=\"Single-ply\">Single-ply</option>\n                  <option value=\"Multi-ply\">Multi-ply</option>\n                </FormControl>\n              </FormGroup>\n            </Col>\n\n            {/* Divisions */}\n            <Col md={4}>\n              <FormGroup>\n                <ControlLabel>Divisions</ControlLabel>\n                <Select\n                  menuPlacement=\"auto\"\n                  options={divisionOptions}\n                  isClearable={false}\n                  isMulti={true}\n                  onChange={this.updateRegistrationDivisions}\n                  defaultValue={selectedDivisions}\n                />\n              </FormGroup>\n            </Col>\n\n            {/* Events */}\n            <Col md={2}>\n              <FormGroup>\n                <ControlLabel>Events</ControlLabel>\n                <Select\n                  menuPlacement=\"auto\"\n                  options={eventOptions}\n                  isClearable={false}\n                  isMulti={true}\n                  onChange={this.updateRegistrationEvents}\n                  defaultValue={selectedEvents}\n                />\n              </FormGroup>\n            </Col>\n          </Grid>\n\n          <Grid style={gridStyle}>\n            {/* Date of Birth */}\n            <Col md={2}>\n              <FormGroup>\n                <ControlLabel>Date of Birth</ControlLabel>\n                <ValidatedTextInput\n                  initialValue={entry.birthDate}\n                  placeholder=\"YYYY-MM-DD\"\n                  getValidationState={validateIso8601Date}\n                  onSuccess={this.updateRegistrationBirthDate}\n                />\n              </FormGroup>\n            </Col>\n\n            {/* Member ID */}\n            <Col md={2}>\n              <FormGroup>\n                <ControlLabel>Member ID</ControlLabel>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"ID\"\n                  defaultValue={entry.memberId}\n                  onBlur={this.updateRegistrationMemberId}\n                />\n              </FormGroup>\n            </Col>\n\n            {/* Country */}\n            <Col md={2}>\n              <FormGroup>\n                <ControlLabel>Country</ControlLabel>\n                <ValidatedTextInput\n                  initialValue={entry.country}\n                  placeholder=\"Country\"\n                  getValidationState={s => (s === \"\" ? null : \"success\")}\n                  onSuccess={this.updateRegistrationCountry}\n                />\n              </FormGroup>\n            </Col>\n\n            {/* State */}\n            <Col md={1}>\n              <FormGroup>\n                <ControlLabel>State</ControlLabel>\n                <ValidatedTextInput\n                  initialValue={entry.state}\n                  placeholder=\"State\"\n                  getValidationState={s => (s === \"\" ? null : \"success\")}\n                  onSuccess={this.updateRegistrationState}\n                />\n              </FormGroup>\n            </Col>\n\n            {/* Lot Number */}\n            <Col md={1}>\n              <FormGroup>\n                <ControlLabel>Lot #</ControlLabel>\n                <FormControl\n                  type=\"number\"\n                  min=\"0\"\n                  defaultValue={entry.lot === 0 ? \"\" : entry.lot}\n                  onBlur={this.updateRegistrationLot}\n                  onChange={this.updateRegistrationLot}\n                />\n              </FormGroup>\n            </Col>\n\n            {/* Notes */}\n            <Col md={4}>\n              <FormGroup>\n                <ControlLabel>Team</ControlLabel>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"\"\n                  defaultValue={entry.team}\n                  onBlur={this.updateRegistrationTeam}\n                />\n              </FormGroup>\n            </Col>\n          </Grid>\n\n          <Grid style={gridStyle}>\n            {/* Notes */}\n            <Col md={12}>\n              <FormGroup>\n                <ControlLabel>Notes (for your personal use)</ControlLabel>\n                <FormControl\n                  type=\"text\"\n                  placeholder=\"\"\n                  defaultValue={entry.notes}\n                  onBlur={this.updateRegistrationNotes}\n                />\n              </FormGroup>\n            </Col>\n          </Grid>\n        </Panel.Body>\n      </Panel>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  return {\n    meet: state.meet,\n    entry: entry\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    deleteRegistration: entryId => dispatch(deleteRegistration(entryId)),\n    updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj))\n  };\n};\n\nLifterRow.propTypes = {\n  meet: PropTypes.shape({\n    platformsOnDays: PropTypes.array,\n    lengthDays: PropTypes.number,\n    divisions: PropTypes.array\n  }),\n  entry: PropTypes.object,\n  id: PropTypes.number,\n  deleteRegistration: PropTypes.func,\n  updateRegistration: PropTypes.func\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LifterRow);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the button that adds a new entry to the registrations table.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { newRegistration } from \"../../actions/registrationActions\";\n\nimport type { Entry } from \"../../types/dataTypes\";\n\ninterface DispatchProps {\n  newRegistration: (obj: $Shape<Entry>) => any;\n}\n\ntype Props = DispatchProps;\n\nclass NewButton extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = event => {\n    this.props.newRegistration({});\n  };\n\n  render() {\n    return (\n      <Button onClick={this.handleClick} bsStyle=\"primary\" bsSize=\"large\" block>\n        New Lifter\n      </Button>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    newRegistration: (obj: $Shape<Entry>) => dispatch(newRegistration(obj))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NewButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a general CSV manipulation class.\n// This is a JS port of the Python \"oplcsv.py\" library used by the OpenPowerlifting\n// main data project.\n\n// Makes a string suitable for inclusion in a simple CSV file,\n// by deleting all commas and double quotes.\nexport const csvString = (x: number | string): string => {\n  if (x === undefined) return \"\";\n  let s = String(x);\n\n  // The OpenPowerlifting format uses commas and disallow double-quotes.\n  s = s.replace(/,/g, \" \");\n  s = s.replace(/\"/g, \" \");\n\n  // The number \"0\" is also never written out explicitly; the empty string is preferred.\n  if (s === \"0\") return \"\";\n\n  // Clean up some formatting.\n  s = s.replace(/ {2}/g, \" \").trim();\n  return s;\n};\n\n// Returns the in-spreadsheet name of a column. In standard spreadsheet software,\n// rows are numeric (1, 2, 3, ...) and columns are alphabetic (A, B, C, ...).\n// For errors, we'd like to report the column that's wrong.\n//\n// The 'index' input is zero-indexed.\nexport const getSpreadsheetColumnName = (index: number): string => {\n  const alphabet: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  // Column name accumulator.\n  // It's built by taking repeated mods in base 26: therefore new characters\n  // are appended to the left of the accumulator.\n  let acc: string = \"\";\n  let n: number = index;\n\n  while (n >= alphabet.length) {\n    const mod = n % alphabet.length;\n    const remainder = Math.floor(n / alphabet.length);\n\n    acc = alphabet[mod] + acc;\n\n    // The subtraction is because this isn't a pure modulus operator:\n    // by analogy to base-10, \"AA\" is equivalent to \"00\", and we want to render\n    // that.\n    n = remainder - 1;\n  }\n\n  return alphabet[n] + acc;\n};\n\n// A class for managing simple CSV files. Double-quotes and commas are disallowed.\nexport class Csv {\n  fieldnames: Array<string>; // Column names.\n  rows: Array<Array<string>>; // Individual rows.\n\n  constructor() {\n    this.fieldnames = [];\n    this.rows = [];\n  }\n\n  length(): number {\n    return this.rows.length;\n  }\n\n  index(name: string): number {\n    return this.fieldnames.indexOf(name);\n  }\n\n  appendColumn(name: string): void {\n    this.fieldnames.push(name);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].push(\"\");\n    }\n  }\n\n  appendColumns(namelist: Array<string>): void {\n    this.fieldnames = this.fieldnames.concat(namelist);\n    for (let i = 0; i < this.rows.length; i++) {\n      for (let j = 0; j < namelist.length; j++) {\n        this.rows[i].push(\"\");\n      }\n    }\n  }\n\n  insertColumn(index: number, name: string): void {\n    this.fieldnames.splice(index, 0, name);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].splice(index, 0, \"\");\n    }\n  }\n\n  removeColumnByIndex(index: number): void {\n    this.fieldnames.splice(index, 1);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].splice(index, 1);\n    }\n  }\n\n  removeColumnByName(name: string): void {\n    for (let i = 0; i < this.fieldnames.length; i++) {\n      if (this.fieldnames[i] === name) {\n        this.removeColumnByIndex(i);\n        return;\n      }\n    }\n  }\n\n  removeEmptyColumns(): void {\n    for (let i = 0; i < this.fieldnames.length; i++) {\n      let empty = true;\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j][i] !== \"\") {\n          empty = false;\n          break;\n        }\n      }\n      if (empty === true) {\n        this.removeColumnByIndex(i);\n        this.removeEmptyColumns();\n        return;\n      }\n    }\n  }\n\n  // Attempts to fill in this CSV object from a string.\n  // On success, returns the `this` Csv object.\n  // On failure, returns an error string with a user-presentable message.\n  fromString(s: string): Csv | string {\n    // The string cannot contain double-quotes: programs use those to allow\n    // in-field commas, which we disallow.\n    if (s.includes('\"')) {\n      let e = 'Double-quotes (\") are disallowed.';\n      e += \" Double-quotes can be automatically inserted by spreadsheet software\";\n      e += \" when a field contains a comma. Make sure to delete all in-field commas.\";\n      return e;\n    }\n\n    // Split by newline. It's OK for \\r to remain: we'll strip each field later.\n    // This always produces an array of length at least 1.\n    //\n    // Trim the string first: it's OK if files end with \"\\n\".\n    const lines = s.trim().split(\"\\n\");\n\n    // The first row contains fieldnames.\n    const fieldnames = lines[0].split(\",\").map(x => x.trim());\n\n    // Any rows after the first contain data.\n    let rows = [];\n    for (let i = 1; i < lines.length; ++i) {\n      const row = lines[i].split(\",\").map(x => x.trim());\n      rows.push(row);\n    }\n\n    // Sanity checking time!\n    // Every column must be named.\n    for (let i = 0; i < fieldnames.length; ++i) {\n      if (fieldnames[i] === \"\") {\n        const colname = getSpreadsheetColumnName(i);\n        return \"Column \" + colname + \" is missing a column name.\";\n      }\n    }\n\n    // Every row must have the same length as the fieldnames row.\n    for (let i = 0; i < rows.length; ++i) {\n      if (rows[i].length !== fieldnames.length) {\n        const rownum = i + 2; // 1-indexed, and the first row is fieldnames.\n        let e = \"Row \" + rownum + \" has \" + rows[i].length + \" columns,\";\n        e += \" but the first row has \" + fieldnames.length + \" columns.\";\n        return e;\n      }\n    }\n\n    this.fieldnames = fieldnames;\n    this.rows = rows;\n    return this;\n  }\n\n  toString(): string {\n    const headers = this.fieldnames.join(\",\");\n    let strRows: Array<string> = [];\n    for (let i = 0; i < this.rows.length; i++) {\n      strRows.push(this.rows[i].join(\",\"));\n    }\n    return headers + \"\\n\" + strRows.join(\"\\n\") + \"\\n\";\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for parsing strings into OpenLifter datatypes.\n// The strings can come from the user and are therefore untrusted.\n\nimport type { Equipment, Event, Sex } from \"../types/dataTypes\";\n\n// Strictly parse a string to an integer. Negatives are allowed.\nexport const parseInteger = (s: string): ?number => {\n  // Characters will be compared to ASCII charcodes.\n  const ascii_0 = 0x30;\n  const ascii_9 = 0x39;\n  const ascii_minus = 0x2d;\n\n  // Disallow the empty string.\n  if (s.length === 0) {\n    return;\n  }\n\n  // Check the string character-by-character.\n  for (let i = 0; i < s.length; ++i) {\n    let charcode = s.charCodeAt(i);\n\n    // A single negative is allowed at the front.\n    if (i === 0 && charcode === ascii_minus) {\n      continue;\n    } else if (charcode < ascii_0 || charcode > ascii_9) {\n      return;\n    }\n  }\n\n  return parseInt(s, 10);\n};\n\n// Loosely parse a string to a Sex.\nexport const parseSex = (s: string): ?Sex => {\n  const lower = s.toLowerCase();\n  if (lower === \"m\") return \"M\";\n  if (lower === \"f\") return \"F\";\n  if (lower === \"mx\") return \"Mx\";\n  return;\n};\n\n// Loosely parse a string to an Equipment.\nexport const parseEquipment = (s: string): ?Equipment => {\n  const lower = s.toLowerCase();\n  if (lower === \"bare\") return \"Bare\";\n  if (lower === \"sleeves\") return \"Sleeves\";\n  if (lower === \"wraps\") return \"Wraps\";\n\n  // Be more forgiving on these ones: nobody remembers the dash.\n  if (lower.startsWith(\"single\")) return \"Single-ply\";\n  if (lower.startsWith(\"multi\")) return \"Multi-ply\";\n  return;\n};\n\n// Parse a string to an Event.\n// Valid characters are \"SBD\", which must occur in that order.\nexport const parseEvent = (s: string): ?Event => {\n  if (s === \"\") {\n    return;\n  }\n\n  // Allow lowercase variants like \"sbd\".\n  const lower = s.toLowerCase();\n  const has_squat = lower.includes(\"s\");\n  const has_bench = lower.includes(\"b\");\n  const has_deadlift = lower.includes(\"d\");\n\n  let acc = \"\";\n  if (has_squat) acc += \"S\";\n  if (has_bench) acc += \"B\";\n  if (has_deadlift) acc += \"D\";\n\n  // Having reconstructed the string in the right order, check whether it matches.\n  if (acc !== s) {\n    return;\n  }\n\n  return ((s: any): Event);\n};\n\n// Strictly parse a YYYY-MM-DD date.\nexport const parseDate = (s: string): ?string => {\n  if (s.length !== 10) {\n    return;\n  }\n\n  let pieces = s.split(\"-\");\n  if (pieces.length !== 3) {\n    return;\n  }\n\n  if (pieces[0].length !== 4 || pieces[1].length !== 2 || pieces[2].length !== 2) {\n    return;\n  }\n\n  let year = parseInteger(pieces[0]);\n  let month = parseInteger(pieces[1]);\n  let day = parseInteger(pieces[2]);\n\n  if (typeof year !== \"number\" || year < 1920) return;\n  if (typeof month !== \"number\" || month < 1 || month > 12) return;\n  if (typeof day !== \"number\" || day < 1 || day > 31) return;\n\n  return s;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for importing Registration data from a CSV file.\n// The CSV format is very strict: no double-quotes allowed, commas are always\n// separators, and the format of each field must exactly match our internal format.\n\nimport { Csv, getSpreadsheetColumnName } from \"../export/csv\";\nimport { newDefaultEntry } from \"../entry\";\n\nimport { parseInteger, parseEquipment, parseEvent, parseSex, parseDate } from \"../parsers\";\n\nimport type { Entry, Flight } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\n// Generates a string representing a downloadable CSV file, for use as an example\n// of the registration format.\n//\n// This is in code so that it can live right next to loadRegistrations()\n// for easier long-term maintenance.\nexport const makeExampleRegistrationsCsv = (): string => {\n  let csv = new Csv();\n  csv.rows = [[]]; // appendColumns() will resize the dummy row correctly.\n\n  csv.appendColumns([\"Day\", \"Platform\", \"Flight\", \"Name\", \"Sex\", \"Equipment\"]);\n  csv.appendColumns([\"Division1\", \"Division2\", \"Division3\"]);\n  csv.appendColumns([\"Event1\", \"Event2\", \"Event3\"]);\n  csv.appendColumns([\"BirthDate\", \"MemberID\", \"Country\", \"State\", \"Lot\", \"Team\"]);\n  csv.appendColumns([\"Notes\"]);\n\n  csv.rows[0][csv.index(\"Day\")] = \"1\";\n  csv.rows[0][csv.index(\"Platform\")] = \"1\";\n  csv.rows[0][csv.index(\"Flight\")] = \"A\";\n  csv.rows[0][csv.index(\"Name\")] = \"Emily Example\";\n  csv.rows[0][csv.index(\"Sex\")] = \"F\";\n  csv.rows[0][csv.index(\"Equipment\")] = \"Sleeves\";\n  csv.rows[0][csv.index(\"Division1\")] = \"Open\";\n  csv.rows[0][csv.index(\"Division2\")] = \"J20-23\";\n  // Intentionally blank: csv.rows[0][csv.index(\"Division3\")]\n  csv.rows[0][csv.index(\"Event1\")] = \"SBD\";\n  csv.rows[0][csv.index(\"Event2\")] = \"BD\";\n  // Intentionally blank: csv.rows[0][csv.index(\"Event3\")]\n  csv.rows[0][csv.index(\"BirthDate\")] = \"1998-02-16\";\n  // Intentionally blank: csv.rows[0][csv.index(\"MemberID\")]\n  csv.rows[0][csv.index(\"Country\")] = \"USA\";\n  csv.rows[0][csv.index(\"State\")] = \"NY\";\n  // Intentionally blank: csv.rows[0][csv.index(\"Lot\")]\n  // Intentionally blank: csv.rows[0][csv.index(\"Team\")]\n  csv.rows[0][csv.index(\"Notes\")] = \"emily@example.com: she's the best!\";\n\n  return csv.toString();\n};\n\n// Every fieldname must be either mandatory or optional.\nconst MANDATORY_FIELDNAMES = [\"Day\", \"Platform\", \"Flight\", \"Name\", \"Sex\", \"Equipment\", \"Division1\", \"Event1\"];\nconst OPTIONAL_FIELDNAMES = [\n  \"Division2\",\n  \"Division3\",\n  \"Division4\",\n  \"Division5\",\n  \"Event2\",\n  \"Event3\",\n  \"Event4\",\n  \"Event5\",\n  \"BirthDate\",\n  \"MemberID\",\n  \"Country\",\n  \"State\",\n  \"Lot\",\n  \"Team\",\n  \"Notes\"\n];\n\n// Attempts to load registration information from a CSV object.\n//\n// On success, returns an array of Entry objects.\n//   NOTE CAREFULLY that the global state is not updated by this function.\n//   The caller must integrate the Entry objects, updating EntryID Tracking.\n// On failure, returns an error string with a user-presentable message.\nexport const loadRegistrations = (state: GlobalState, csv: Csv): Array<Entry> | string => {\n  // Check the existent fieldnames for sanity.\n  for (let i = 0; i < csv.fieldnames.length; ++i) {\n    const name: string = csv.fieldnames[i];\n\n    // Every fieldname that appears must be known.\n    if (!MANDATORY_FIELDNAMES.includes(name) && !OPTIONAL_FIELDNAMES.includes(name)) {\n      const colname = getSpreadsheetColumnName(i);\n      const allfields: string = MANDATORY_FIELDNAMES.join(\", \") + \", \" + OPTIONAL_FIELDNAMES.join(\", \");\n\n      let e = \"Unknown fieldname '\" + name + \"' in column \" + colname + \".\";\n      e += \" Here's a list of all accepted column names: \" + allfields;\n      return e;\n    }\n\n    // Fieldnames cannot be repeated.\n    for (let j = i + 1; j < csv.fieldnames.length; ++j) {\n      if (csv.fieldnames[j] === csv.fieldnames[i]) {\n        const iname = getSpreadsheetColumnName(i);\n        const jname = getSpreadsheetColumnName(j);\n\n        let e = 'The column \"' + csv.fieldnames[i] + '\" occurs in two columns:';\n        e += \" \" + iname + \" and \" + jname;\n        return e;\n      }\n    }\n  }\n\n  // Check that all of the MANDATORY_FIELDNAMES are included.\n  for (let i = 0; i < MANDATORY_FIELDNAMES.length; ++i) {\n    if (!csv.fieldnames.includes(MANDATORY_FIELDNAMES[i])) {\n      return 'The mandatory \"' + MANDATORY_FIELDNAMES[i] + '\" column is missing';\n    }\n  }\n\n  // The \"Platform\" column\" must occur after the \"Day\" column: the parsing\n  // below is stateful, and needs to know how many platforms are on that day\n  // when it reads in the platform value.\n  if (csv.fieldnames.indexOf(\"Platform\") <= csv.fieldnames.indexOf(\"Day\")) {\n    return \"The Day column must come before the Platform column\";\n  }\n\n  // The caller needs to update this field on the state later, if successful.\n  let nextEntryId = state.registration.nextEntryId;\n  let entries: Array<Entry> = [];\n\n  // The fieldnames are valid! Now we can start building Entries.\n  for (let i = 0; i < csv.rows.length; ++i) {\n    let entry: Entry = newDefaultEntry(nextEntryId++);\n    entries.push(entry);\n\n    // Iterate over each field and integrate it into the Entry object.\n    let row: Array<string> = csv.rows[i];\n    for (let j = 0; j < row.length; ++j) {\n      let fieldname = csv.fieldnames[j];\n      let val = row[j];\n\n      // User-visible row number, for error messages.\n      // The first row is for the fieldnames, and spreadsheet programs are 1-indexed.\n      let rowstr = String(i + 2);\n\n      // Start building the error string early, since it's repeated a lot.\n      let errprefix = \"Invalid \" + fieldname + \" '\" + val + \"' in row \" + rowstr + \": \";\n\n      switch (fieldname) {\n        case \"Day\": {\n          const integer = parseInteger(val);\n\n          // Must be an integer.\n          if (typeof integer !== \"number\") {\n            return errprefix + \"expected an integer\";\n          }\n\n          // Can't be less than one: there's always at least one day.\n          if (integer < 1) {\n            return errprefix + \"can't be less than 1\";\n          }\n\n          // Can't be greater than the number of days specified in the GlobalState.\n          const numDays = state.meet.lengthDays;\n          if (integer > numDays) {\n            return errprefix + \"the Meet Setup page specifies only \" + numDays + \" days\";\n          }\n\n          // All checks passed!\n          entry.day = integer;\n          break;\n        }\n\n        case \"Platform\": {\n          const integer = parseInteger(val);\n\n          // Must be an integer.\n          if (typeof integer !== \"number\") {\n            return errprefix + \"expected an integer\";\n          }\n\n          // Can't be less than one: there's always at least one platform.\n          if (integer < 1) {\n            return errprefix + \"can't be less than 1\";\n          }\n\n          // Can't be greater than the number of platforms specified in the GlobalState.\n          // The \"Day\" column is guaranteed to already have been parsed: code above\n          // makes sure the \"Day\" column is before the \"Platform\" column.\n          const day = entry.day;\n          const platforms = state.meet.platformsOnDays[day];\n          if (integer > platforms) {\n            return errprefix + \"Day \" + day + \" only has \" + platforms + \" platforms\";\n          }\n\n          // All checks passed!\n          entry.platform = integer;\n          break;\n        }\n\n        case \"Flight\": {\n          if (val.length !== 1) {\n            return errprefix + \"expected just a single flight letter\";\n          }\n\n          if (\"ABCDEFGH\".indexOf(val) === -1) {\n            return errprefix + \"expected a flight letter, A through H\";\n          }\n\n          // All checks passed!\n          // This breaks @flow strict, though.\n          entry.flight = ((val: any): Flight);\n          break;\n        }\n\n        case \"Name\": {\n          if (val === \"\") {\n            return errprefix + \"every lifter needs a Name\";\n          }\n          if (val.toUpperCase() === val) {\n            return errprefix + \"the Name should not be all-uppercase\";\n          }\n          entry.name = val;\n          break;\n        }\n\n        case \"Sex\": {\n          const sex = parseSex(val);\n          if (typeof sex !== \"string\") {\n            return errprefix + \"valid values are M, F, and Mx\";\n          }\n          entry.sex = sex;\n          break;\n        }\n\n        case \"Equipment\": {\n          const eqt = parseEquipment(val);\n          if (typeof eqt !== \"string\") {\n            return errprefix + \"valid values are 'Bare', 'Sleeves', 'Wraps', 'Single-ply', and 'Multi-ply'\";\n          }\n          entry.equipment = eqt;\n          break;\n        }\n\n        case \"Division1\": // fallthrough\n        case \"Division2\": // fallthrough\n        case \"Division3\": // fallthrough\n        case \"Division4\": // fallthrough\n        case \"Division5\": {\n          // Only the first Division is mandatory.\n          if (val === \"\" && fieldname !== \"Division1\") {\n            break;\n          }\n\n          // Check that it appears as a valid division.\n          if (!state.meet.divisions.includes(val)) {\n            return errprefix + \"not a valid division per the Meet Setup page\";\n          }\n\n          // Check that it wasn't already added.\n          if (entry.divisions.includes(val)) {\n            return errprefix + \"the lifter is already in that Division\";\n          }\n\n          entry.divisions.push(val);\n          break;\n        }\n\n        case \"Event1\": // fallthrough\n        case \"Event2\": // fallthrough\n        case \"Event3\": // fallthrough\n        case \"Event4\": // fallthrough\n        case \"Event5\": {\n          // Only the first Event is mandatory.\n          if (val === \"\" && fieldname !== \"Event1\") {\n            break;\n          }\n\n          // Check that it's well-formed.\n          const evt = parseEvent(val);\n          if (typeof evt !== \"string\") {\n            return errprefix + \"should be formed like 'SBD', 'BD', 'B', etc.\";\n          }\n\n          // Check for duplicates.\n          if (entry.events.includes(evt)) {\n            return errprefix + \"the lifter is already registered for that Event\";\n          }\n\n          // All checks passed!\n          entry.events.push(evt);\n          break;\n        }\n\n        case \"BirthDate\": {\n          if (val === \"\") {\n            // BirthDate is optional.\n            break;\n          }\n\n          const bd = parseDate(val);\n          if (typeof bd !== \"string\") {\n            let e = \"date must be in the unambiguous international standard: YYYY-MM-DD\";\n            return errprefix + e;\n          }\n\n          entry.birthDate = bd;\n          break;\n        }\n\n        case \"MemberID\":\n          entry.memberId = val;\n          break;\n\n        case \"Country\":\n          entry.country = val;\n          break;\n\n        case \"State\":\n          entry.state = val;\n          break;\n\n        case \"Lot\": {\n          if (val === \"\") {\n            // Empty strings are allowed: just doesn't use lots.\n            break;\n          }\n\n          const integer = parseInteger(val);\n          if (typeof integer !== \"number\" || integer < 1) {\n            return errprefix + \"expected an empty cell or a positive integer\";\n          }\n\n          // All checks passed!\n          entry.lot = integer;\n          break;\n        }\n\n        case \"Team\":\n          entry.team = val;\n          break;\n\n        case \"Notes\":\n          entry.notes = val;\n          break;\n\n        default:\n          return 'Missing handler for the \"' + fieldname + '\" column';\n      }\n    }\n  }\n\n  return entries;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Registration page, contained by the RegistrationContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Button, ButtonGroup, Panel } from \"react-bootstrap\";\n\nimport LifterTable from \"./LifterTable\";\nimport LifterRow from \"./LifterRow\";\nimport NewButton from \"./NewButton\";\nimport ErrorModal from \"../ErrorModal\";\n\nimport { Csv } from \"../../logic/export/csv\";\nimport { makeExampleRegistrationsCsv, loadRegistrations } from \"../../logic/import/registration-csv\";\n\nimport { newRegistration, deleteRegistration } from \"../../actions/registrationActions\";\n\nimport saveAs from \"file-saver\";\n\nimport type { GlobalState } from \"../../types/stateTypes\";\nimport type { Entry } from \"../../types/dataTypes\";\n\ninterface StateProps {\n  global: GlobalState;\n}\n\ninterface DispatchProps {\n  newRegistration: (obj: $Shape<Entry>) => any;\n  deleteRegistration: (id: number) => any;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  // Controls the ErrorModal popup. Shown when error !== \"\".\n  error: string;\n}\n\nconst marginStyle = { margin: \"0 20px 20px 20px\" };\n\n// Used to distinguish between the Overwrite and Append modes.\nvar globalImportKind: string = \"Overwrite\";\n\nclass RegistrationView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.handleDownloadCsvTemplateClick = this.handleDownloadCsvTemplateClick.bind(this);\n    this.handleOverwriteClick = this.handleOverwriteClick.bind(this);\n    this.handleAppendClick = this.handleAppendClick.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.closeErrorModal = this.closeErrorModal.bind(this);\n\n    this.state = { error: \"\" };\n  }\n\n  handleDownloadCsvTemplateClick = () => {\n    const text = makeExampleRegistrationsCsv();\n    const blob = new Blob([text], { type: \"application/text;charset=utf-8\" });\n    saveAs(blob, \"registration-template.csv\");\n  };\n\n  handleOverwriteClick = () => {\n    globalImportKind = \"Overwrite\";\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  handleAppendClick = () => {\n    globalImportKind = \"Append\";\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  handleLoadFileInput = () => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement)) {\n      return;\n    }\n\n    const selectedFile = loadHelper.files[0];\n    let rememberThis = this;\n\n    let reader = new FileReader();\n    reader.onload = function(event) {\n      let csv = new Csv();\n      const maybeError = csv.fromString(event.target.result);\n\n      // Check if an error message occurred.\n      if (typeof maybeError === \"string\") {\n        rememberThis.setState({ error: maybeError });\n        return;\n      }\n\n      // Convert the Csv to an Array<Entry>.\n      const maybeEntries = loadRegistrations(rememberThis.props.global, csv);\n      if (typeof maybeEntries === \"string\") {\n        rememberThis.setState({ error: maybeEntries });\n        return;\n      }\n\n      // Successfully parsed and loaded!\n      const entries: Array<Entry> = maybeEntries;\n\n      // If the mode is \"Overwrite\", delete all existing Entries.\n      if (globalImportKind === \"Overwrite\") {\n        const entryIds = rememberThis.props.global.registration.entries.map(e => e.id);\n        for (let i = 0; i < entryIds.length; ++i) {\n          rememberThis.props.deleteRegistration(entryIds[i]);\n        }\n      }\n\n      // Add all the new Entries.\n      for (let i = 0; i < entries.length; ++i) {\n        // Deleting the 'id' field causes newRegistration() to assign a valid one.\n        delete entries[i].id;\n        rememberThis.props.newRegistration(entries[i]);\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  closeErrorModal = () => {\n    this.setState({ error: \"\" });\n  };\n\n  render() {\n    return (\n      <div style={marginStyle}>\n        <ErrorModal\n          error={this.state.error}\n          title=\"Importation Error\"\n          show={this.state.error !== \"\"}\n          close={this.closeErrorModal}\n        />\n\n        <Panel bsStyle=\"info\">\n          <Panel.Heading>Auto-Import Registrations</Panel.Heading>\n          <Panel.Body>\n            <Button bsStyle=\"info\" onClick={this.handleDownloadCsvTemplateClick}>\n              Download Template\n            </Button>\n\n            <ButtonGroup style={{ marginLeft: \"14px\" }}>\n              <Button bsStyle=\"danger\" onClick={this.handleOverwriteClick}>\n                Overwrite Registrations from CSV\n              </Button>\n              <Button bsStyle=\"warning\" onClick={this.handleAppendClick}>\n                Append Registrations from CSV\n              </Button>\n            </ButtonGroup>\n          </Panel.Body>\n        </Panel>\n\n        <LifterTable entries={this.props.global.registration.entries} rowRenderer={LifterRow} />\n        <NewButton />\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".csv\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  global: state\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    newRegistration: (obj: $Shape<Entry>) => dispatch(newRegistration(obj)),\n    deleteRegistration: (id: number) => dispatch(deleteRegistration(id))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegistrationView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Registration page.\n\nimport React from \"react\";\nimport RegistrationView from \"../components/registration/RegistrationView\";\n\nclass RegistrationContainer extends React.Component<{}> {\n  render() {\n    return <RegistrationView />;\n  }\n}\n\nexport default RegistrationContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Table } from \"react-bootstrap\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  entries: Array<Entry>;\n  rowRenderer: any;\n  inLiftingPage?: boolean;\n}\n\ninterface StateProps {\n  inKg: boolean;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass LifterTable extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n  }\n\n  renderRows = () => {\n    const LifterRow = this.props.rowRenderer;\n    const { entries } = this.props;\n    const inLiftingPage = this.props.inLiftingPage === true;\n\n    return entries.map(entry => <LifterRow key={entry.id} id={entry.id} inLiftingPage={inLiftingPage} />);\n  };\n\n  renderHeader = () => {\n    // Styling for small, single-character selector columns.\n    const shortStyle = { width: \"85px\" };\n\n    const units = this.props.inKg ? \"Kg\" : \"Lbs\";\n\n    return (\n      <tr>\n        <th style={shortStyle}>Platform</th>\n        <th style={shortStyle}>Flight</th>\n        <th>Name</th>\n\n        <th style={shortStyle}>Age</th>\n        <th style={shortStyle}>Bodyweight {units}</th>\n        <th style={shortStyle}>Squat Rack</th>\n        <th style={shortStyle}>Squat Opener {units}</th>\n        <th style={shortStyle}>Bench Rack</th>\n        <th style={shortStyle}>Bench Opener {units}</th>\n        <th style={shortStyle}>Deadlift Opener {units}</th>\n      </tr>\n    );\n  };\n\n  render() {\n    return (\n      <Table hover condensed style={{ margin: \"0px\" }}>\n        <thead>{this.renderHeader()}</thead>\n        <tbody>{this.renderRows()}</tbody>\n      </Table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LifterTable);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type {\n  EnterAttemptAction,\n  MarkLiftAction,\n  SetLiftingGroupAction,\n  OverrideAttemptAction,\n  OverrideEntryIdAction,\n  SetTableInfoAction\n} from \"../types/actionTypes\";\nimport type { Lift } from \"../types/dataTypes\";\nimport type { LiftingState } from \"../types/stateTypes\";\n\n// Sets a weightKg that doesn't have a good/failed value, for entering in attempts.\nexport const enterAttempt = (\n  entryId: number,\n  lift: Lift,\n  attemptOneIndexed: number,\n  weightKg: number\n): EnterAttemptAction => {\n  return {\n    type: \"ENTER_ATTEMPT\",\n    entryId: entryId,\n    lift: lift,\n    attemptOneIndexed: attemptOneIndexed,\n    weightKg: weightKg\n  };\n};\n\n// Marks a lift \"good\" or \"failed\".\n//\n// entryId is the ID of the affected entry, a Number.\n// lift is \"S\", \"B\", or \"D\".\n// attempt is 1,2,3, etc., up to MAX_ATTEMPTS.\n// success is a bool for whether to mark the lift as a success or as a failure.\nexport const markLift = (entryId: number, lift: Lift, attemptOneIndexed: number, success: boolean): MarkLiftAction => {\n  return {\n    type: \"MARK_LIFT\",\n    entryId: entryId,\n    lift: lift,\n    attemptOneIndexed: attemptOneIndexed,\n    success: success\n  };\n};\n\n// Sets the current group of lifters.\n// This is always manually set by the score table.\nexport const setLiftingGroup = (day: number, platform: number, flight: string, lift: Lift): SetLiftingGroupAction => {\n  return {\n    type: \"SET_LIFTING_GROUP\",\n    day: day,\n    platform: platform,\n    flight: flight,\n    lift: lift\n  };\n};\n\n// Overrides the calculated meet progress logic by forcing display of an attempt,\n// even if it has already been marked \"good lift\" or \"no lift\".\nexport const overrideAttempt = (attempt: number): OverrideAttemptAction => {\n  return {\n    type: \"OVERRIDE_ATTEMPT\",\n    attempt: attempt\n  };\n};\n\n// Overrides the calculated meet progress logic by forcing display of a specific lifter,\n// even if they have already had their attempt entered.\nexport const overrideEntryId = (entryId: number): OverrideEntryIdAction => {\n  return {\n    type: \"OVERRIDE_ENTRY_ID\",\n    entryId: entryId\n  };\n};\n\n// Updates arbitrary fields in the LiftingState.\n//\n// The intention is to use action just for table customization: things like\n// column widths, column visibility, and other such options.\n//\n// Having this interface lets us keep the number of actions low: separate\n// actions for each kind of modification is not really useful.\nexport const setTableInfo = (obj: $Shape<LiftingState>): SetTableInfoAction => {\n  return {\n    type: \"SET_TABLE_INFO\",\n    changes: obj\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines an input of a single weight, during configuration.\n// Since it's for configuration, it doesn't have an associated success/failure value.\n//\n// For consistency purposes, weights are always stored in kg.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\n\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { kg2lbs, lbs2kg, displayWeight } from \"../../logic/units\";\n\nimport type { Entry, Lift } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  id: number; // The EntryID.\n  field: string;\n  disabled: boolean;\n\n  // Optional attributes used only for lifts (as opposed to for bodyweights).\n  placeholder?: ?string;\n  lift?: Lift;\n  attemptOneIndexed?: number;\n  multipleOf?: number;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  weightKg: number;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: $Shape<Entry>) => any;\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  weightStr: string;\n}\n\nclass WeightInput extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    let weight = this.props.weightKg;\n    if (!this.props.inKg) {\n      weight = kg2lbs(weight);\n    }\n\n    // Internal state, for purposes of validation.\n    // To avoid confusion (auto-rounding) when typing, just store a String.\n    this.state = {\n      // Prefer displaying an empty string to 0.0.\n      weightStr: weight === 0.0 ? \"\" : displayWeight(weight)\n    };\n  }\n\n  getValidationState = () => {\n    const weightNum = Number(this.state.weightStr);\n    if (isNaN(weightNum) || weightNum < 0) return \"error\";\n    if (this.props.multipleOf !== undefined && weightNum % this.props.multipleOf !== 0.0) {\n      return \"warning\";\n    }\n    if (this.state.weightStr.length > 0) return \"success\";\n    return null;\n  };\n\n  // Update the internal state, used for validation.\n  handleChange = event => {\n    const weightStr = event.target.value;\n    this.setState({ weightStr: weightStr });\n  };\n\n  // Update the Redux store.\n  handleBlur = event => {\n    const weightStr = event.target.value;\n    const weightNum = Number(weightStr);\n\n    if (this.getValidationState() === \"error\") {\n      return;\n    }\n\n    const weightKg = this.props.inKg ? weightNum : lbs2kg(weightNum);\n    if (this.props.weightKg === weightKg) {\n      return;\n    }\n\n    // If \"attempt\" is set, a specific attempt is selected.\n    if (this.props.attemptOneIndexed !== undefined && this.props.lift !== undefined) {\n      const attemptOneIndexed = this.props.attemptOneIndexed;\n      const lift = this.props.lift;\n      this.props.enterAttempt(this.props.id, lift, attemptOneIndexed, weightKg);\n    } else {\n      // Otherwise, the field is a Number.\n      let newfields = {};\n      newfields[this.props.field] = weightKg;\n      this.props.updateRegistration(this.props.id, newfields);\n    }\n  };\n\n  render() {\n    // FormGroup provides a default padding of 15, but FormGroup is only being\n    // used here to accept a validationState. It's not really a group.\n    const undoDefaultPadding = { marginBottom: \"0\" };\n\n    return (\n      <FormGroup style={undoDefaultPadding} validationState={this.getValidationState()}>\n        <FormControl\n          disabled={this.props.disabled}\n          placeholder={this.props.placeholder}\n          type=\"text\"\n          value={this.state.weightStr}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  // If `field` is set, then read the Number from the given field name.\n  let weightKg = 0.0;\n  if (ownProps.field !== undefined) {\n    weightKg = entry[ownProps.field];\n  } else {\n    // Otherwise, refer to a specific lift and attempt.\n    const lift = ownProps.lift;\n    const attemptOneIndexed = ownProps.attemptOneIndexed;\n    const field = liftToAttemptFieldName(lift);\n    weightKg = entry[field][attemptOneIndexed - 1];\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    weightKg: weightKg\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj)),\n    enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n      dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeightInput);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport type { Validation } from \"../types/dataTypes\";\n\n// Validates a simple positive integer.\nexport const validatePositiveInteger = (s: ?string, inclusiveMax: ?number): Validation => {\n  if (typeof s !== \"string\") return \"error\";\n\n  if (s === \"\") return null;\n\n  // Ensure that the string only contains numbers, because the Number() constructor\n  // will ignore whitespace.\n  const onlyNumbers = /^[0-9]+$/;\n  if (!s.match(onlyNumbers)) return \"error\";\n\n  // The number shouldn't start with an unnecessary zero.\n  if (s.startsWith(\"0\")) return \"error\";\n\n  const n = Number(s);\n\n  // Ensure the number is a positive integer.\n  if (isNaN(n)) return \"error\";\n  if (!Number.isInteger(n)) return \"error\";\n  if (n <= 0) return \"error\";\n\n  // Allow an optional inclusive upper bound check.\n  if (typeof inclusiveMax === \"number\") {\n    if (n > inclusiveMax) return \"error\";\n  }\n\n  return \"success\";\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a row in the LifterTable on the Weigh-inss page.\n// This provides a bunch of widgets, each of which correspond to\n// the state of a single entry.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { FormControl } from \"react-bootstrap\";\n\nimport ValidatedTextInput from \"../ValidatedTextInput\";\nimport WeightInput from \"./WeightInput\";\n\nimport { validatePositiveInteger } from \"../../validation/positiveInteger\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\n\nimport type { Entry, Validation } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  id: number;\n  inLiftingPage?: boolean;\n}\n\ninterface StateProps {\n  meet: MeetState;\n  entry: Entry;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: $Shape<Entry>) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass LifterRow extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.updateRegistrationFlight = this.updateRegistrationFlight.bind(this);\n    this.updateRegistrationSquatRackInfo = this.updateRegistrationSquatRackInfo.bind(this);\n    this.updateRegistrationBenchRackInfo = this.updateRegistrationBenchRackInfo.bind(this);\n    this.updateRegistrationAge = this.updateRegistrationAge.bind(this);\n  }\n\n  updateRegistrationFlight = event => {\n    const flight = event.target.value;\n    if (this.props.entry.flight !== flight) {\n      this.props.updateRegistration(this.props.id, { flight: flight });\n    }\n  };\n\n  updateRegistrationSquatRackInfo = (value: string) => {\n    if (this.props.entry.squatRackInfo !== value) {\n      this.props.updateRegistration(this.props.id, { squatRackInfo: value });\n    }\n  };\n\n  updateRegistrationBenchRackInfo = (value: string) => {\n    if (this.props.entry.benchRackInfo !== value) {\n      this.props.updateRegistration(this.props.id, { benchRackInfo: value });\n    }\n  };\n\n  updateRegistrationAge = (value: string) => {\n    const age: number = value === \"\" ? 0 : Number(value);\n    if (this.props.entry.age !== age) {\n      this.props.updateRegistration(this.props.id, { age: age });\n    }\n  };\n\n  validateAge = (value: ?string): Validation => {\n    if (value === \"\") return null;\n\n    const pos: Validation = validatePositiveInteger(value);\n    if (pos === \"success\") {\n      // Complain a little if the age is implausible.\n      const n = Number(value);\n      if (n <= 4 || n > 100) return \"warning\";\n    }\n    return pos;\n  };\n\n  validateRack = (value: ?string): Validation => {\n    if (value === \"\") return null;\n    return \"success\";\n  };\n\n  render() {\n    const entry = this.props.entry;\n\n    // Check whether the event(s) include a given lift.\n    let hasSquat = false;\n    let hasBench = false;\n    let hasDeadlift = false;\n    for (let i = 0; i < entry.events.length; i++) {\n      const event = entry.events[i];\n      if (event.includes(\"S\")) {\n        hasSquat = true;\n      }\n      if (event.includes(\"B\")) {\n        hasBench = true;\n      }\n      if (event.includes(\"D\")) {\n        hasDeadlift = true;\n      }\n    }\n\n    // Check whether the first attempt already occurred.\n    const disableSquatWeight = !hasSquat || entry.squatStatus[0] !== 0;\n    const disableBenchWeight = !hasBench || entry.benchStatus[0] !== 0;\n    const disableDeadliftWeight = !hasDeadlift || entry.deadliftStatus[0] !== 0;\n\n    // Only show the Flight selector if the Weigh-ins page is non-embedded.\n    let flight = entry.flight;\n    if (this.props.inLiftingPage !== true) {\n      // Can be undefined.\n      flight = (\n        <FormControl defaultValue={entry.flight} componentClass=\"select\" onChange={this.updateRegistrationFlight}>\n          <option value=\"A\">A</option>\n          <option value=\"B\">B</option>\n          <option value=\"C\">C</option>\n          <option value=\"D\">D</option>\n          <option value=\"E\">E</option>\n          <option value=\"F\">F</option>\n          <option value=\"G\">G</option>\n          <option value=\"H\">H</option>\n        </FormControl>\n      );\n    }\n\n    return (\n      <tr>\n        <td>{entry.platform}</td>\n        <td>{flight}</td>\n        <td>{entry.name}</td>\n\n        <td>\n          <ValidatedTextInput\n            initialValue={entry.age === 0 ? \"\" : String(entry.age)}\n            placeholder=\"Age\"\n            getValidationState={this.validateAge}\n            onSuccess={this.updateRegistrationAge}\n          />\n        </td>\n\n        <td>\n          <WeightInput id={this.props.id} field=\"bodyweightKg\" placeholder=\"Bwt\" disabled={false} />\n        </td>\n\n        <td>\n          <ValidatedTextInput\n            initialValue={entry.squatRackInfo}\n            placeholder={hasSquat ? \"S.Rack\" : undefined}\n            disabled={!hasSquat}\n            getValidationState={this.validateRack}\n            onSuccess={this.updateRegistrationSquatRackInfo}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"S\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasSquat ? \"Squat\" : undefined}\n            disabled={disableSquatWeight}\n          />\n        </td>\n\n        <td>\n          <ValidatedTextInput\n            initialValue={entry.benchRackInfo}\n            placeholder={hasBench ? \"B.Rack\" : undefined}\n            disabled={!hasBench}\n            getValidationState={this.validateRack}\n            onSuccess={this.updateRegistrationBenchRackInfo}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"B\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasBench ? \"Bench\" : undefined}\n            disabled={disableBenchWeight}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"D\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasDeadlift ? \"Dead\" : undefined}\n            disabled={disableDeadliftWeight}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  return {\n    meet: state.meet,\n    entry: entry\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    updateRegistration: (entryId: number, obj: $Shape<Entry>) => dispatch(updateRegistration(entryId, obj))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LifterRow);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Weigh-ins page, contained by the WeighinsContainer.\n// The Weigh-ins page updates more information in the Registration state.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel } from \"react-bootstrap\";\nimport { getLiftersOnDay } from \"../../logic/entry\";\nimport LifterTable from \"./LifterTable\";\nimport LifterRow from \"./LifterRow\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\n// For use when embedded inside the Lifting page.\ninterface OwnProps {\n  day?: number;\n  platform?: number;\n  inLiftingPage?: boolean; // The weigh-ins page can be embedded.\n}\n\ninterface StateProps {\n  entries: Array<Entry>;\n}\n\ntype Props = $ReadOnly<OwnProps> & $ReadOnly<StateProps>;\n\nclass WeighinsView extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.getNumDaysFromEntries = this.getNumDaysFromEntries.bind(this);\n  }\n\n  // Figure out how many days there are by looking at the entries themselves.\n  //\n  // The meet page information may be unreliable: someone might have created\n  // a second day, added a lifter to it, then removed the second day without\n  // yet updating that lifter.\n  //\n  // This is an attempt to make that error more obvious, so it can be corrected.\n  getNumDaysFromEntries = () => {\n    let max_day = 0;\n    const entries = this.props.entries;\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n      if (entry.day > max_day) {\n        max_day = entry.day;\n      }\n    }\n    return max_day;\n  };\n\n  render() {\n    // Determine whether this is being shown embedded in the Lifting page.\n    const inLiftingPage = this.props.inLiftingPage === true;\n\n    // Make a separate panel for each day.\n    const numDays = this.getNumDaysFromEntries();\n    let dayPanels = [];\n    for (let i = 1; i <= numDays; i++) {\n      const lifters = getLiftersOnDay(this.props.entries, i);\n\n      // Skip if the OwnProps excluded this selection.\n      if (lifters.length === 0) {\n        continue;\n      }\n\n      // Present the lifters in sorted order.\n      lifters.sort((a, b) => {\n        if (a.platform !== b.platform) return a.platform - b.platform;\n        if (a.flight !== b.flight) return a.flight < b.flight ? -1 : 1;\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;\n        return 0;\n      });\n\n      dayPanels.push(\n        <Panel key={i}>\n          <Panel.Heading>Day {i} Weigh-ins</Panel.Heading>\n          <Panel.Body>\n            <LifterTable entries={lifters} rowRenderer={LifterRow} inLiftingPage={inLiftingPage} />\n          </Panel.Body>\n        </Panel>\n      );\n    }\n\n    // If there are no days thus far, show a default warning panel.\n    if (dayPanels.length === 0) {\n      dayPanels.push(\n        <Panel key={0} bsStyle=\"info\">\n          <Panel.Heading>Waiting for Registration</Panel.Heading>\n          <Panel.Body>Add lifters on the Registration page before weighing them in.</Panel.Body>\n        </Panel>\n      );\n    }\n\n    return <div style={marginStyle}>{dayPanels}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const { day, platform } = ownProps;\n  let entries = state.registration.entries;\n\n  // Filter if requested by the OwnProps.\n  if (typeof day === \"number\" && typeof platform === \"number\") {\n    entries = entries.filter(e => e.day === day && e.platform === platform);\n  }\n\n  return { entries };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(WeighinsView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Weighins page.\n\nimport React from \"react\";\nimport WeighinsView from \"../components/weighins/WeighinsView\";\n\nclass WeighinsContainer extends React.Component<{}> {\n  render() {\n    return <WeighinsView />;\n  }\n}\n\nexport default WeighinsContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The top bar of the Lifting page, containing huge text about the current lifter.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState, RegistrationState } from \"../../types/stateTypes\";\n\nimport styles from \"./TopBar.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId?: number;\n}\n\ninterface StateProps {\n  registration: RegistrationState;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass LiftingHeader extends React.Component<Props> {\n  render() {\n    // Defaults, in case of no lifter.\n    let lifterName = \"Flight Complete\";\n    let divisionsStr = \"\";\n\n    // In the case of a lifter, set fields.\n    if (this.props.currentEntryId !== null && this.props.currentEntryId !== undefined) {\n      const idx = this.props.registration.lookup[this.props.currentEntryId];\n      const entry = this.props.registration.entries[idx];\n      lifterName = entry.name;\n\n      if (entry.age > 0) {\n        divisionsStr += \" / \" + entry.age;\n      }\n      if (entry.divisions.length > 0) {\n        divisionsStr += \" / \" + entry.divisions.join(\", \");\n      }\n    }\n\n    return (\n      <div className={styles.topBar}>\n        <span className={styles.lifterName}>{lifterName}</span>\n        <span className={styles.divisions}>{divisionsStr}</span>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    registration: state.registration\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingHeader);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { kg2lbs, displayWeight } from \"../logic/units\";\n\nimport { PlateColors } from \"../constants/plateColors\";\n\nimport type { Plate, LoadedPlate } from \"../types/dataTypes\";\n\n// Convert from kg to lbs with rounding to 2 decimal places.\n// It's OK that this is slow, since it rarely executes.\nconst safeKg2Lbs = (kg: number): number => {\n  return Number(displayWeight(kg2lbs(kg)));\n};\n\n// Returns a list of plate weights in loading order.\n// Any unloadable remainder is reported as a final number with a negative value.\nexport const selectPlates = (\n  loadingKg: number,\n  barAndCollarsWeightKg: number,\n  plates: $ReadOnlyArray<Plate>,\n  inKg: boolean\n): Array<LoadedPlate> => {\n  // Flow doesn't like it when arguments get redefined.\n  let loadingAny = loadingKg;\n  let barAndCollarsWeightAny = barAndCollarsWeightKg;\n  let platesAny = plates;\n\n  // Convert to pounds, avoiding floating point errors.\n  if (inKg === false) {\n    loadingAny = safeKg2Lbs(loadingKg);\n    barAndCollarsWeightAny = safeKg2Lbs(barAndCollarsWeightKg);\n    platesAny = plates.map(x => ({ ...x, weightKg: safeKg2Lbs(x.weightKg) }));\n  }\n\n  // Sort a copy of the platesAny array by descending weight.\n  const sortedPlates = platesAny.slice().sort((a, b) => {\n    return b.weightKg - a.weightKg;\n  });\n\n  let sideWeightKg = (loadingAny - barAndCollarsWeightAny) / 2;\n  let loading: Array<LoadedPlate> = [];\n\n  // Run through each plate in order, applying as many of that plate as will fit.\n  for (let i = 0; i < sortedPlates.length; i++) {\n    let { weightKg, pairCount, color } = sortedPlates[i];\n    while (pairCount > 0 && weightKg <= sideWeightKg) {\n      pairCount--;\n      sideWeightKg -= weightKg;\n      loading.push({ weightAny: weightKg, isAlreadyLoaded: false, color: color });\n    }\n  }\n\n  // Report any remainder as a negative number.\n  if (sideWeightKg > 0) {\n    loading.push({ weightAny: -sideWeightKg, isAlreadyLoaded: false, color: PlateColors.PLATE_DEFAULT_RED });\n  }\n  return loading;\n};\n\n// Helper function: like Array.findIndex(), but starting from a specific index.\nconst findWeightFrom = (loading: Array<LoadedPlate>, startFrom: number, weight: number): number => {\n  for (let i = startFrom; i < loading.length; i++) {\n    if (loading[i].weightAny === weight) return i;\n  }\n  return -1;\n};\n\n// Sets the 'isAlreadyLoaded' property of each LoadedPlate relative to another loading.\n//\n// Both 'loading' and 'relativeTo' are sorted in non-ascending order of weight.\nexport const makeLoadingRelative = (loading: Array<LoadedPlate>, relativeTo: Array<LoadedPlate>): void => {\n  let finger = 0; // Increasing index into the relativeTo array.\n\n  // For each plate in the loading, look for a matching plate in relativeTo[finger..].\n  // When found, move the finger past that point.\n  for (let i = 0; i < loading.length; i++) {\n    let loadedPlate = loading[i];\n    const index = findWeightFrom(relativeTo, finger, loadedPlate.weightAny);\n    if (index >= 0) {\n      finger = index + 1;\n      loadedPlate.isAlreadyLoaded = true;\n    }\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This is the widget that gives a visual display of the weights on the bar,\n// used by the loading crew.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { displayWeight } from \"../../logic/units\";\nimport { PlateColors } from \"../../constants/plateColors\";\n\nimport type { Lift, LoadedPlate } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./BarLoad.module.scss\";\n\ninterface OwnProps {\n  loading: Array<LoadedPlate>;\n  rackInfo: string;\n  inKg: boolean;\n}\n\ninterface StateProps {\n  lift: Lift;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass BarLoad extends React.Component<Props> {\n  weightKgToStyle = (weightKg: number): any => {\n    switch (weightKg) {\n      case 50:\n        return styles.kg50;\n      case 25:\n        return styles.kg25;\n      case 20:\n        return styles.kg20;\n      case 15:\n        return styles.kg15;\n      case 10:\n        return styles.kg10;\n      case 5:\n        return styles.kg5;\n      case 2.5:\n        return styles.kg2p5;\n      case 1.25:\n        return styles.kg1p25;\n      case 1:\n        return styles.kg1;\n      case 0.75:\n        return styles.kg0p75;\n      case 0.5:\n        return styles.kg0p5;\n      case 0.25:\n        return styles.kg0p25;\n      default:\n        return styles.error;\n    }\n  };\n\n  weightLbsToStyle = (weightLbs: number): any => {\n    switch (weightLbs) {\n      case 100:\n        return styles.lbs100;\n      case 55:\n        return styles.lbs55;\n      case 45:\n        return styles.lbs45;\n      case 35:\n        return styles.lbs35;\n      case 25:\n        return styles.lbs25;\n      case 10:\n        return styles.lbs10;\n      case 5:\n        return styles.lbs5;\n      case 2.5:\n        return styles.lbs2p5;\n      case 1.25:\n        return styles.lbs1p25;\n      case 0.5:\n        return styles.lbs0p5;\n      default:\n        return styles.error;\n    }\n  };\n\n  weightAnyToText = (weightAny: number): string => {\n    switch (weightAny) {\n      case 1.25:\n        return \"1¼\";\n      case 0.75:\n        return \"¾\";\n      case 0.5:\n        return \"½\";\n      case 0.25:\n        return \"¼\";\n      default:\n        return String(weightAny);\n    }\n  };\n\n  // Turns the selectPlates() array into divs.\n  renderPlates = () => {\n    const plates: Array<LoadedPlate> = this.props.loading;\n    const inKg: boolean = this.props.inKg;\n\n    let divs = [];\n    let i = 0;\n\n    // Iterate on a group of plates of the same weight at a time.\n    while (i < plates.length) {\n      const weightAny = plates[i].weightAny;\n\n      // If the weight is negative, it's an error report.\n      if (weightAny < 0) {\n        divs.push(\n          <div key={\"error\"} className={styles.error}>\n            ?{displayWeight(-1 * weightAny)}\n          </div>\n        );\n        break;\n      }\n\n      // Count how many times this same plate kind appears consecutively.\n      let plateCount = 1;\n      for (let j = i + 1; j < plates.length && plates[j].weightAny === weightAny; j++) {\n        plateCount++;\n      }\n\n      // If that plate is large and occurs a bunch, show a counter.\n      const showCounter = plateCount >= 3;\n\n      // Push each of the plates individually.\n      for (let j = 0; j < plateCount; j++) {\n        const plate = plates[i + j];\n        const counter = String(j + 1);\n\n        // Light backgrounds need dark text.\n        const is_light =\n          plate.color === PlateColors.PLATE_DEFAULT_WHITE || plate.color === PlateColors.PLATE_DEFAULT_YELLOW;\n\n        const style = {\n          backgroundColor: plate.color,\n          opacity: plate.isAlreadyLoaded ? 0.25 : undefined,\n          color: is_light ? \"#232323\" : \"#FFFFFF\",\n          // White plates need a border.\n          border: plate.color === PlateColors.PLATE_DEFAULT_WHITE ? \"1.5px solid #232323\" : undefined\n        };\n        divs.push(\n          <div\n            key={weightAny + \"-\" + counter}\n            className={inKg ? this.weightKgToStyle(weightAny) : this.weightLbsToStyle(weightAny)}\n            style={style}\n          >\n            <div>{this.weightAnyToText(weightAny)}</div>\n            {showCounter ? <div>{counter}</div> : null}\n          </div>\n        );\n      }\n\n      i += plateCount;\n    }\n\n    return divs;\n  };\n\n  render() {\n    // Only show rack info for lifts that use a rack.\n    let rackInfo = null;\n    if (this.props.lift !== \"D\") {\n      rackInfo = (\n        <div key={this.props.rackInfo} className={styles.rackInfo}>\n          Rack {this.props.rackInfo}\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.bar} />\n        {this.renderPlates()}\n        <div className={styles.collar} />\n        <div className={styles.bar} />\n        {rackInfo}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    lift: state.lifting.lift\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BarLoad);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The left panel on the lifting page, showing information about the current lifter\n// and helpful information for the loading crew.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { selectPlates, makeLoadingRelative } from \"../../logic/barLoad\";\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { kg2lbs, displayWeightOnePlace } from \"../../logic/units\";\n\nimport BarLoad from \"./BarLoad\";\n\nimport styles from \"./LeftPanel.module.scss\";\n\nimport type { Entry, LoadedPlate, Plate } from \"../../types/dataTypes\";\nimport type { GlobalState, LiftingState, RegistrationState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId?: number;\n  nextEntryId?: number;\n  nextAttemptOneIndexed?: number;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  showAlternateUnits: boolean;\n  squatBarAndCollarsWeightKg: number;\n  benchBarAndCollarsWeightKg: number;\n  deadliftBarAndCollarsWeightKg: number;\n  plates: Array<Plate>;\n  registration: RegistrationState;\n  lifting: LiftingState;\n}\n\ntype Props = OwnProps & StateProps;\n\ninterface BarLoadOptions {\n  weightKg: number;\n  weightLbs: number;\n  rackInfo: string;\n}\n\nclass LeftPanel extends React.Component<Props> {\n  getBarLoadProps = (entryId?: number, attemptOneIndexed?: number): BarLoadOptions => {\n    const lift = this.props.lifting.lift;\n    const fieldKg = liftToAttemptFieldName(lift);\n\n    // Defaults, in case of no lifter.\n    if (entryId === null || entryId === undefined || attemptOneIndexed === null || attemptOneIndexed === undefined) {\n      return { weightKg: 0, weightLbs: 0, rackInfo: \"\" };\n    }\n\n    const idx = this.props.registration.lookup[entryId];\n    const entry = this.props.registration.entries[idx];\n\n    const weightKg = entry[fieldKg][attemptOneIndexed - 1];\n    const weightLbs = kg2lbs(weightKg);\n\n    let rackInfo = \"\";\n    if (lift === \"S\") rackInfo = entry.squatRackInfo;\n    if (lift === \"B\") rackInfo = entry.benchRackInfo;\n\n    return { weightKg, weightLbs, rackInfo };\n  };\n\n  getBarAndCollarsWeightKg = (): number => {\n    switch (this.props.lifting.lift) {\n      case \"S\":\n        return this.props.squatBarAndCollarsWeightKg;\n      case \"B\":\n        return this.props.benchBarAndCollarsWeightKg;\n      case \"D\":\n        return this.props.deadliftBarAndCollarsWeightKg;\n      default:\n        return 0;\n    }\n  };\n\n  render() {\n    const current = this.getBarLoadProps(this.props.currentEntryId, this.props.attemptOneIndexed);\n    const next = this.getBarLoadProps(this.props.nextEntryId, this.props.nextAttemptOneIndexed);\n\n    // Show one decimal point, and omit it if possible.\n    const weightKgText = displayWeightOnePlace(current.weightKg);\n    const weightLbsText = displayWeightOnePlace(current.weightLbs);\n\n    const barAndCollarsWeightKg = this.getBarAndCollarsWeightKg();\n\n    // Calculate both loadings.\n    const currentLoading: Array<LoadedPlate> = selectPlates(\n      current.weightKg,\n      barAndCollarsWeightKg,\n      this.props.plates,\n      this.props.inKg\n    );\n    const nextLoading: Array<LoadedPlate> = selectPlates(\n      next.weightKg,\n      barAndCollarsWeightKg,\n      this.props.plates,\n      this.props.inKg\n    );\n\n    // Set the next loading relative to the current loading.\n    if (next.weightKg >= current.weightKg) {\n      makeLoadingRelative(nextLoading, currentLoading);\n    }\n\n    const nextBarLoad =\n      next.weightKg === 0 ? null : (\n        <div className={styles.loadingBar}>\n          <div className={styles.nextText}>NEXT UP</div>\n          <div className={styles.barArea}>\n            <BarLoad\n              key={String(next.weightKg) + next.rackInfo}\n              loading={nextLoading}\n              rackInfo={next.rackInfo}\n              inKg={this.props.inKg}\n            />\n          </div>\n        </div>\n      );\n\n    let attemptText = this.props.inKg ? weightKgText + \"kg\" : weightLbsText + \"lb\";\n    if (this.props.showAlternateUnits) {\n      attemptText += \" / \";\n      attemptText += this.props.inKg ? weightLbsText + \"lb\" : weightKgText + \"kg\";\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.activeCard}>\n          <div className={styles.loadingBar}>\n            <div className={styles.attemptText}>{attemptText}</div>\n            <div className={styles.barArea}>\n              <BarLoad\n                key={String(current.weightKg) + current.rackInfo}\n                loading={currentLoading}\n                rackInfo={current.rackInfo}\n                inKg={this.props.inKg}\n              />\n            </div>\n          </div>\n        </div>\n        {nextBarLoad}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    inKg: state.meet.inKg,\n    showAlternateUnits: state.meet.showAlternateUnits,\n    squatBarAndCollarsWeightKg: state.meet.squatBarAndCollarsWeightKg,\n    benchBarAndCollarsWeightKg: state.meet.benchBarAndCollarsWeightKg,\n    deadliftBarAndCollarsWeightKg: state.meet.deadliftBarAndCollarsWeightKg,\n    plates: state.meet.plates,\n    registration: state.registration,\n    lifting: state.lifting\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LeftPanel);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// An editable component for attempt manipulation in the LiftingContent.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FormControl, FormGroup } from \"react-bootstrap\";\n\nimport { liftToAttemptFieldName, liftToStatusFieldName } from \"../../logic/entry\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\nimport { kg2lbs, lbs2kg, displayWeight } from \"../../logic/units\";\n\nimport type { Entry, Lift } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingTable.module.scss\";\n\ninterface StateProps {\n  inKg: boolean;\n}\n\ninterface OwnProps {\n  entry: Entry;\n  lift: Lift;\n  attemptOneIndexed: number;\n  id: ?string; // Optional global id for the FormControl.\n}\n\ninterface DispatchProps {\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => any;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\ninterface InternalState {\n  lastGoodValue: string;\n  value: string;\n}\n\nclass AttemptInput extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    const fieldKg = liftToAttemptFieldName(this.props.lift);\n    const weightKg: number = this.props.entry[fieldKg][this.props.attemptOneIndexed - 1];\n\n    let weightStr = \"\";\n    if (weightKg !== 0) {\n      weightStr = displayWeight(this.props.inKg ? weightKg : kg2lbs(weightKg));\n    }\n\n    this.state = {\n      lastGoodValue: weightStr,\n      value: weightStr\n    };\n  }\n\n  getValidationState = () => {\n    const { value } = this.state;\n    if (value === \"\") return null;\n\n    // Handle all errors before all warnings.\n    // Check that the input is a number.\n    const asNumber = Number(value);\n    if (isNaN(asNumber)) return \"error\";\n    if (!isFinite(asNumber)) return \"error\";\n    if (asNumber < 0) return \"error\";\n\n    // The bar weight must be monotonically increasing between attempts.\n    if (this.props.attemptOneIndexed > 1) {\n      const asKg = this.props.inKg ? asNumber : lbs2kg(asNumber);\n\n      const entry = this.props.entry;\n      const fieldKg = liftToAttemptFieldName(this.props.lift);\n      const fieldStatus = liftToStatusFieldName(this.props.lift);\n\n      const prevAttemptOneIndexed = this.props.attemptOneIndexed - 1;\n      const prevKg = entry[fieldKg][prevAttemptOneIndexed - 1];\n      const prevStatus = entry[fieldStatus][prevAttemptOneIndexed - 1];\n\n      // The previous weight cannot be greater than the current weight.\n      if (prevKg > asKg) return \"error\";\n\n      // The current weight cannot repeat a successful attempt.\n      if (prevKg === asKg && prevStatus === 1) return \"error\";\n\n      // However, they can be equal if the previous attempt was failed.\n      if (prevKg === asKg && prevStatus !== -1) return \"warning\";\n    }\n\n    if (asNumber % 2.5 !== 0) return \"warning\";\n    return null;\n  };\n\n  handleKeyDown = event => {\n    if (event.key === \"Enter\") {\n      event.target.blur();\n    }\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n    let fixups = value.replace(\",\", \".\").replace(\" \", \"\");\n\n    // Dvorak \"e\" corresponds to QWERTY \".\", but also is used in exponential\n    // notation, which is a fairly impactful typo.\n    fixups = value.replace(\"e\", \".\");\n\n    this.setState({ value: fixups });\n  };\n\n  handleBlur = event => {\n    if (this.getValidationState() === \"error\") {\n      this.setState({ value: this.state.lastGoodValue });\n      return;\n    }\n\n    const entryId = this.props.entry.id;\n    const lift = this.props.lift;\n    const attemptOneIndexed = this.props.attemptOneIndexed;\n    const asNumber = Number(this.state.value);\n    const weightKg = this.props.inKg ? asNumber : lbs2kg(asNumber);\n\n    this.props.enterAttempt(entryId, lift, attemptOneIndexed, weightKg);\n    this.setState({ lastGoodValue: this.state.value });\n  };\n\n  render() {\n    // Only use the \"id\" prop if it's a string. It's an optional prop.\n    const id: string | null = typeof this.props.id === \"string\" ? this.props.id : null;\n\n    return (\n      <FormGroup validationState={this.getValidationState()} style={{ marginBottom: 0 }}>\n        <FormControl\n          id={id}\n          type=\"text\"\n          placeholder=\"\"\n          value={this.state.value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          className={styles.attemptInput}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => ({\n  enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n    dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AttemptInput);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { liftToAttemptFieldName, liftToStatusFieldName, MAX_ATTEMPTS } from \"./entry\";\n\nimport type { LiftingOrder, Entry, FieldKg, FieldStatus } from \"../types/dataTypes\";\nimport type { LiftingState } from \"../types/stateTypes\";\n\n// Helper function: for a given entry, see what attempt number would be next.\n//\n// Returns a number >1 if the entry is still lifting, representing the next attempt.\n// Returns zero if the entry does not have any pending attempts.\nconst getNextAttemptNumberForEntry = (entry: Entry, fieldKg: FieldKg, fieldStatus: FieldStatus): number => {\n  const weightsKg = entry[fieldKg];\n  const statuses = entry[fieldStatus];\n\n  // Lifters only set the next attempt, so loop backwards,\n  // looking for the first attempt that meets the criteria.\n  for (var i = MAX_ATTEMPTS - 1; i >= 0; i--) {\n    if (weightsKg[i] !== 0 && statuses[i] === 0) {\n      return i + 1;\n    }\n  }\n  return 0;\n};\n\n// Determine the current active attempt for the current lift.\n//\n// An attempt is active if either:\n// 1. It has been overridden by the Attempt selector.\n// 2. There exists an attempt of that number with no success/failure value,\n//    and there is no lower attempt number with that property.\n//\n// Returns a number in the (inclusive) range of [1, MAX_ATTEMPTS].\n// If there is not enough data to make a decision, returns 1.\nconst getActiveAttemptNumber = (entriesInFlight: Array<Entry>, lifting: LiftingState): number => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  // Allow manual override.\n  if (lifting.overrideAttempt !== null) {\n    return Number(lifting.overrideAttempt);\n  }\n\n  // Iterate in reverse, looking for the earliest attempt that hasn't been lifted.\n  let earliestAttemptOneIndexed = MAX_ATTEMPTS + 1;\n  for (var i = 0; i < entriesInFlight.length; i++) {\n    const entry = entriesInFlight[i];\n    const next = getNextAttemptNumberForEntry(entry, fieldKg, fieldStatus);\n    // Zero return value means \"no pending attempts for this entry.\"\n    if (next > 0 && next < earliestAttemptOneIndexed) {\n      earliestAttemptOneIndexed = next;\n    }\n  }\n\n  // In the case of no pending lifts, just default to first attempt.\n  if (earliestAttemptOneIndexed === MAX_ATTEMPTS + 1) {\n    return 1;\n  }\n  return earliestAttemptOneIndexed;\n};\n\n// Helper function for recursive comparison.\nexport const compareEntriesByAttempt = (a: Entry, b: Entry, fieldKg: FieldKg, attemptOneIndexed: number): number => {\n  const aKg = a[fieldKg][attemptOneIndexed - 1];\n  const bKg = b[fieldKg][attemptOneIndexed - 1];\n\n  // If non-equal, sort by weight, ascending.\n  if (aKg !== bKg) return aKg - bKg;\n\n  // If the federation uses lot numbers, break ties using lot.\n  if (a.lot !== 0 && b.lot !== 0) return a.lot - b.lot;\n\n  // If this is not the first attempt, preserve the order from the last attempt.\n  if (attemptOneIndexed > 1) {\n    return compareEntriesByAttempt(a, b, fieldKg, attemptOneIndexed - 1);\n  }\n\n  // Try to break ties using bodyweight, with the lighter lifter going first.\n  if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n  // If we've run out of properties by which to compare them, resort to Name.\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\n// Helper function: performs an in-place sort on an array of entries.\n// Assumes that zero entries are not mixed in with non-zero entries.\nexport const orderEntriesByAttempt = (\n  entries: Array<Entry>,\n  fieldKg: FieldKg,\n  attemptOneIndexed: number\n): Array<Entry> => {\n  return entries.sort((a, b) => {\n    return compareEntriesByAttempt(a, b, fieldKg, attemptOneIndexed);\n  });\n};\n\n// Returns a copy of the entries in lifting order for the current attempt.\nconst orderEntriesForAttempt = (\n  entriesInFlight: Array<Entry>,\n  lifting: LiftingState,\n  attemptOneIndexed: number\n): Array<Entry> => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n\n  const attemptZeroIndexed = attemptOneIndexed - 1;\n  const existsNextAttempt = attemptOneIndexed + 1 <= MAX_ATTEMPTS;\n  const existsPrevAttempt = attemptOneIndexed > 1;\n\n  // Divide the entries into disjoint groups:\n  let byNextAttempt: Array<Entry> = []; // Entries sorted by their next attempt.\n  let byThisAttempt: Array<Entry> = []; // Entries sorted by this attempt.\n  let byPrevAttempt: Array<Entry> = []; // Entries sorted by previous attempt.\n  let notLifting: Array<Entry> = []; // Entries that don't have this or next attempts in.\n\n  for (let i = 0; i < entriesInFlight.length; i++) {\n    const entry = entriesInFlight[i];\n\n    if (existsNextAttempt && entry[fieldKg][attemptZeroIndexed + 1] !== 0) {\n      byNextAttempt.push(entry);\n    } else if (entry[fieldKg][attemptZeroIndexed] !== 0) {\n      byThisAttempt.push(entry);\n    } else if (existsPrevAttempt && entry[fieldKg][attemptZeroIndexed - 1] !== 0) {\n      byPrevAttempt.push(entry);\n    } else {\n      notLifting.push(entry);\n    }\n  }\n\n  // Perform sorting on the relative groups.\n  if (existsNextAttempt) {\n    orderEntriesByAttempt(byNextAttempt, fieldKg, attemptOneIndexed + 1);\n  }\n  orderEntriesByAttempt(byThisAttempt, fieldKg, attemptOneIndexed);\n  if (existsPrevAttempt) {\n    orderEntriesByAttempt(byPrevAttempt, fieldKg, attemptOneIndexed - 1);\n  }\n  orderEntriesByAttempt(notLifting, fieldKg, attemptOneIndexed);\n\n  // Arrange these three groups consecutively.\n  return Array.prototype.concat(byNextAttempt, byThisAttempt, byPrevAttempt, notLifting);\n};\n\n// Returns either the current entry ID or null if no active entry.\n//\n// In the ordered entries, the earliest lifter that hasn't gone yet is going.\n// This can be manually overridden by UI controls.\nconst getCurrentEntryId = (\n  lifting: LiftingState,\n  orderedEntries: Array<Entry>,\n  attemptOneIndexed: number\n): number | null => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  if (lifting.overrideEntryId !== null) {\n    return Number(lifting.overrideEntryId);\n  }\n\n  for (let i = 0; i < orderedEntries.length; i++) {\n    const entry = orderedEntries[i];\n    const idx = attemptOneIndexed - 1;\n    if (entry[fieldKg][idx] !== 0 && entry[fieldStatus][idx] === 0) {\n      return entry.id;\n    }\n  }\n  return null;\n};\n\ntype NextEntryInfo = {\n  entryId: number,\n  attemptOneIndexed: number\n};\n\n// Returns either an Object of {entryId, attemptOneIndexed}, or null.\nconst getNextEntryInfo = (\n  lifting: LiftingState,\n  currentEntryId: number | null,\n  orderedEntries: Array<Entry>,\n  attemptOneIndexed: number\n): NextEntryInfo | null => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  if (currentEntryId === null) {\n    return null;\n  }\n\n  // Find the index of the currentEntryId in the orderedEntries.\n  const currentEntryIndex = orderedEntries.findIndex(e => e.id === currentEntryId);\n  if (currentEntryIndex === -1) {\n    return null;\n  }\n\n  // Walk forward, looking for additional valid attempts.\n  for (let i = currentEntryIndex + 1; i < orderedEntries.length; i++) {\n    const hasAttempt = orderedEntries[i][fieldKg][attemptOneIndexed - 1] !== 0;\n    const notTaken = orderedEntries[i][fieldStatus][attemptOneIndexed - 1] === 0;\n\n    if (hasAttempt && notTaken) {\n      return {\n        entryId: orderedEntries[i].id,\n        attemptOneIndexed: attemptOneIndexed\n      };\n    }\n  }\n\n  // If none were found walking forward, check the next attempt by wrapping around.\n  if (attemptOneIndexed + 1 > MAX_ATTEMPTS) {\n    return null;\n  }\n  const nextAttemptOneIndexed = attemptOneIndexed + 1;\n\n  for (let i = 0; i < currentEntryIndex; i++) {\n    const hasAttempt = orderedEntries[i][fieldKg][nextAttemptOneIndexed - 1] !== 0;\n    const notTaken = orderedEntries[i][fieldStatus][nextAttemptOneIndexed - 1] === 0;\n\n    if (hasAttempt && notTaken) {\n      return {\n        entryId: orderedEntries[i].id,\n        attemptOneIndexed: nextAttemptOneIndexed\n      };\n    }\n  }\n\n  return null;\n};\n\n// Main application logic. Resolves the LiftingState to a LiftingOrder.\nexport const getLiftingOrder = (entriesInFlight: Array<Entry>, lifting: LiftingState): LiftingOrder => {\n  const attemptOneIndexed = getActiveAttemptNumber(entriesInFlight, lifting);\n  const orderedEntries = orderEntriesForAttempt(entriesInFlight, lifting, attemptOneIndexed);\n  const currentEntryId = getCurrentEntryId(lifting, orderedEntries, attemptOneIndexed);\n  const nextEntryInfo = getNextEntryInfo(lifting, currentEntryId, orderedEntries, attemptOneIndexed);\n\n  return {\n    orderedEntries: orderedEntries,\n    attemptOneIndexed: attemptOneIndexed,\n    currentEntryId: currentEntryId,\n    nextAttemptOneIndexed: nextEntryInfo ? nextEntryInfo.attemptOneIndexed : null,\n    nextEntryId: nextEntryInfo ? nextEntryInfo.entryId : null\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the logic for calculating the division Place of a lifter, shared between\n// the Lifting page, the Rankings page, and data export code.\n//\n// The algorithm used is particularly bad -- the foremost goal was to make an interface\n// that allowed for maximum code reuse between the Rankings and Lifting pages,\n// which have slightly different needs.\n\nimport { getProjectedEventTotalKg, getFinalEventTotalKg, liftToAttemptFieldName } from \"./entry\";\nimport { compareEntriesByAttempt } from \"./liftingOrder\";\nimport { getWeightClassStr } from \"../reducers/meetReducer\";\n\nimport type { Sex, Event, Equipment, Entry, Lift } from \"../types/dataTypes\";\n\nexport type Place = number | \"DQ\";\n\n// Determines how the total is calculated.\ntype ResultsType = \"Projected\" | \"Final\";\n\n// Specifies a competition category under which entries can be ranked together.\nexport type Category = {\n  sex: Sex,\n  event: Event,\n  equipment: Equipment,\n  division: string,\n  weightClassStr: string\n};\n\n// Wraps up all the entries in a category with the category's descriptors.\nexport type CategoryResults = {\n  category: Category,\n  orderedEntries: Array<Entry>\n};\n\n// Generates a unique String out of a Category, for purposes of using as a Map key.\nconst categoryToKey = (category: Category): string => {\n  return JSON.stringify(category);\n};\nconst keyToCategory = (key: string): Category => {\n  return JSON.parse(key);\n};\n\n// Helper function for sortByPlaceInCategory().\n//\n// Determines the last successful Lift (for example, \"B\") for the Entry in\n// the given Event category.\n//\n// Lifters have already been checked to have a non-zero total.\nconst getLastSuccessfulLift = (event: Event, entry: Entry): Lift => {\n  // Iterate backwards over the Event types.\n  for (let i = event.length - 1; i >= 0; --i) {\n    const lift = event[i];\n    switch (lift) {\n      case \"S\":\n        if (entry.squatStatus.includes(1)) {\n          return \"S\";\n        }\n        break;\n      case \"B\":\n        if (entry.benchStatus.includes(1)) {\n          return \"B\";\n        }\n        break;\n      case \"D\":\n        if (entry.deadliftStatus.includes(1)) {\n          return \"D\";\n        }\n        break;\n      default:\n        return \"S\";\n    }\n  }\n  return \"S\";\n};\n\n// Helper function for sortByPlaceInCategory().\n//\n// Determines the last successful attempt (only counting the first three) for\n// the Entry for the given Lift.\n//\n// The caller already knows that a successful attempt was made, since it\n// passed getLastSuccessfulLift().\nconst getLastSuccessfulAttempt = (lift: Lift, entry: Entry): number => {\n  let statuses = null;\n  switch (lift) {\n    case \"S\":\n      statuses = entry.squatStatus;\n      break;\n    case \"B\":\n      statuses = entry.benchStatus;\n      break;\n    case \"D\":\n      statuses = entry.deadliftStatus;\n      break;\n    default:\n      (lift: empty) // eslint-disable-line\n      return 0;\n  }\n\n  // Consider only the first three attempts, in reverse.\n  for (let i = 2; i >= 0; --i) {\n    if (statuses[i] === 1) return i;\n  }\n  return 0;\n};\n\n// Returns a copy of the entries array sorted by Place.\n// All entries are assumed to be part of the same category.\nconst sortByPlaceInCategory = (entries: Array<Entry>, category: Category, type: ResultsType): Array<Entry> => {\n  const event = category.event;\n\n  // Clone the entries array to avoid modifying the original.\n  let clonedEntries = entries.slice();\n\n  // Sort in the given category, first place having the lowest index.\n  clonedEntries.sort((a, b) => {\n    let aTotal = 0;\n\n    // First sort by Total, higher sorting lower.\n    if (type === \"Projected\") {\n      aTotal = getProjectedEventTotalKg(a, event);\n      const bTotal = getProjectedEventTotalKg(b, event);\n      if (aTotal !== bTotal) return bTotal - aTotal;\n    } else if (type === \"Final\") {\n      aTotal = getFinalEventTotalKg(a, event);\n      const bTotal = getFinalEventTotalKg(b, event);\n      if (aTotal !== bTotal) return bTotal - aTotal;\n    }\n\n    // If totals are equal, sort by Bodyweight, lower sorting lower.\n    if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n    // If totals are zero, neither lifter took a successful attempt,\n    // so just sort arbitrarily by name.\n    if (aTotal === 0) {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      return 0;\n    }\n\n    // If totals are equal and bodyweights are equal, the winner is the\n    // lifter who reached the total first. Because our implementation is\n    // stateless and doesn't remember lifting order, this gets complicated.\n    //\n    // For purposes of simplicity, this is broken into cases.\n    //\n    // At this point, the logic requires that each lifter have taken at least\n    // one successful attempt -- this is validated by checking the total\n    // against zero above.\n    //\n    // Case 1: If the lifters' last successful lifts were for different Lifts,\n    //         then the lifter with the earlier lift in SBD order wins.\n    const aLastSuccessfulLift = getLastSuccessfulLift(event, a);\n    const bLastSuccessfulLift = getLastSuccessfulLift(event, b);\n    const aLastSuccessfulLiftIndex = [\"S\", \"B\", \"D\"].indexOf(aLastSuccessfulLift);\n    const bLastSuccessfulLiftIndex = [\"S\", \"B\", \"D\"].indexOf(bLastSuccessfulLift);\n    if (aLastSuccessfulLiftIndex !== bLastSuccessfulLiftIndex) {\n      return aLastSuccessfulLiftIndex - bLastSuccessfulLiftIndex;\n    }\n\n    // Case 2: If the lifters reached the total on the same lift but on different\n    //         attempts, the lifter with the earlier attempt wins.\n    const lift: Lift = aLastSuccessfulLift;\n    const aLastSuccessfulAttempt: number = getLastSuccessfulAttempt(lift, a);\n    const bLastSuccessfulAttempt: number = getLastSuccessfulAttempt(lift, b);\n    if (aLastSuccessfulAttempt !== bLastSuccessfulAttempt) {\n      return aLastSuccessfulAttempt - bLastSuccessfulAttempt;\n    }\n\n    // Case 3: If the lifters reached the total on the same lift and on the same\n    //         attempt, defer to the lifting order to determine who lifted first.\n    const attempt = aLastSuccessfulAttempt;\n    return compareEntriesByAttempt(a, b, liftToAttemptFieldName(lift), attempt);\n  });\n\n  return clonedEntries;\n};\n\n// Determines the sort order by Event.\nconst getEventSortOrder = (ev: Event): number => {\n  return [\"SBD\", \"BD\", \"SB\", \"SD\", \"S\", \"B\", \"D\"].indexOf(ev);\n};\n\n// Determines the sort order by Equipment.\nconst getEquipmentSortOrder = (eq: Equipment): number => {\n  return [\"Bare\", \"Sleeves\", \"Wraps\", \"Single-ply\", \"Multi-ply\"].indexOf(eq);\n};\n\n// Determines the sort order by Sex.\nconst getSexSortOrder = (sex: Sex): number => {\n  switch (sex) {\n    case \"F\":\n      return 0;\n    case \"M\":\n      return 1;\n    case \"Mx\":\n      return 2;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 3;\n  }\n};\n\n// Determines the sort (and therefore presentation) order for the Category Results.\n// The input array is sorted in-place; nothing is returned.\nexport const sortCategoryResults = (results: Array<CategoryResults>) => {\n  results.sort((a, b) => {\n    const catA = a.category;\n    const catB = b.category;\n\n    // First, sort by Sex.\n    const aSex = getSexSortOrder(catA.sex);\n    const bSex = getSexSortOrder(catB.sex);\n    if (aSex !== bSex) return aSex - bSex;\n\n    // Next, sort by Event.\n    const aEvent = getEventSortOrder(catA.event);\n    const bEvent = getEventSortOrder(catB.event);\n    if (aEvent !== bEvent) return aEvent - bEvent;\n\n    // Next, sort by Equipment.\n    const aEquipment = getEquipmentSortOrder(catA.equipment);\n    const bEquipment = getEquipmentSortOrder(catB.equipment);\n    if (aEquipment !== bEquipment) return aEquipment - bEquipment;\n\n    // Next, sort by Division as string.\n    if (catA.division < catB.division) return -1;\n    if (catA.division > catB.division) return 1;\n\n    // Finally, sort by WeightClass.\n    // Any SHW class should be placed at the end.\n    const aIsSHW: boolean = catA.weightClassStr.includes(\"+\");\n    const bIsSHW: boolean = catB.weightClassStr.includes(\"+\");\n    if (aIsSHW && !bIsSHW) return 1;\n    if (!aIsSHW && bIsSHW) return -1;\n    // parseInt() ignores the \"+\" at the end of SHW class strings.\n    const aWeightClass = catA.weightClassStr === \"\" ? 0 : parseInt(catA.weightClassStr);\n    const bWeightClass = catB.weightClassStr === \"\" ? 0 : parseInt(catB.weightClassStr);\n    return aWeightClass - bWeightClass;\n  });\n};\n\nconst mapSexToClasses = (sex: Sex, men: Array<number>, women: Array<number>, mx: Array<number>): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return men;\n    case \"F\":\n      return women;\n    case \"Mx\":\n      return mx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return men;\n  }\n};\n\n// Generates objects representing every present category of competition,\n// with each entry given a Place designation.\n//\n// The returned objects are sorted in intended order of presentation.\nconst getAllResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean,\n  type: ResultsType\n): Array<CategoryResults> => {\n  // Generate a map from category to the entries within that category.\n  // The map is populated by iterating over each entry and having the entry\n  // append itself to per-category lists.\n  let categoryMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    const e = entries[i];\n\n    // Remember consistent properties.\n    const sex = e.sex;\n    const classesForSex = mapSexToClasses(sex, weightClassesKgMen, weightClassesKgWomen, weightClassesKgMx);\n    const weightClassStr = getWeightClassStr(classesForSex, e.bodyweightKg);\n\n    // If the results combine Sleeves and Wraps, promote Sleeves to Wraps.\n    let equipment = e.equipment;\n    if (combineSleevesAndWraps && equipment === \"Sleeves\") {\n      equipment = \"Wraps\";\n    }\n\n    // Iterate over every combination of division and event, adding to the map.\n    for (let dividx = 0; dividx < e.divisions.length; dividx++) {\n      const division = e.divisions[dividx];\n\n      for (let evidx = 0; evidx < e.events.length; evidx++) {\n        const event = e.events[evidx];\n        const category = { sex, event, equipment, division, weightClassStr };\n        const key = categoryToKey(category);\n\n        const catEntries = categoryMap.get(key);\n        catEntries === undefined ? categoryMap.set(key, [e]) : catEntries.push(e);\n      }\n    }\n  }\n\n  // Iterate over each category and assign a Place to the entries therein.\n  let results = [];\n  for (let [key, catEntries] of categoryMap) {\n    const category = keyToCategory(key);\n    const orderedEntries = sortByPlaceInCategory(catEntries, category, type);\n    results.push({ category, orderedEntries });\n  }\n\n  sortCategoryResults(results);\n  return results;\n};\n\nexport const getProjectedResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean\n): Array<CategoryResults> => {\n  return getAllResults(\n    entries,\n    weightClassesKgMen,\n    weightClassesKgWomen,\n    weightClassesKgMx,\n    combineSleevesAndWraps,\n    \"Projected\"\n  );\n};\n\nexport const getFinalResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean\n): Array<CategoryResults> => {\n  return getAllResults(\n    entries,\n    weightClassesKgMen,\n    weightClassesKgWomen,\n    weightClassesKgMx,\n    combineSleevesAndWraps,\n    \"Final\"\n  );\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The main component of the Lifting page, contained by the LiftingView.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport AttemptInput from \"./AttemptInput\";\n\nimport { getWeightClassStr, getWeightClassLbsStr } from \"../../reducers/meetReducer\";\nimport {\n  getProjectedTotalKg,\n  getFinalTotalKg,\n  getProjectedWilks,\n  getFinalWilks,\n  getProjectedIPFPoints,\n  getFinalIPFPoints,\n  getProjectedBodyweightMultiple,\n  getFinalBodyweightMultiple,\n  getProjectedDots,\n  getFinalDots,\n  getProjectedGlossbrenner,\n  getFinalGlossbrenner,\n  getProjectedNASAPoints,\n  getFinalNASAPoints,\n  getProjectedSchwartzMalone,\n  getFinalSchwartzMalone,\n  liftToAttemptFieldName,\n  liftToStatusFieldName\n} from \"../../logic/entry\";\n\nimport { getProjectedResults, getFinalResults } from \"../../logic/divisionPlace\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport type { CategoryResults } from \"../../logic/divisionPlace\";\nimport type { Entry, Lift, Sex } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState, LiftingState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingTable.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId?: number;\n}\n\ninterface StateProps {\n  meet: MeetState;\n  lifting: LiftingState;\n}\n\ntype Props = OwnProps & StateProps;\n\n// List of possible columns that can be rendered.\n// The main render() function decides what columns to render,\n// and communicates its selection with each row's renderer.\ntype ColumnType =\n  | \"Name\"\n  | \"Bodyweight\"\n  | \"WeightClass\"\n  | \"Division\"\n  | \"Lot\"\n  | \"Equipment\"\n  | \"Age\"\n  | \"S1\" | \"S2\" | \"S3\" | \"S4\" // eslint-disable-line\n  | \"B1\" | \"B2\" | \"B3\" | \"B4\" // eslint-disable-line\n  | \"D1\" | \"D2\" | \"D3\" | \"D4\" // eslint-disable-line\n  | \"BestSquat\" | \"BestBench\" // eslint-disable-line\n  | \"Spacer\"\n  | \"ProjectedTotal\"\n  | \"ProjectedPoints\"\n  | \"FinalTotal\"\n  | \"FinalPoints\"\n  | \"Place\";\n\n// This is a global for remembering the last AttemptInput that was rendered.\n// After the \"No Lift\" or \"Good Lift\" buttons are clicked, the last-rendered\n// AttemptInput is given focus by an event handler.\n//\n// This works because the LiftingTable is always re-rendered when one of\n// those buttons is clicked, and because there's only one LiftingTable.\nexport var globalFocusAttemptInputId: string | null = null;\n\n// The logic for globalFocusAttemptInputId is looking for the AttemptInput\n// that's all the way on the right, and as far down the table as possible.\nvar globalHighestAttemptInputAttempt: number = 0;\n\nclass LiftingTable extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n    this.renderBest3AttemptField = this.renderBest3AttemptField.bind(this);\n    this.renderAttemptField = this.renderAttemptField.bind(this);\n    this.renderCell = this.renderCell.bind(this);\n  }\n\n  renderBest3AttemptField = (entry, lift: Lift, columnType: ColumnType) => {\n    const fieldKg = liftToAttemptFieldName(lift);\n    const fieldStatus = liftToStatusFieldName(lift);\n\n    // Look for either the best lift or the lightest no-lift.\n    let best3 = 0.0;\n    let lightestFailed = 0.0;\n\n    for (let i = 0; i < 3; i++) {\n      const kg = entry[fieldKg][i];\n\n      if (entry[fieldStatus][i] === 1) {\n        best3 = Math.max(best3, kg);\n      } else if (entry[fieldStatus][i] === -1) {\n        lightestFailed = lightestFailed === 0 ? kg : Math.min(lightestFailed, kg);\n      }\n    }\n\n    // Render cells using attempt coloring.\n    if (best3 !== 0) {\n      const asNumber = this.props.meet.inKg ? best3 : kg2lbs(best3);\n      return (\n        <td key={columnType} className={styles.goodlift}>\n          {displayWeight(asNumber)}\n        </td>\n      );\n    }\n    if (lightestFailed !== 0) {\n      const asNumber = this.props.meet.inKg ? lightestFailed : kg2lbs(lightestFailed);\n      return (\n        <td key={columnType} className={styles.nolift}>\n          {displayWeight(asNumber)}\n        </td>\n      );\n    }\n\n    // Show an empty cell by default.\n    return <td key={columnType} />;\n  };\n\n  renderAttemptField = (entry, lift: Lift, attemptOneIndexed: number, columnType: ColumnType) => {\n    const fieldKg = liftToAttemptFieldName(lift);\n    const fieldStatus = liftToStatusFieldName(lift);\n\n    const kg = entry[fieldKg][attemptOneIndexed - 1];\n    const status = entry[fieldStatus][attemptOneIndexed - 1];\n    const wStr = displayWeight(this.props.meet.inKg ? kg : kg2lbs(kg));\n    const displayStr = kg === 0 ? \"\" : wStr;\n\n    // Get a unique ID for each AttemptInput.\n    // This is used in combination with the globalFocusAttemptInputId to give\n    // focus to the last-rendered AttemptInput after a button is clicked.\n    const id = \"AttemptInput-\" + entry.id + \"-\" + lift + attemptOneIndexed;\n\n    // If the lifter was manually selected, always show an AttemptInput.\n    // This allows manual correction of weights when a misload occurs,\n    // even though the lift has already been marked good lift / no lift.\n    if (this.props.lifting.overrideEntryId === entry.id && attemptOneIndexed === this.props.attemptOneIndexed) {\n      // Is this a better match for giving focus?\n      if (attemptOneIndexed >= globalHighestAttemptInputAttempt) {\n        globalHighestAttemptInputAttempt = attemptOneIndexed;\n        globalFocusAttemptInputId = id;\n      }\n\n      return (\n        <td key={columnType} className={styles.attemptInputCell}>\n          <AttemptInput id={id} entry={entry} lift={lift} attemptOneIndexed={attemptOneIndexed} />\n        </td>\n      );\n    }\n\n    // If the attempt was already made, render a colored text field.\n    // The weight cannot be changed after the fact.\n    if (status !== 0) {\n      const className = status === 1 ? styles.goodlift : styles.nolift;\n      const maybeNegative = status === 1 ? \"\" : \"-\";\n      return (\n        <td key={columnType} className={className}>\n          {maybeNegative}\n          {displayStr}\n        </td>\n      );\n    }\n\n    // If the attempt isn't for the current lift, just show the number.\n    if (lift !== this.props.lifting.lift) {\n      return <td key={columnType}>{displayStr}</td>;\n    }\n\n    // Was any previous attempt taken?\n    let anyPreviousAttemptTaken = false;\n    for (var i = 1; i < attemptOneIndexed; i++) {\n      if (entry[fieldStatus][i - 1] !== 0) {\n        anyPreviousAttemptTaken = true;\n        break;\n      }\n    }\n\n    // Show a text input box if either:\n    // 1. This column is for the current attempt, and the lifter has a previous attempt.\n    // 2. This column is for the next attempt, and the lifter took the current attempt.\n    // 3. For whatever reason, someone managed to specify a weight.\n    const currentAndHasPrevious = attemptOneIndexed === this.props.attemptOneIndexed && anyPreviousAttemptTaken;\n    const nextAndTookLast =\n      attemptOneIndexed === this.props.attemptOneIndexed + 1 &&\n      entry[fieldStatus][this.props.attemptOneIndexed - 1] !== 0;\n\n    if (kg !== 0 || currentAndHasPrevious || nextAndTookLast) {\n      // Is this a better match for giving focus?\n      if (attemptOneIndexed >= globalHighestAttemptInputAttempt) {\n        globalHighestAttemptInputAttempt = attemptOneIndexed;\n        globalFocusAttemptInputId = id;\n      }\n\n      return (\n        <td key={columnType} className={styles.attemptInputCell}>\n          <AttemptInput id={id} entry={entry} lift={lift} attemptOneIndexed={attemptOneIndexed} />\n        </td>\n      );\n    }\n\n    // Default handler.\n    return <td key={columnType}>{displayStr}</td>;\n  };\n\n  mapSexToClasses = (sex: Sex, meetState: MeetState): Array<number> => {\n    switch (sex) {\n      case \"M\":\n        return meetState.weightClassesKgMen;\n      case \"F\":\n        return meetState.weightClassesKgWomen;\n      case \"Mx\":\n        return meetState.weightClassesKgMx;\n      default:\n        (sex: empty) // eslint-disable-line\n        return meetState.weightClassesKgMen;\n    }\n  };\n\n  renderCell = (entry: Object, columnType: ColumnType, categoryResults: Array<CategoryResults>) => {\n    switch (columnType) {\n      case \"Name\": {\n        let cell = entry.name;\n\n        // Bold the name of the current lifter.\n        if (this.props.currentEntryId === entry.id) {\n          cell = <b>{entry.name}</b>;\n        }\n\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {cell}\n          </td>\n        );\n      }\n      case \"Bodyweight\": {\n        const bw = entry.bodyweightKg;\n        const bwStr = displayWeight(this.props.meet.inKg ? bw : kg2lbs(bw));\n        return <td key={columnType}>{bw === 0 ? null : bwStr}</td>;\n      }\n      case \"WeightClass\": {\n        const bw = entry.bodyweightKg;\n        const classesForSex = this.mapSexToClasses(entry.sex, this.props.meet);\n        const weightClass = this.props.meet.inKg\n          ? getWeightClassStr(classesForSex, bw)\n          : getWeightClassLbsStr(classesForSex, bw);\n        return <td key={columnType}>{bw === 0 ? null : weightClass}</td>;\n      }\n      case \"Division\": {\n        // Just show the first division in the list, if any.\n        // Changing this requires coordination with the \"Place\" column code.\n        const firstDiv = entry.divisions.length > 0 ? entry.divisions[0] : null;\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {firstDiv}\n          </td>\n        );\n      }\n      case \"Lot\": {\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {entry.lot === 0 ? \"\" : entry.lot}\n          </td>\n        );\n      }\n      case \"Equipment\": {\n        // Use shorter names to actually fit in the table.\n        let equipment = entry.equipment;\n        if (equipment === \"Single-ply\") equipment = \"Single\";\n        if (equipment === \"Multi-ply\") equipment = \"Multi\";\n        return <td key={columnType}>{equipment}</td>;\n      }\n      case \"Age\":\n        return <td key={columnType}>{entry.age}</td>;\n      case \"S1\":\n        return this.renderAttemptField(entry, \"S\", 1, columnType);\n      case \"S2\":\n        return this.renderAttemptField(entry, \"S\", 2, columnType);\n      case \"S3\":\n        return this.renderAttemptField(entry, \"S\", 3, columnType);\n      case \"S4\":\n        return this.renderAttemptField(entry, \"S\", 4, columnType);\n      case \"B1\":\n        return this.renderAttemptField(entry, \"B\", 1, columnType);\n      case \"B2\":\n        return this.renderAttemptField(entry, \"B\", 2, columnType);\n      case \"B3\":\n        return this.renderAttemptField(entry, \"B\", 3, columnType);\n      case \"B4\":\n        return this.renderAttemptField(entry, \"B\", 4, columnType);\n      case \"D1\":\n        return this.renderAttemptField(entry, \"D\", 1, columnType);\n      case \"D2\":\n        return this.renderAttemptField(entry, \"D\", 2, columnType);\n      case \"D3\":\n        return this.renderAttemptField(entry, \"D\", 3, columnType);\n      case \"D4\":\n        return this.renderAttemptField(entry, \"D\", 4, columnType);\n      case \"BestSquat\":\n        return this.renderBest3AttemptField(entry, \"S\", columnType);\n      case \"BestBench\":\n        return this.renderBest3AttemptField(entry, \"B\", columnType);\n      case \"Spacer\":\n        return <td key={columnType} className={styles.spacerCell} />;\n      case \"ProjectedTotal\": {\n        const totalKg = getProjectedTotalKg(entry);\n        const asNumber = this.props.meet.inKg ? totalKg : kg2lbs(totalKg);\n        return <td key={columnType}>{totalKg === 0 ? null : displayWeight(asNumber)}</td>;\n      }\n      case \"ProjectedPoints\": {\n        let points = 0;\n        if (this.props.meet.formula === \"Glossbrenner\") {\n          points = getProjectedGlossbrenner(entry);\n        } else if (this.props.meet.formula === \"Dots\") {\n          points = getProjectedDots(entry);\n        } else if (this.props.meet.formula === \"IPF Points\") {\n          const event = entry.events.length > 0 ? entry.events[0] : \"SBD\";\n          points = getProjectedIPFPoints(entry, event);\n        } else if (this.props.meet.formula === \"Wilks\") {\n          points = getProjectedWilks(entry);\n        } else if (this.props.meet.formula === \"Schwartz/Malone\") {\n          points = getProjectedSchwartzMalone(entry);\n        } else if (this.props.meet.formula === \"NASA Points\") {\n          points = getProjectedNASAPoints(entry);\n        } else if (this.props.meet.formula === \"Total\") {\n          return this.renderCell(entry, \"ProjectedTotal\", categoryResults);\n        } else if (this.props.meet.formula === \"Bodyweight Multiple\") {\n          points = getProjectedBodyweightMultiple(entry);\n        }\n        return <td key={columnType}>{points !== 0 ? points.toFixed(2) : null}</td>;\n      }\n      case \"FinalTotal\": {\n        const totalKg = getFinalTotalKg(entry);\n        const asNumber = this.props.meet.inKg ? totalKg : kg2lbs(totalKg);\n        return <td key={columnType}>{totalKg === 0 ? null : displayWeight(asNumber)}</td>;\n      }\n      case \"FinalPoints\": {\n        let points = 0;\n        if (this.props.meet.formula === \"Glossbrenner\") {\n          points = getFinalGlossbrenner(entry);\n        } else if (this.props.meet.formula === \"Dots\") {\n          points = getFinalDots(entry);\n        } else if (this.props.meet.formula === \"IPF Points\") {\n          const event = entry.events.length > 0 ? entry.events[0] : \"SBD\";\n          points = getFinalIPFPoints(entry, event);\n        } else if (this.props.meet.formula === \"Wilks\") {\n          points = getFinalWilks(entry);\n        } else if (this.props.meet.formula === \"Schwartz/Malone\") {\n          points = getFinalSchwartzMalone(entry);\n        } else if (this.props.meet.formula === \"NASA Points\") {\n          points = getFinalNASAPoints(entry);\n        } else if (this.props.meet.formula === \"Total\") {\n          return this.renderCell(entry, \"FinalTotal\", categoryResults);\n        } else if (this.props.meet.formula === \"Bodyweight Multiple\") {\n          points = getFinalBodyweightMultiple(entry);\n        }\n        return <td key={columnType}>{points !== 0 ? points.toFixed(2) : null}</td>;\n      }\n      case \"Place\": {\n        // If the lifter has no total, then don't report a place.\n        if (getFinalTotalKg(entry) === 0) return <td key={columnType} />;\n\n        // Just show the Place from the first division in the list.\n        // This is the same division as shown in the \"Division\" column.\n        if (entry.divisions.length === 0) return <td key={columnType} />;\n        const firstDiv = entry.divisions[0];\n\n        // Look at all the categories, and find the first one including this division\n        // and entry. Because the categories are in sorted order, SBD takes priority\n        // over B by default.\n        for (let i = 0; i < categoryResults.length; i++) {\n          const result = categoryResults[i];\n          if (result.category.division !== firstDiv) {\n            continue;\n          }\n\n          const catEntries = result.orderedEntries;\n          for (let j = 0; j < catEntries.length; j++) {\n            const catEntry = catEntries[j];\n\n            if (catEntry.id === entry.id) {\n              return <td key={columnType}>{j + 1}</td>;\n            }\n          }\n        }\n\n        return <td key={columnType} />; // Shouldn't happen.\n      }\n      default:\n        (columnType: empty); // eslint-disable-line\n        return <td key={columnType} />;\n    }\n  };\n\n  renderRows = (columns: Array<ColumnType>, categoryResults: Array<CategoryResults>) => {\n    const orderedEntries = this.props.orderedEntries;\n    const currentEntryId = this.props.currentEntryId;\n\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const entry = orderedEntries[i];\n\n      // Iterate over each columnType, handling each.\n      let cells = [];\n      for (let col = 0; col < columns.length; col++) {\n        const columnType = columns[col];\n        cells.push(this.renderCell(entry, columnType, categoryResults));\n      }\n\n      const isCurrent = entry.id === currentEntryId;\n      const rowClassName = isCurrent ? styles.current : \"\";\n      rows.push(\n        <tr key={entry.id} className={rowClassName}>\n          {cells}\n        </tr>\n      );\n    }\n    return rows;\n  };\n\n  getColumnHeaderString = (columnType: ColumnType): string => {\n    switch (columnType) {\n      case \"Name\":\n        return \"Name\";\n      case \"Bodyweight\":\n        return \"Bwt\";\n      case \"WeightClass\":\n        return \"Class\";\n      case \"Division\":\n        return \"Division\";\n      case \"Lot\":\n        return \"Lot\";\n      case \"Equipment\":\n        return \"Equip\";\n      case \"Age\":\n        return \"Age\";\n      case \"S1\":\n        return \"S1\";\n      case \"S2\":\n        return \"S2\";\n      case \"S3\":\n        return \"S3\";\n      case \"S4\":\n        return \"S4\";\n      case \"B1\":\n        return \"B1\";\n      case \"B2\":\n        return \"B2\";\n      case \"B3\":\n        return \"B3\";\n      case \"B4\":\n        return \"B4\";\n      case \"D1\":\n        return \"D1\";\n      case \"D2\":\n        return \"D2\";\n      case \"D3\":\n        return \"D3\";\n      case \"D4\":\n        return \"D4\";\n      case \"BestSquat\":\n        return \"Squat\";\n      case \"BestBench\":\n        return \"Bench\";\n      case \"Spacer\":\n        return \"\";\n      case \"ProjectedTotal\":\n        return \"Total\";\n      case \"ProjectedPoints\":\n        return \"Points\";\n      case \"FinalTotal\":\n        return \"Total\";\n      case \"FinalPoints\":\n        return \"Points\";\n      case \"Place\":\n        return \"Place\";\n      default:\n        (columnType: empty); // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  render() {\n    // Reset this: hunting for a new AttemptIndex.\n    globalHighestAttemptInputAttempt = 0;\n\n    // Select the columns for display.\n    let columns: Array<ColumnType> = [\"Name\"];\n    // If the score table set the division column with to zero, hide it.\n    if (this.props.lifting.columnDivisionWidthPx !== 0) {\n      columns.push(\"Division\");\n    }\n    columns.push(\"Bodyweight\", \"WeightClass\");\n\n    // The \"Lot\" column is only shown if lot numbers are used.\n    for (let i = 0; i < this.props.orderedEntries.length; ++i) {\n      if (this.props.orderedEntries[i].lot !== 0) {\n        columns.push(\"Lot\");\n        break;\n      }\n    }\n\n    // Select lift columns based off the current lift.\n    if (this.props.lifting.lift === \"S\") {\n      columns.push(\"S1\", \"S2\", \"S3\");\n      if (this.props.attemptOneIndexed === 4) {\n        columns.push(\"S4\");\n      }\n      columns.push(\"B1\", \"D1\");\n    } else if (this.props.lifting.lift === \"B\") {\n      columns.push(\"BestSquat\", \"Spacer\", \"B1\", \"B2\", \"B3\");\n      if (this.props.attemptOneIndexed === 4) {\n        columns.push(\"B4\");\n      }\n      columns.push(\"D1\");\n    } else if (this.props.lifting.lift === \"D\") {\n      columns.push(\"BestSquat\", \"BestBench\", \"Spacer\", \"D1\", \"D2\", \"D3\");\n      if (this.props.attemptOneIndexed === 4) {\n        columns.push(\"D4\");\n      }\n    }\n\n    // Use projected totals for everything before 2nd attempt deadlifts.\n    let useProjected = true;\n    if (this.props.lifting.lift !== \"D\" || this.props.attemptOneIndexed < 2) {\n      columns.push(\"ProjectedTotal\", \"ProjectedPoints\", \"Place\");\n    } else {\n      useProjected = false;\n      columns.push(\"FinalTotal\", \"FinalPoints\", \"Place\");\n    }\n\n    // Build headers.\n    let headers = [];\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n      let className = styles.smallCell;\n      let style = null;\n\n      if (column === \"Name\") {\n        className = styles.nameCell;\n      } else if (column === \"Division\") {\n        className = styles.divisionCell;\n        if (this.props.lifting.columnDivisionWidthPx) {\n          style = { width: this.props.lifting.columnDivisionWidthPx + \"px\" };\n        }\n      } else if (column === \"Spacer\") {\n        className = styles.spacerCell;\n      }\n\n      headers.push(\n        <th key={column} className={className} style={style}>\n          {this.getColumnHeaderString(column)}\n        </th>\n      );\n    }\n\n    // Calculate the Division placings for each of the lifters.\n    const categoryResults = useProjected\n      ? getProjectedResults(\n          this.props.orderedEntries,\n          this.props.meet.weightClassesKgMen,\n          this.props.meet.weightClassesKgWomen,\n          this.props.meet.weightClassesKgMx,\n          this.props.meet.combineSleevesAndWraps\n        )\n      : getFinalResults(\n          this.props.orderedEntries,\n          this.props.meet.weightClassesKgMen,\n          this.props.meet.weightClassesKgWomen,\n          this.props.meet.weightClassesKgMx,\n          this.props.meet.combineSleevesAndWraps\n        );\n\n    return (\n      <table className={styles.liftingtable}>\n        <thead>\n          <tr>{headers}</tr>\n        </thead>\n        <tbody>{this.renderRows(columns, categoryResults)}</tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    meet: state.meet,\n    lifting: state.lifting\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingTable);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The footer of the Lifting page, contained by the LiftingView.\n// This is the parent element of the controls that affect present lifting state.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FormControl } from \"react-bootstrap\";\nimport { globalFocusAttemptInputId } from \"./LiftingTable\";\n\nimport { markLift, overrideAttempt, overrideEntryId, setLiftingGroup } from \"../../actions/liftingActions\";\n\nimport type { Entry, Flight } from \"../../types/dataTypes\";\nimport type { GlobalState, LiftingState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingFooter.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId: number | null;\n  flightsOnPlatform: Array<Flight>;\n  toggleReplaceTableWithWeighins: () => void;\n}\n\ninterface StateProps {\n  lifting: LiftingState;\n  lengthDays: number;\n  platformsOnDays: Array<number>;\n  allow4thAttempts: boolean;\n}\n\ninterface DispatchProps {\n  setLiftingGroup: any;\n  overrideAttempt: any;\n  overrideEntryId: any;\n  markLift: any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nconst liftOptions = [\n  <option key={\"S\"} value={\"S\"}>\n    Squat\n  </option>,\n  <option key={\"B\"} value={\"B\"}>\n    Bench\n  </option>,\n  <option key={\"D\"} value={\"D\"}>\n    Deadlift\n  </option>\n];\n\nclass LiftingFooter extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handlePlatformChange = this.handlePlatformChange.bind(this);\n    this.handleFlightChange = this.handleFlightChange.bind(this);\n    this.handleLiftChange = this.handleLiftChange.bind(this);\n\n    this.handleGoodLift = this.handleGoodLift.bind(this);\n    this.handleNoLift = this.handleNoLift.bind(this);\n\n    this.handleAttemptChange = this.handleAttemptChange.bind(this);\n    this.handleLifterChange = this.handleLifterChange.bind(this);\n\n    this.makeLifterOptions = this.makeLifterOptions.bind(this);\n  }\n\n  handleDayChange = event => {\n    const day = Number(event.target.value);\n    const flight = this.props.lifting.flight;\n    const lift = this.props.lifting.lift;\n\n    // If the new day has fewer platforms, reset the platform selector also.\n    let platform = this.props.lifting.platform;\n    if (platform > this.props.platformsOnDays[day - 1]) {\n      platform = 1;\n    }\n\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handlePlatformChange = event => {\n    const day = this.props.lifting.day;\n    const platform = Number(event.target.value);\n    const flight = this.props.lifting.flight;\n    const lift = this.props.lifting.lift;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleFlightChange = event => {\n    const day = this.props.lifting.day;\n    const platform = this.props.lifting.platform;\n    const flight = event.target.value;\n    const lift = this.props.lifting.lift;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleLiftChange = event => {\n    const day = this.props.lifting.day;\n    const platform = this.props.lifting.platform;\n    const flight = \"A\"; // Always reset to Flight A.\n    const lift = event.target.value;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleAttemptChange = event => {\n    const attempt = Number(event.target.value);\n    this.props.overrideAttempt(attempt);\n  };\n\n  handleLifterChange = event => {\n    const entryId = Number(event.target.value);\n    this.props.overrideEntryId(entryId);\n  };\n\n  // After a \"No Lift\" or \"Good Lift\" button is clicked, try to change focus\n  // to the AttemptInput that the score table is likely to want to type into.\n  setFocusAttemptInputTimeout = () => {\n    if (globalFocusAttemptInputId === null) {\n      return;\n    }\n\n    setTimeout(function() {\n      const elem = document.getElementById(globalFocusAttemptInputId);\n      if (elem) {\n        elem.focus();\n      }\n    }, 100);\n  };\n\n  handleGoodLift = () => {\n    // If there's no active entry, there's nothing to set.\n    if (this.props.currentEntryId === null) {\n      return;\n    }\n\n    const entryId = Number(this.props.currentEntryId);\n    const lift = this.props.lifting.lift;\n    const attempt = this.props.attemptOneIndexed;\n    this.props.markLift(entryId, lift, attempt, true);\n    this.setFocusAttemptInputTimeout();\n  };\n\n  handleNoLift = () => {\n    // If there's no active entry, there's nothing to set.\n    if (this.props.currentEntryId === null) {\n      return;\n    }\n\n    const entryId = Number(this.props.currentEntryId);\n    const lift = this.props.lifting.lift;\n    const attempt = this.props.attemptOneIndexed;\n    this.props.markLift(entryId, lift, attempt, false);\n    this.setFocusAttemptInputTimeout();\n  };\n\n  // Check whether \"document.fullscreenElement\" exists, including prefixes.\n  hasFullscreenElement = (): boolean => {\n    let doc = (document: any);\n    if (doc.fullscreenElement) return true;\n    if (doc.webkitFullscreenElement) return true;\n    if (doc.mozFullscreenElement) return true;\n    if (doc.msFullscreenElement) return true;\n    return false;\n  };\n\n  // Calls exitFullscreen(), but with prefixes.\n  exitFullscreen = () => {\n    let doc = (document: any);\n    if (typeof doc.exitFullscreen === \"function\") doc.exitFullscreen();\n    else if (typeof doc.webkitExitFullscreen === \"function\") doc.webkitExitFullscreen();\n    else if (typeof doc.mozExitFullscreen === \"function\") doc.mozExitFullscreen();\n    else if (typeof doc.msExitFullscreen === \"function\") doc.msExitFullscreen();\n  };\n\n  // Calls requestFullscreen(), but with prefixes.\n  requestFullscreen = (e: any) => {\n    if (typeof e.requestFullscreen === \"function\") e.requestFullscreen();\n    else if (typeof e.webkitRequestFullscreen === \"function\") e.webkitRequestFullscreen();\n    else if (typeof e.mozRequestFullscreen === \"function\") e.mozRequestFullscreen();\n    else if (typeof e.msRequestFullscreen === \"function\") e.msRequestFullscreen();\n  };\n\n  // Called when the \"Toggle Fullscreen\" button is clicked.\n  handleFullscreen = () => {\n    // Document must be typecast to \"any\" because the fullscreen properties\n    // used here aren't defined in the Flow Document type definition.\n    if (this.hasFullscreenElement() === true) {\n      this.exitFullscreen();\n    } else {\n      const liftingView = document.getElementById(\"liftingView\");\n      if (liftingView !== null) {\n        this.requestFullscreen(liftingView);\n      }\n    }\n  };\n\n  makeLifterOptions = () => {\n    const orderedEntries = this.props.orderedEntries;\n\n    if (orderedEntries.length === 0) {\n      return (\n        <option value={0} key={0}>\n          No Lifters\n        </option>\n      );\n    }\n\n    let lifterOptions = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const entry = orderedEntries[i];\n      lifterOptions.push(\n        <option value={entry.id} key={entry.id}>\n          {entry.name}\n        </option>\n      );\n    }\n    return lifterOptions;\n  };\n\n  render() {\n    const numPlatforms = this.props.platformsOnDays[this.props.lifting.day - 1];\n\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.lengthDays; i++) {\n      const label = \"Day \" + String(i);\n      dayOptions.push(\n        <option value={i} key={i}>\n          {label}\n        </option>\n      );\n    }\n\n    let platformOptions = [];\n    for (let i = 1; i <= numPlatforms; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          Platform {i}\n        </option>\n      );\n    }\n\n    let flightOptions = [];\n    for (let i = 0; i < this.props.flightsOnPlatform.length; i++) {\n      const flight = this.props.flightsOnPlatform[i];\n      const key = this.props.lifting.day + \"-\" + this.props.lifting.platform + \"-\" + i;\n      flightOptions.push(\n        <option value={flight} key={key}>\n          Flight {flight}\n        </option>\n      );\n    }\n    if (flightOptions.length === 0) {\n      flightOptions.push(<option key=\"none\">No Flights</option>);\n    }\n\n    let attemptOptions = [];\n    for (let i = 1; i <= 3; i++) {\n      attemptOptions.push(\n        <option key={i} value={i}>\n          Attempt {i}\n        </option>\n      );\n    }\n    if (this.props.allow4thAttempts === true) {\n      attemptOptions.push(\n        <option key={4} value={4}>\n          Attempt 4\n        </option>\n      );\n    }\n\n    const currentEntryId = this.props.currentEntryId === null ? undefined : this.props.currentEntryId;\n\n    return (\n      <div className={styles.footer}>\n        <div className={styles.leftControls}>\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.day}\n            onChange={this.handleDayChange}\n            className={styles.selector}\n          >\n            {dayOptions}\n          </FormControl>\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.platform}\n            onChange={this.handlePlatformChange}\n            className={styles.selector}\n          >\n            {platformOptions}\n          </FormControl>\n          <FormControl\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.lift}\n            onChange={this.handleLiftChange}\n            className={styles.selector}\n          >\n            {liftOptions}\n          </FormControl>\n          <FormControl\n            key={\"flight-\" + this.props.lifting.flight}\n            componentClass=\"select\"\n            defaultValue={this.props.lifting.flight}\n            onChange={this.handleFlightChange}\n            className={styles.selector}\n          >\n            {flightOptions}\n          </FormControl>\n          <FormControl\n            value={this.props.attemptOneIndexed}\n            componentClass=\"select\"\n            onChange={this.handleAttemptChange}\n            className={styles.selector}\n          >\n            {attemptOptions}\n          </FormControl>\n          <FormControl\n            value={currentEntryId}\n            componentClass=\"select\"\n            onChange={this.handleLifterChange}\n            className={styles.selector}\n          >\n            {this.makeLifterOptions()}\n          </FormControl>\n        </div>\n\n        <div className={styles.rightControls}>\n          <button type=\"button\" onClick={this.props.toggleReplaceTableWithWeighins}>\n            Toggle Weigh-ins\n          </button>\n          <button type=\"button\" onClick={this.handleFullscreen} className={styles.fullscreen}>\n            Toggle Fullscreen\n          </button>\n          <button type=\"button\" onMouseDown={this.handleNoLift} className={styles.noLift}>\n            No Lift\n          </button>\n          <button type=\"button\" onMouseDown={this.handleGoodLift} className={styles.goodLift}>\n            Good Lift\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    lengthDays: state.meet.lengthDays,\n    platformsOnDays: state.meet.platformsOnDays,\n    allow4thAttempts: state.meet.allow4thAttempts,\n    lifting: state.lifting\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setLiftingGroup: (day, platform, flight, lift) => dispatch(setLiftingGroup(day, platform, flight, lift)),\n    overrideAttempt: attempt => dispatch(overrideAttempt(attempt)),\n    overrideEntryId: entryId => dispatch(overrideEntryId(entryId)),\n    markLift: (entryId, lift, attempt, success) => dispatch(markLift(entryId, lift, attempt, success))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LiftingFooter);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This defines a widget for manually adjusting the width of a column\n// in the LiftingTable. The width information is stored in the LiftingState.\n//\n// The value is stored in the LiftingState in pixels, but is presented\n// here as (pixels / 9) to make it look nicer. 9 is used because most columns\n// are set to 72px, which is divisible by 9.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { ControlLabel, FormGroup, FormControl } from \"react-bootstrap\";\n\nimport { setTableInfo } from \"../../actions/liftingActions\";\n\nimport type { GlobalState, LiftingState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  label: string; // The label to display.\n  fieldName: string; // Field on the LiftingState to change.\n}\n\ninterface StateProps {\n  lifting: LiftingState;\n}\n\ninterface DispatchProps {\n  setTableInfo: (changes: $Shape<LiftingState>) => any;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  value: number | string;\n}\n\n// To show smaller numbers, the actual pixel count is divided by this.\nconst MULTIPLE: number = 9;\n\nclass ColumnWidth extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.getValidationState = this.getValidationState.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: Math.ceil(this.props.lifting[this.props.fieldName] / MULTIPLE)\n    };\n  }\n\n  getValidationState = () => {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber < 0 || asNumber > 1000) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = event => {\n    const value = event.target.value;\n\n    this.setState({ value: value }, () => {\n      // As callback, save successful value into Redux store.\n      if (this.getValidationState() !== \"error\") {\n        let changes = {};\n        changes[this.props.fieldName] = Math.floor(Number(value) * MULTIPLE);\n        this.props.setTableInfo(changes);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <FormGroup validationState={this.getValidationState()}>\n        <ControlLabel>{this.props.label}</ControlLabel>\n        <FormControl\n          type=\"number\"\n          pattern=\"[0-9]+\"\n          min=\"0\"\n          step=\"1\"\n          value={this.state.value}\n          onChange={this.handleChange}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  lifting: state.lifting\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    setTableInfo: (changes: $Shape<LiftingState>) => dispatch(setTableInfo(changes))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ColumnWidth);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Lifting page, contained by the LiftingContainer.\n//\n// The LiftingTable, LiftingFooter, etc. all share calculated state.\n// This class performs the state calculations and communicates that to its\n// sub-components via props.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel } from \"react-bootstrap\";\n\nimport TopBar from \"./TopBar\";\nimport LeftPanel from \"./LeftPanel\";\nimport LiftingTable from \"./LiftingTable\";\nimport LiftingFooter from \"./LiftingFooter\";\nimport WeighinsView from \"../weighins/WeighinsView\";\n\nimport ColumnWidth from \"./ColumnWidth\";\n\nimport styles from \"./LiftingView.module.scss\";\n\nimport { getLiftingOrder } from \"../../logic/liftingOrder\";\n\nimport type { Entry, Flight } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState, LiftingState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  lifting: LiftingState;\n  flightsOnPlatform: Array<Flight>;\n  entriesInFlight: Array<Entry>;\n}\n\ntype Props = $ReadOnly<StateProps>;\n\ninterface InternalState {\n  // If true, the LiftingTable is replaced with the Weighins page.\n  // This lets the score table change arbitrary rack height and attempt information\n  // without removing the current lifter or bar load displays.\n  replaceTableWithWeighins: boolean;\n}\n\nclass LiftingView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n    this.toggleReplaceTableWithWeighins = this.toggleReplaceTableWithWeighins.bind(this);\n    this.state = {\n      replaceTableWithWeighins: false\n    };\n  }\n\n  toggleReplaceTableWithWeighins = (): void => {\n    this.setState({\n      replaceTableWithWeighins: !this.state.replaceTableWithWeighins\n    });\n  };\n\n  render() {\n    const now = getLiftingOrder(this.props.entriesInFlight, this.props.lifting);\n\n    let rightElement = null;\n    if (this.state.replaceTableWithWeighins === false) {\n      rightElement = (\n        <LiftingTable\n          attemptOneIndexed={now.attemptOneIndexed}\n          orderedEntries={now.orderedEntries}\n          currentEntryId={now.currentEntryId}\n        />\n      );\n    } else {\n      rightElement = (\n        <WeighinsView day={this.props.lifting.day} platform={this.props.lifting.platform} inLiftingPage={true} />\n      );\n    }\n\n    return (\n      <div>\n        <Panel bsStyle=\"primary\" style={{ marginLeft: \"12px\", marginRight: \"12px\" }}>\n          <Panel.Body>\n            <div style={{ width: \"160px\" }}>\n              <ColumnWidth label=\"Division Column Width\" fieldName=\"columnDivisionWidthPx\" />\n            </div>\n            <h3>To fit to the screen, zoom the browser in or out and then press Toggle Fullscreen.</h3>\n          </Panel.Body>\n        </Panel>\n        <div id=\"liftingView\" className={styles.liftingView}>\n          <TopBar\n            attemptOneIndexed={now.attemptOneIndexed}\n            orderedEntries={now.orderedEntries}\n            currentEntryId={now.currentEntryId}\n          />\n\n          <div className={styles.middleParentContainer}>\n            <div className={styles.leftPanelContainer}>\n              <LeftPanel\n                attemptOneIndexed={now.attemptOneIndexed}\n                orderedEntries={now.orderedEntries}\n                currentEntryId={now.currentEntryId}\n                nextEntryId={now.nextEntryId}\n                nextAttemptOneIndexed={now.nextAttemptOneIndexed}\n              />\n            </div>\n\n            <div className={styles.rightPanelContainer}>{rightElement}</div>\n          </div>\n\n          <LiftingFooter\n            attemptOneIndexed={now.attemptOneIndexed}\n            orderedEntries={now.orderedEntries}\n            currentEntryId={now.currentEntryId}\n            flightsOnPlatform={this.props.flightsOnPlatform}\n            toggleReplaceTableWithWeighins={this.toggleReplaceTableWithWeighins}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  const day = state.lifting.day;\n  const platform = state.lifting.platform;\n  const flight = state.lifting.flight;\n\n  const entriesOnPlatform = state.registration.entries.filter(\n    entry => entry.day === day && entry.platform === platform\n  );\n\n  // Determine available flights from the entries themselves.\n  let flights: Array<Flight> = [];\n  for (let i = 0; i < entriesOnPlatform.length; i++) {\n    const entry = entriesOnPlatform[i];\n    if (flights.indexOf(entry.flight) === -1) {\n      flights.push(entry.flight);\n    }\n  }\n  flights.sort();\n\n  // Only receive entries that are in the currently-lifting group.\n  const entriesInFlight = entriesOnPlatform.filter(entry => entry.flight === flight);\n\n  return {\n    meet: state.meet,\n    lifting: state.lifting,\n    flightsOnPlatform: flights,\n    entriesInFlight: entriesInFlight\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Lifting page.\n\nimport React from \"react\";\nimport LiftingView from \"../components/lifting/LiftingView\";\n\nclass LiftingContainer extends React.Component<{}> {\n  render() {\n    return <LiftingView />;\n  }\n}\n\nexport default LiftingContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows the first attempt ordering of lifters for a single flight.\n\nimport React from \"react\";\n\nimport { Panel, Table } from \"react-bootstrap\";\n\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { orderEntriesByAttempt } from \"../../logic/liftingOrder\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport type { Entry, Flight, Lift } from \"../../types/dataTypes\";\n\nimport styles from \"./OneFlightOrder.module.scss\";\n\ninterface OwnProps {\n  flight: Flight;\n  entriesInFlight: Array<Entry>;\n}\n\ntype Props = OwnProps;\n\nclass OneFlightOrder extends React.Component<Props> {\n  getOrderBy = (lift: Lift): Array<Entry> => {\n    const fieldKg = liftToAttemptFieldName(lift);\n\n    // Only consider entries that registered a first attempt.\n    const entriesForLift = this.props.entriesInFlight.filter(e => {\n      return e[fieldKg][0] !== 0;\n    });\n\n    // Sort them in-place on the basis of that first attempt.\n    return orderEntriesByAttempt(entriesForLift, fieldKg, 1);\n  };\n\n  render() {\n    const bySquat = this.getOrderBy(\"S\");\n    const byBench = this.getOrderBy(\"B\");\n    const byDeadlift = this.getOrderBy(\"D\");\n\n    const hasSquat = bySquat.length !== 0;\n    const hasBench = byBench.length !== 0;\n    const hasDeadlift = byDeadlift.length !== 0;\n\n    const maxRows = Math.max(bySquat.length, byBench.length, byDeadlift.length);\n\n    // Construct a table row-by-row.\n    let rows = [];\n    for (let i = 0; i < maxRows; i++) {\n      let builder = [];\n      let key = 0;\n\n      if (hasSquat) {\n        if (i < bySquat.length) {\n          const entry = bySquat[i];\n          const kg: string = displayWeight(entry.squatKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.squatKg[0]));\n          builder.push(\n            <td key={\"S-\" + entry.id}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"S-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"S-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      if (hasBench) {\n        if (i < byBench.length) {\n          const entry = byBench[i];\n          const kg: string = displayWeight(entry.benchKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.benchKg[0]));\n          builder.push(\n            <td key={\"B-\" + entry.id} className={styles.leftDivider}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"B-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"B-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} className={styles.leftDivider} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      if (hasDeadlift) {\n        if (i < byDeadlift.length) {\n          const entry = byDeadlift[i];\n          const kg: string = displayWeight(entry.deadliftKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.deadliftKg[0]));\n          builder.push(\n            <td key={\"D-\" + entry.id} className={styles.leftDivider}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"D-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"D-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} className={styles.leftDivider} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      rows.push(<tr key={i}>{builder}</tr>);\n    }\n\n    // Construct the table header.\n    let header = [];\n    if (hasSquat) {\n      header.push(<th key={\"S\"}>Squat</th>);\n      header.push(<th key={\"S-kg\"}>Kg</th>);\n      header.push(<th key={\"S-lbs\"}>Lbs</th>);\n    }\n    if (hasBench) {\n      header.push(\n        <th key={\"B\"} className={styles.leftDivider}>\n          Bench\n        </th>\n      );\n      header.push(<th key={\"B-kg\"}>Kg</th>);\n      header.push(<th key={\"B-lbs\"}>Lbs</th>);\n    }\n    if (hasDeadlift) {\n      header.push(\n        <th key={\"D\"} className={styles.leftDivider}>\n          Deadlift\n        </th>\n      );\n      header.push(<th key={\"D-kg\"}>Kg</th>);\n      header.push(<th key={\"D-lbs\"}>Lbs</th>);\n    }\n\n    return (\n      <Panel>\n        <Panel.Heading>Flight {this.props.flight} Lifting Order</Panel.Heading>\n        <Panel.Body>\n          <Table striped hover condensed style={{ margin: \"0px\" }}>\n            <thead>\n              <tr>{header}</tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Panel.Body>\n      </Panel>\n    );\n  }\n}\n\nexport default OneFlightOrder;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows all the lifters who are competing in the same Category.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Panel } from \"react-bootstrap\";\n\nimport type { CategoryResults } from \"../../logic/divisionPlace\";\nimport type { Sex } from \"../../types/dataTypes\";\n\nconst sexToLabel = (sex: Sex): string => {\n  switch (sex) {\n    case \"M\":\n      return \"Men's\";\n    case \"F\":\n      return \"Women's\";\n    case \"Mx\":\n      return \"Mx\";\n    default:\n      (sex: empty) // eslint-disable-line\n      return \"\";\n  }\n};\n\ntype Props = {\n  platform: number,\n  categoryResults: CategoryResults\n};\n\nclass OneCategory extends React.Component<Props> {\n  render() {\n    const category = this.props.categoryResults.category;\n    const entries = this.props.categoryResults.orderedEntries;\n\n    const sex = sexToLabel(category.sex);\n\n    let namelist = [];\n    for (let i = 0; i < entries.length; i++) {\n      namelist.push(entries[i].name);\n    }\n\n    return (\n      <Panel bsStyle=\"info\">\n        <Panel.Heading>\n          Platform {this.props.platform} Lifters in {sex} {category.weightClassStr}kg {category.equipment}{\" \"}\n          {category.division} {category.event}\n        </Panel.Heading>\n        <Panel.Body>{namelist.join(\", \")}</Panel.Body>\n      </Panel>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(OneCategory);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the FlightOrder page, contained by the FlightOrderContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Button, FormControl, Panel } from \"react-bootstrap\";\n\nimport OneFlightOrder from \"./OneFlightOrder\";\nimport OneCategory from \"./OneCategory\";\n\nimport { getProjectedResults } from \"../../logic/divisionPlace\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  entries: Array<Entry>;\n}\n\ntype Props = StateProps;\n\ninterface InternalState {\n  day: number;\n  platform: number;\n}\n\nconst marginStyle = { margin: \"0\" };\n\nclass FlightOrderView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.updateDay = this.updateDay.bind(this);\n    this.updatePlatform = this.updatePlatform.bind(this);\n    this.handlePrint = this.handlePrint.bind(this);\n\n    this.state = {\n      day: 1,\n      platform: 1\n    };\n  }\n\n  updateDay = event => {\n    const day = Number(event.target.value);\n    if (this.state.day !== day) {\n      // If the currently-selected platform number becomes invalid, reset it.\n      if (this.state.platform > this.props.meet.platformsOnDays[day - 1]) {\n        this.setState({ day: day, platform: 1 });\n      } else {\n        this.setState({ day: day });\n      }\n    }\n  };\n\n  updatePlatform = event => {\n    const platform = Number(event.target.value);\n    if (this.state.platform !== platform) {\n      this.setState({ platform: platform });\n    }\n  };\n\n  handlePrint = () => {\n    window.print();\n  };\n\n  render() {\n    const selectorStyle = { width: \"120px\" };\n\n    // Make options for all of the days.\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.meet.lengthDays; i++) {\n      dayOptions.push(\n        <option value={i} key={i}>\n          Day {i}\n        </option>\n      );\n    }\n\n    // Make options for all of the available platforms on the current day.\n    let platformOptions = [];\n    let numPlatforms = this.props.meet.platformsOnDays[this.state.day - 1];\n    for (let i = 1; i <= numPlatforms; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          Platform {i}\n        </option>\n      );\n    }\n\n    // Get all the entries under the current (day, platform) selection.\n    let shownEntries = this.props.entries.filter(e => {\n      return e.day === this.state.day && e.platform === this.state.platform;\n    });\n\n    // Look through the entries to discover what flights exist.\n    let knownFlights = [];\n    for (let i = 0; i < shownEntries.length; i++) {\n      const entry = shownEntries[i];\n      if (knownFlights.indexOf(entry.flight) === -1) {\n        knownFlights.push(entry.flight);\n      }\n    }\n    knownFlights.sort();\n\n    // For each flight, see if there are any lifters, and build a OneFlightOrder.\n    let flightOrders = [];\n    for (let i = 0; i < knownFlights.length; i++) {\n      const flight = knownFlights[i];\n      const entriesInFlight = shownEntries.filter(e => e.flight === flight);\n      const id = \"\" + this.state.day + \"-\" + this.state.platform + \"-\" + flight;\n      flightOrders.push(<OneFlightOrder key={id} flight={flight} entriesInFlight={entriesInFlight} />);\n    }\n\n    // Look through the entries to discover what divisions exist.\n    const categoryResults = getProjectedResults(\n      shownEntries,\n      this.props.meet.weightClassesKgMen,\n      this.props.meet.weightClassesKgWomen,\n      this.props.meet.weightClassesKgMx,\n      this.props.meet.combineSleevesAndWraps\n    );\n\n    let categories = [];\n    for (let i = 0; i < categoryResults.length; i++) {\n      const id = \"\" + this.state.day + \"-\" + this.state.platform + \"-\" + i;\n      categories.push(<OneCategory key={id} platform={this.state.platform} categoryResults={categoryResults[i]} />);\n    }\n\n    return (\n      <div style={marginStyle}>\n        <Panel bsStyle=\"info\">\n          <Panel.Body style={{ display: \"flex\" }}>\n            <FormControl\n              defaultValue={this.state.day}\n              componentClass=\"select\"\n              onChange={this.updateDay}\n              style={selectorStyle}\n            >\n              {dayOptions}\n            </FormControl>\n\n            <FormControl\n              defaultValue={this.state.platform}\n              componentClass=\"select\"\n              onChange={this.updatePlatform}\n              style={selectorStyle}\n            >\n              {platformOptions}\n            </FormControl>\n\n            <Button bsStyle=\"info\" onClick={this.handlePrint}>\n              Print Page\n            </Button>\n          </Panel.Body>\n        </Panel>\n\n        {flightOrders}\n        {categories}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    meet: state.meet,\n    entries: state.registration.entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(FlightOrderView);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the FlightOrder page.\n\nimport React from \"react\";\nimport FlightOrderView from \"../components/flight-order/FlightOrderView\";\n\nclass FlightOrderContainer extends React.Component<{}> {\n  render() {\n    return <FlightOrderView />;\n  }\n}\n\nexport default FlightOrderContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the results by division.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel, Table } from \"react-bootstrap\";\n\nimport { getFinalResults } from \"../../logic/divisionPlace\";\nimport { getWeightClassStr, getWeightClassLbsStr, wtclsStrKg2Lbs } from \"../../reducers/meetReducer\";\nimport {\n  getBest5SquatKg,\n  getBest5BenchKg,\n  getBest5DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted\n} from \"../../logic/entry\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport { bodyweight_multiple } from \"../../logic/coefficients/bodyweight-multiple\";\nimport { dots } from \"../../logic/coefficients/dots\";\nimport { glossbrenner } from \"../../logic/coefficients/glossbrenner\";\nimport { ipfpoints } from \"../../logic/coefficients/ipf\";\nimport { nasapoints } from \"../../logic/coefficients/nasa\";\nimport { schwartzmalone } from \"../../logic/coefficients/schwartzmalone\";\nimport { wilks } from \"../../logic/coefficients/wilks\";\n\nimport type { Category, CategoryResults } from \"../../logic/divisionPlace\";\nimport type { Entry, Formula, Sex } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  inKg: boolean;\n  showAlternateUnits: boolean;\n  meetName: string;\n  formula: Formula;\n  combineSleevesAndWraps: boolean;\n  lengthDays: number;\n  weightClassesKgMen: Array<number>;\n  weightClassesKgWomen: Array<number>;\n  weightClassesKgMx: Array<number>;\n  entries: Array<Entry>;\n}\n\ninterface OwnProps {\n  day: string; // Really a number, 0 meaning \"all\".\n}\n\ntype Props = StateProps & OwnProps;\n\nconst mapSexToClasses = (sex: Sex, props: Props): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return props.weightClassesKgMen;\n    case \"F\":\n      return props.weightClassesKgWomen;\n    case \"Mx\":\n      return props.weightClassesKgMx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return props.weightClassesKgMen;\n  }\n};\n\nclass ByDivision extends React.Component<Props> {\n  renderEntryRow = (entry: Entry, category: Category, key: number): any => {\n    // Skip no-show entries.\n    if (!entryHasLifted(entry)) return null;\n\n    // Skip DQ'd lifters. Meet directors have reported that it's embarrassing\n    // to the DQ'd lifter to have that projected.\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n    if (totalKg === 0) return null;\n\n    const classes = mapSexToClasses(entry.sex, this.props);\n    const squatKg = getBest5SquatKg(entry);\n    const benchKg = getBest5BenchKg(entry);\n    const deadliftKg = getBest5DeadliftKg(entry);\n\n    const inKg = this.props.inKg;\n    const total = inKg ? totalKg : kg2lbs(totalKg); // For display.\n\n    // The place proceeds in order by key, except for DQ entries.\n    const place = totalKg === 0 ? \"DQ\" : key + 1;\n\n    // TODO: Share this code with ByPoints.\n    let points = 0;\n    switch (this.props.formula) {\n      case \"Bodyweight Multiple\":\n        points = bodyweight_multiple(entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Dots\":\n        points = dots(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Glossbrenner\":\n        points = glossbrenner(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Wilks\":\n        points = wilks(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"IPF Points\":\n        points = ipfpoints(totalKg, entry.bodyweightKg, entry.sex, category.equipment, category.event).toFixed(2);\n        break;\n      case \"Schwartz/Malone\":\n        points = schwartzmalone(entry.sex, entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"NASA Points\":\n        points = nasapoints(entry.bodyweightKg, totalKg).toFixed(2);\n        break;\n      case \"Total\":\n        points = total.toFixed(2);\n        break;\n      default:\n        (this.props.formula: empty) // eslint-disable-line\n        break;\n    }\n\n    let pointsStr = \"\";\n    if (totalKg !== 0 && points === 0) pointsStr = \"N/A\";\n    else if (totalKg !== 0 && points !== 0) pointsStr = points;\n\n    const wtcls = inKg\n      ? getWeightClassStr(classes, entry.bodyweightKg)\n      : getWeightClassLbsStr(classes, entry.bodyweightKg);\n    const bw = inKg ? entry.bodyweightKg : kg2lbs(entry.bodyweightKg);\n    const squat = inKg ? squatKg : kg2lbs(squatKg);\n    const bench = inKg ? benchKg : kg2lbs(benchKg);\n    const deadlift = inKg ? deadliftKg : kg2lbs(deadliftKg);\n\n    const unit = inKg ? \"kg\" : \"lb\";\n    const otherUnit = inKg ? \"lb\" : \"kg\";\n\n    // Calculate the total in the alternate units, if requested.\n    let alternateTotal: string | null = null;\n    if (this.props.showAlternateUnits === true && totalKg !== 0) {\n      const amount = inKg ? kg2lbs(totalKg) : totalKg;\n      alternateTotal = unit + \" / \" + displayWeight(amount) + otherUnit;\n    }\n\n    return (\n      <tr key={key}>\n        <td>{place}</td>\n        <td>{entry.name}</td>\n        <td>{entry.bodyweightKg === 0 ? null : wtcls}</td>\n        <td>{entry.bodyweightKg === 0 ? null : displayWeight(bw)}</td>\n        <td>{entry.age === 0 ? null : entry.age}</td>\n        <td>{squatKg === 0 ? \"\" : displayWeight(squat)}</td>\n        <td>{benchKg === 0 ? \"\" : displayWeight(bench)}</td>\n        <td>{deadliftKg === 0 ? \"\" : displayWeight(deadlift)}</td>\n        <td>\n          {totalKg === 0 ? \"\" : displayWeight(total)}\n          {alternateTotal}\n        </td>\n        <td>{pointsStr}</td>\n      </tr>\n    );\n  };\n\n  mapSexToLabel = (sex: Sex): string => {\n    switch (sex) {\n      case \"M\":\n        return \"Men's\";\n      case \"F\":\n        return \"Women's\";\n      case \"Mx\":\n        return \"Mx\";\n      default:\n        (sex: empty) // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  renderCategoryResults = (results: CategoryResults, key: number): any => {\n    const { category, orderedEntries } = results;\n    const sex = this.mapSexToLabel(category.sex);\n\n    // Gather rows.\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const row = this.renderEntryRow(orderedEntries[i], category, i);\n      if (row !== null) {\n        rows.push(row);\n      }\n    }\n\n    // If all entries were no-show, don't show this panel.\n    if (rows.length === 0) {\n      return null;\n    }\n\n    let eqpstr: string = category.equipment;\n    if (this.props.combineSleevesAndWraps) {\n      eqpstr = \"Sleeves + Wraps\";\n    }\n\n    let units = this.props.inKg ? \"kilo\" : \"pound\";\n\n    // Convert the category.weightClassStr to pounds.\n    let wtcls = category.weightClassStr;\n    if (category.weightClassStr !== \"\" && !this.props.inKg) {\n      wtcls = wtclsStrKg2Lbs(category.weightClassStr);\n    }\n\n    return (\n      <Panel key={key}>\n        <Panel.Heading>\n          {sex} {wtcls} {category.weightClassStr !== \"\" ? units : null} {eqpstr} {category.division} {category.event}\n        </Panel.Heading>\n        <Panel.Body>\n          <Table hover condensed>\n            <thead>\n              <tr>\n                <th>Place</th>\n                <th>Name</th>\n                <th>Class</th>\n                <th>Bwt</th>\n                <th>Age</th>\n                <th>Squat</th>\n                <th>Bench</th>\n                <th>Deadlift</th>\n                <th>Total</th>\n                <th>Points</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Panel.Body>\n      </Panel>\n    );\n  };\n\n  render() {\n    const results = getFinalResults(\n      this.props.entries,\n      this.props.weightClassesKgMen,\n      this.props.weightClassesKgWomen,\n      this.props.weightClassesKgMx,\n      this.props.combineSleevesAndWraps\n    );\n\n    let categoryPanels = [];\n    for (let i = 0; i < results.length; i++) {\n      const panel = this.renderCategoryResults(results[i], i);\n      if (panel !== null) {\n        categoryPanels.push(panel);\n      }\n    }\n\n    return <div>{categoryPanels}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const day = Number(ownProps.day);\n  let entries = state.registration.entries;\n  if (day > 0) {\n    entries = entries.filter(e => e.day === day);\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    showAlternateUnits: state.meet.showAlternateUnits,\n    meetName: state.meet.name,\n    formula: state.meet.formula,\n    combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n    lengthDays: state.meet.lengthDays,\n    weightClassesKgMen: state.meet.weightClassesKgMen,\n    weightClassesKgWomen: state.meet.weightClassesKgWomen,\n    weightClassesKgMx: state.meet.weightClassesKgMx,\n    entries: entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ByDivision);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines Foster-McCulloch age coefficients.\n//\n// These are taken from the OpenPowerlifting coefficients module,\n// translated from the original Rust code.\n\nconst AGE_COEFFICIENTS = [\n  // Coefficients in the range of 0-4 are clearly nonsense.\n  0.0, // 0\n  0.0, // 1\n  0.0, // 2\n  0.0, // 3\n  0.0, // 4\n  // These coefficients don't actually exist, and are just low-balled best guesses.\n  // Kids really shouldn't be competing in this sport...\n  // Ranges from age 5 to 13.\n  1.73, // 5\n  1.67, // 6\n  1.61, // 7\n  1.55, // 8\n  1.49, // 9\n  1.43, // 10\n  1.38, // 11\n  1.33, // 12\n  1.28, // 13\n  // Foster coefficients:\n  // http://www.usapl-sd.com/Formulas/Foster.htm\n  // Ranges from age 14 to 22.\n  1.23, // 14\n  1.18, // 15\n  1.13, // 16\n  1.08, // 17\n  1.06, // 18\n  1.04, // 19\n  1.03, // 20\n  1.02, // 21\n  1.01, // 22\n  // Lifters in the range 23-40 receive no handicap.\n  1.0, // 23\n  1.0, // 24\n  1.0, // 25\n  1.0, // 26\n  1.0, // 27\n  1.0, // 28\n  1.0, // 29\n  1.0, // 30\n  1.0, // 31\n  1.0, // 32\n  1.0, // 33\n  1.0, // 34\n  1.0, // 35\n  1.0, // 36\n  1.0, // 37\n  1.0, // 38\n  1.0, // 39\n  1.0, // 40\n  // McCulloch coefficients:\n  //  http://www.usapl-sd.com/Formulas/Mcculloch.htm (contains some errors).\n  // Errors were corrected using the Masters coefficients from:\n  //  http://worldpowerliftingcongress.com/wp-content/uploads/2015/02/Glossbrenner.htm\n  // Ranges from age 41 to 80.\n  1.01, // 41\n  1.02, // 42\n  1.031, // 43\n  1.043, // 44\n  1.055, // 45\n  1.068, // 46\n  1.082, // 47\n  1.097, // 48\n  1.113, // 49\n  1.13, // 50\n  1.147, // 51\n  1.165, // 52\n  1.184, // 53\n  1.204, // 54\n  1.225, // 55\n  1.246, // 56\n  1.268, // 57\n  1.291, // 58\n  1.315, // 59\n  1.34, // 60\n  1.366, // 61\n  1.393, // 62\n  1.421, // 63\n  1.45, // 64\n  1.48, // 65\n  1.511, // 66\n  1.543, // 67\n  1.576, // 68\n  1.61, // 69\n  1.645, // 70\n  1.681, // 71\n  1.718, // 72\n  1.756, // 73\n  1.795, // 74\n  1.835, // 75\n  1.876, // 76\n  1.918, // 77\n  1.961, // 78\n  2.005, // 79\n  2.05, // 80\n  // These coefficients taken from:\n  // http://www.usapltwinportsrawopen.com/resources/USAPL+Age+Coefficients.pdf\n  // Ranges from age 81 to 90.\n  2.096, // 81\n  2.143, // 82\n  2.19, // 83\n  2.238, // 84\n  2.287, // 85\n  2.337, // 86\n  2.388, // 87\n  2.44, // 88\n  2.494, // 89\n  2.549, // 90\n  // Coefficients above 90 were just guessed at, and are unstandardized.\n  2.605, // 91\n  2.662, // 92\n  2.72, // 93\n  2.779, // 94\n  2.839, // 95\n  2.9, // 96\n  2.962, // 97\n  3.025, // 98\n  3.089, // 99\n  3.154 // 100\n];\n\n// Maps the given age into the table above.\nexport const fosterMcCulloch = (age: number): number => {\n  if (!Number.isInteger(age) || age <= 0) {\n    return 1.0;\n  }\n\n  // Greater-than is correct here: (age) is used to index into table, not (age-1).\n  if (age > AGE_COEFFICIENTS.length) {\n    return 1.0;\n  }\n\n  return AGE_COEFFICIENTS[age];\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the logic for calculating the division Place of a lifter, shared between\n// the Lifting page, the Rankings page, and data export code.\n//\n// The algorithm used is particularly bad -- the foremost goal was to make an interface\n// that allowed for maximum code reuse between the Rankings and Lifting pages,\n// which have slightly different needs.\n\nimport { getFinalEventTotalKg } from \"./entry\";\n\n// Import points formulas.\nimport { bodyweight_multiple } from \"./coefficients/bodyweight-multiple\";\nimport { dots } from \"./coefficients/dots\";\nimport { glossbrenner } from \"./coefficients/glossbrenner\";\nimport { ipfpoints } from \"./coefficients/ipf\";\nimport { nasapoints } from \"./coefficients/nasa\";\nimport { schwartzmalone } from \"./coefficients/schwartzmalone\";\nimport { wilks } from \"./coefficients/wilks\";\n\n// Import age coefficients.\nimport { fosterMcCulloch } from \"./coefficients/foster-mcculloch\";\n\nimport type { AgeCoefficients, Sex, Event, Equipment, Entry, Formula } from \"../types/dataTypes\";\n\n// Specifies a points category under which entries can be ranked together.\nexport type PointsCategory = {\n  sex: Sex,\n  event: Event,\n  equipment: Equipment\n};\n\n// Wraps up all the entries in a category with the category's descriptors.\nexport type PointsCategoryResults = {\n  category: PointsCategory,\n  orderedEntries: Array<Entry>\n};\n\n// Generates a unique String out of a Category, for purposes of using as a Map key.\nconst categoryToKey = (category: PointsCategory): string => {\n  return JSON.stringify(category);\n};\nconst keyToCategory = (key: string): PointsCategory => {\n  return JSON.parse(key);\n};\n\n// Returns a copy of the entries array sorted by Formula Place (Rank).\n// All entries are assumed to be part of the same category.\nconst sortByFormulaPlaceInCategory = (\n  entries: Array<Entry>,\n  category: PointsCategory,\n  formula: Formula,\n  ageCoefficients: AgeCoefficients\n): Array<Entry> => {\n  // Make a map from Entry to initial index.\n  let indexMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    indexMap.set(entries[i], i);\n  }\n\n  // Pre-calculate all the points into an array to avoid computing them multiple\n  // times in the sort.\n  let memoizedPoints = new Array(entries.length);\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n\n    switch (formula) {\n      case \"Bodyweight Multiple\":\n        memoizedPoints[i] = bodyweight_multiple(entry.bodyweightKg, totalKg);\n        break;\n      case \"Glossbrenner\":\n        memoizedPoints[i] = glossbrenner(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"Wilks\":\n        memoizedPoints[i] = wilks(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"IPF Points\":\n        memoizedPoints[i] = ipfpoints(totalKg, entry.bodyweightKg, category.sex, category.equipment, category.event);\n        break;\n      case \"Schwartz/Malone\":\n        memoizedPoints[i] = schwartzmalone(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"NASA Points\":\n        memoizedPoints[i] = nasapoints(entry.bodyweightKg, totalKg);\n        break;\n      case \"Dots\":\n        memoizedPoints[i] = dots(category.sex, entry.bodyweightKg, totalKg);\n        break;\n      case \"Total\":\n        memoizedPoints[i] = totalKg;\n        break;\n      default:\n        (formula: empty) // eslint-disable-line\n        memoizedPoints[i] = 0;\n    }\n\n    // Apply age coefficients now, if requested.\n    switch (ageCoefficients) {\n      case \"None\":\n        break;\n      case \"FosterMcCulloch\":\n        memoizedPoints[i] = memoizedPoints[i] * fosterMcCulloch(entry.age);\n        break;\n      default:\n        (ageCoefficients: empty) // eslint-disable-line\n        break;\n    }\n  }\n\n  // Clone the entries array to avoid modifying the original.\n  let clonedEntries = entries.slice();\n\n  // Sort in the given category, first place having the lowest index.\n  clonedEntries.sort((a, b) => {\n    const aIndex = indexMap.get(a);\n    const bIndex = indexMap.get(b);\n\n    // Appease the type checker even though this can't happen.\n    if (aIndex === undefined || bIndex === undefined) return 0;\n\n    // First sort by points, higher sorting lower.\n    const aPoints = memoizedPoints[aIndex];\n    const bPoints = memoizedPoints[bIndex];\n    if (aPoints !== bPoints) return bPoints - aPoints;\n\n    // If points are equal, sort by Bodyweight, lower sorting lower.\n    if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n    // Otherwise, they're equal.\n    return 0;\n  });\n\n  return clonedEntries;\n};\n\n// Determines the sort order by Event.\nconst getEventSortOrder = (ev: Event): number => {\n  return [\"SBD\", \"BD\", \"SB\", \"SD\", \"S\", \"B\", \"D\"].indexOf(ev);\n};\n\n// Determines the sort order by Equipment.\nconst getEquipmentSortOrder = (eq: Equipment): number => {\n  // Combine classic and equipped lifting.\n  return [\"Bare\", \"Sleeves\", \"Wraps\", \"Single-ply\", \"Multi-ply\"].indexOf(eq);\n};\n\n// Determines the sort order by Sex.\nconst getSexSortOrder = (sex: Sex): number => {\n  switch (sex) {\n    case \"F\":\n      return 0;\n    case \"M\":\n      return 1;\n    case \"Mx\":\n      return 2;\n    default:\n      (sex: empty) // eslint-disable-line\n      return 3;\n  }\n};\n\n// Determines the sort (and therefore presentation) order for the Category Results.\n// The input array is sorted in-place; nothing is returned.\nexport const sortPointsCategoryResults = (results: Array<PointsCategoryResults>) => {\n  results.sort((a, b) => {\n    const catA = a.category;\n    const catB = b.category;\n\n    // First, sort by Sex.\n    const aSex = getSexSortOrder(catA.sex);\n    const bSex = getSexSortOrder(catB.sex);\n    if (aSex !== bSex) return aSex - bSex;\n\n    // Next, sort by Event.\n    const aEvent = getEventSortOrder(catA.event);\n    const bEvent = getEventSortOrder(catB.event);\n    if (aEvent !== bEvent) return aEvent - bEvent;\n\n    // Finally, sort by Equipment.\n    const aEquipment = getEquipmentSortOrder(catA.equipment);\n    const bEquipment = getEquipmentSortOrder(catB.equipment);\n    if (aEquipment !== bEquipment) return aEquipment - bEquipment;\n\n    return 0;\n  });\n};\n\n// Generates objects representing the various ByPoints categories.\n// The returned objects are sorted in intended order of presentation.\nexport const getAllRankings = (\n  entries: Array<Entry>,\n  formula: Formula,\n  ageCoefficients: AgeCoefficients,\n  combineSleevesAndWraps: boolean\n): Array<PointsCategoryResults> => {\n  // Generate a map from category to the entries within that category.\n  // The map is populated by iterating over each entry and having the entry\n  // append itself to per-category lists.\n  let categoryMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    const e = entries[i];\n\n    // Remember consistent properties.\n    const sex = e.sex;\n    let equipment: Equipment = e.equipment;\n\n    // If the results combine Sleeves and Wraps, promote Sleeves to Wraps.\n    if (combineSleevesAndWraps && equipment === \"Sleeves\") {\n      equipment = \"Wraps\";\n    }\n\n    // Iterate over each event, adding to the map.\n    for (let evidx = 0; evidx < e.events.length; evidx++) {\n      const event = e.events[evidx];\n      const category = { sex, event, equipment };\n      const key = categoryToKey(category);\n\n      const catEntries = categoryMap.get(key);\n      catEntries === undefined ? categoryMap.set(key, [e]) : catEntries.push(e);\n    }\n  }\n\n  // Iterate over each category and assign a Place to the entries therein.\n  let results = [];\n  for (let [key, catEntries] of categoryMap) {\n    const category = keyToCategory(key);\n    const orderedEntries = sortByFormulaPlaceInCategory(catEntries, category, formula, ageCoefficients);\n    results.push({ category, orderedEntries });\n  }\n\n  sortPointsCategoryResults(results);\n  return results;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the results by points.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Panel, Table } from \"react-bootstrap\";\n\nimport { getAllRankings } from \"../../logic/pointsPlace\";\nimport { getWeightClassStr, getWeightClassLbsStr } from \"../../reducers/meetReducer\";\nimport {\n  getBest5SquatKg,\n  getBest5BenchKg,\n  getBest5DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted\n} from \"../../logic/entry\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport { bodyweight_multiple } from \"../../logic/coefficients/bodyweight-multiple\";\nimport { dots } from \"../../logic/coefficients/dots\";\nimport { glossbrenner } from \"../../logic/coefficients/glossbrenner\";\nimport { ipfpoints } from \"../../logic/coefficients/ipf\";\nimport { nasapoints } from \"../../logic/coefficients/nasa\";\nimport { schwartzmalone } from \"../../logic/coefficients/schwartzmalone\";\nimport { wilks } from \"../../logic/coefficients/wilks\";\n\nimport { fosterMcCulloch } from \"../../logic/coefficients/foster-mcculloch\";\n\nimport type { PointsCategory, PointsCategoryResults } from \"../../logic/pointsPlace\";\nimport type { AgeCoefficients, Entry, Formula, Sex } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  inKg: boolean;\n  meetName: string;\n  formula: Formula;\n  combineSleevesAndWraps: boolean;\n  lengthDays: number;\n  weightClassesKgMen: Array<number>;\n  weightClassesKgWomen: Array<number>;\n  weightClassesKgMx: Array<number>;\n  entries: Array<Entry>;\n}\n\n// Overloads this component so it can render different types of \"Best Lifter\" categories.\nexport type AgePointsCategory = \"BestLifter\" | \"BestMastersLifter\" | \"BestJuniorsLifter\";\n\ninterface OwnProps {\n  day: string; // Really a number, 0 meaning \"all\".\n  ageCoefficients: AgeCoefficients; // In OwnProps so that caller can disable it.\n  agePointsCategory: AgePointsCategory;\n}\n\ntype Props = StateProps & OwnProps;\n\nconst mapSexToClasses = (sex: Sex, props: Props): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return props.weightClassesKgMen;\n    case \"F\":\n      return props.weightClassesKgWomen;\n    case \"Mx\":\n      return props.weightClassesKgMx;\n    default:\n      (sex: empty) // eslint-disable-line\n      return props.weightClassesKgMen;\n  }\n};\n\nclass ByPoints extends React.Component<Props> {\n  renderEntryRow = (entry: Entry, category: PointsCategory, key: number): any => {\n    // Skip no-show lifters.\n    if (!entryHasLifted(entry)) return null;\n\n    // Skip DQ'd lifters. Meet directors have reported that it's embarrassing\n    // to the DQ'd lifter to have that projected.\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n    if (totalKg === 0) return null;\n\n    const classes = mapSexToClasses(entry.sex, this.props);\n    const squatKg = getBest5SquatKg(entry);\n    const benchKg = getBest5BenchKg(entry);\n    const deadliftKg = getBest5DeadliftKg(entry);\n\n    const inKg = this.props.inKg;\n    const total = inKg ? totalKg : kg2lbs(totalKg);\n\n    // The place proceeds in order by key, except for DQ entries.\n    const rank = totalKg === 0 ? \"DQ\" : key + 1;\n\n    // Determine age coefficients. The parent component determines their use.\n    let c = 1.0;\n    switch (this.props.ageCoefficients) {\n      case \"None\":\n        break;\n      case \"FosterMcCulloch\":\n        c = fosterMcCulloch(entry.age);\n        break;\n      default:\n        break;\n    }\n\n    let points = 0;\n    switch (this.props.formula) {\n      case \"Bodyweight Multiple\":\n        points = (c * bodyweight_multiple(entry.bodyweightKg, totalKg)).toFixed(2);\n        break;\n      case \"Dots\":\n        points = (c * dots(entry.sex, entry.bodyweightKg, totalKg)).toFixed(2);\n        break;\n      case \"Glossbrenner\":\n        points = (c * glossbrenner(entry.sex, entry.bodyweightKg, totalKg)).toFixed(2);\n        break;\n      case \"Wilks\":\n        points = (c * wilks(entry.sex, entry.bodyweightKg, totalKg)).toFixed(2);\n        break;\n      case \"IPF Points\":\n        points = (c * ipfpoints(totalKg, entry.bodyweightKg, entry.sex, category.equipment, category.event)).toFixed(2);\n        break;\n      case \"Schwartz/Malone\":\n        points = (c * schwartzmalone(entry.sex, entry.bodyweightKg, totalKg)).toFixed(2);\n        break;\n      case \"NASA Points\":\n        points = (c * nasapoints(entry.bodyweightKg, totalKg)).toFixed(2);\n        break;\n      case \"Total\":\n        points = (c * total).toFixed(2);\n        break;\n      default:\n        (this.props.formula: empty) // eslint-disable-line\n        break;\n    }\n\n    let pointsStr = \"\";\n    if (totalKg !== 0 && points === 0) pointsStr = \"N/A\";\n    else if (totalKg !== 0 && points !== 0) pointsStr = points;\n\n    const wtcls = inKg\n      ? getWeightClassStr(classes, entry.bodyweightKg)\n      : getWeightClassLbsStr(classes, entry.bodyweightKg);\n    const bw = inKg ? entry.bodyweightKg : kg2lbs(entry.bodyweightKg);\n    const squat = inKg ? squatKg : kg2lbs(squatKg);\n    const bench = inKg ? benchKg : kg2lbs(benchKg);\n    const deadlift = inKg ? deadliftKg : kg2lbs(deadliftKg);\n\n    return (\n      <tr key={key}>\n        <td>{rank}</td>\n        <td>{entry.name}</td>\n        <td>{entry.sex}</td>\n        <td>{entry.equipment}</td>\n        <td>{entry.bodyweightKg === 0 ? null : wtcls}</td>\n        <td>{entry.bodyweightKg === 0 ? null : displayWeight(bw)}</td>\n        <td>{entry.age === 0 ? null : entry.age}</td>\n        <td>{squatKg === 0 ? \"\" : displayWeight(squat)}</td>\n        <td>{benchKg === 0 ? \"\" : displayWeight(bench)}</td>\n        <td>{deadliftKg === 0 ? \"\" : displayWeight(deadlift)}</td>\n        <td>{totalKg === 0 ? \"\" : displayWeight(total)}</td>\n        <td>{pointsStr}</td>\n      </tr>\n    );\n  };\n\n  mapSexToLabel = (sex: Sex): string => {\n    switch (sex) {\n      case \"M\":\n        return \"Men's\";\n      case \"F\":\n        return \"Women's\";\n      case \"Mx\":\n        return \"Mx\";\n      default:\n        (sex: empty) // eslint-disable-line\n        return \"\";\n    }\n  };\n\n  renderCategoryResults = (results: PointsCategoryResults, key: number): any => {\n    const { category, orderedEntries } = results;\n    const sex = this.mapSexToLabel(category.sex);\n\n    // Gather rows.\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const row = this.renderEntryRow(orderedEntries[i], category, i);\n      if (row !== null) {\n        rows.push(row);\n      }\n    }\n\n    // If all lifters were No-Show, skip displaying this category.\n    if (rows.length === 0) {\n      return null;\n    }\n\n    let eqpstr: string = category.equipment;\n    if (this.props.combineSleevesAndWraps) {\n      eqpstr = \"Sleeves + Wraps\";\n    }\n\n    return (\n      <Panel key={key}>\n        <Panel.Heading>\n          {sex} {eqpstr} {category.event}\n        </Panel.Heading>\n        <Panel.Body>\n          <Table striped hover condensed>\n            <thead>\n              <tr>\n                <th>Rank</th>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Equipment</th>\n                <th>Class</th>\n                <th>Bwt</th>\n                <th>Age</th>\n                <th>Squat</th>\n                <th>Bench</th>\n                <th>Deadlift</th>\n                <th>Total</th>\n                <th>{this.props.ageCoefficients === \"None\" ? \"Points\" : \"Age-Points\"}</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Panel.Body>\n      </Panel>\n    );\n  };\n\n  render() {\n    let entries = this.props.entries;\n\n    // If this is for Best Masters lifter, just include non-standard-aged lifters.\n    if (this.props.agePointsCategory !== \"BestLifter\") {\n      entries = entries.filter(e => {\n        // Filter out based on age.\n        switch (this.props.agePointsCategory) {\n          case \"BestLifter\":\n            break;\n          case \"BestMastersLifter\":\n            // The coefficients logic below will handle older lifters\n            // according to the chosen age coefficient system.\n            if (e.age <= 27) {\n              return false;\n            }\n            break;\n          case \"BestJuniorsLifter\":\n            // The coefficients logic below will handle older lifters\n            // according to the chosen age coefficient system.\n            if (e.age >= 27) {\n              return false;\n            }\n            break;\n          default:\n            (this.props.agePointsCategory: empty) // eslint-disable-line\n            break;\n        }\n\n        // Only include lifters who get an age bump.\n        switch (this.props.ageCoefficients) {\n          case \"None\":\n            return true;\n          case \"FosterMcCulloch\":\n            return fosterMcCulloch(e.age) !== 1.0;\n          default:\n            (this.props.ageCoefficients: empty) // eslint-disable-line\n            return true;\n        }\n      });\n    }\n\n    const results = getAllRankings(\n      entries,\n      this.props.formula,\n      this.props.ageCoefficients,\n      this.props.combineSleevesAndWraps\n    );\n\n    let categoryPanels = [];\n    for (let i = 0; i < results.length; i++) {\n      const panel = this.renderCategoryResults(results[i], i);\n      if (panel !== null) {\n        categoryPanels.push(panel);\n      }\n    }\n\n    return <div>{categoryPanels}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const day = Number(ownProps.day);\n  let entries = state.registration.entries;\n  if (day > 0) {\n    entries = entries.filter(e => e.day === day);\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    meetName: state.meet.name,\n    formula: state.meet.formula,\n    combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n    lengthDays: state.meet.lengthDays,\n    weightClassesKgMen: state.meet.weightClassesKgMen,\n    weightClassesKgWomen: state.meet.weightClassesKgWomen,\n    weightClassesKgMx: state.meet.weightClassesKgMx,\n    entries: entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ByPoints);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports data to a CSV format easily importable by OpenPowerlifting.\n\nimport { csvString, Csv } from \"./csv\";\nimport { getFinalResults } from \"../divisionPlace\";\nimport {\n  getBest3SquatKg,\n  getBest3BenchKg,\n  getBest3DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted,\n  MAX_ATTEMPTS\n} from \"../entry\";\nimport { displayWeight } from \"../units\";\n\nimport type { Category, CategoryResults } from \"../divisionPlace\";\nimport type { Entry, Equipment } from \"../../types/dataTypes\";\nimport type { GlobalState, MeetState } from \"../../types/stateTypes\";\n\nconst makeMeetCsv = (meet: MeetState): Csv => {\n  let csv = new Csv();\n  csv.fieldnames = [\"Federation\", \"Date\", \"MeetCountry\", \"MeetState\", \"MeetTown\", \"MeetName\", \"Formula\"];\n\n  let row: Array<string> = [\n    csvString(meet.federation),\n    csvString(meet.date),\n    csvString(meet.country),\n    csvString(meet.state),\n    csvString(meet.city),\n    csvString(meet.name),\n    csvString(meet.formula)\n  ];\n  csv.rows = [row];\n\n  // An optional RuleSet column may be provided.\n  if (meet.combineSleevesAndWraps === true) {\n    csv.fieldnames.push(\"RuleSet\");\n    csv.rows[0].push(\"CombineRawAndWraps\");\n  }\n\n  return csv;\n};\n\nconst makeEntriesCsv = (state: GlobalState): Csv => {\n  let csv = new Csv();\n\n  let squatFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    squatFieldnames.push(\"Squat\" + (i + 1) + \"Kg\");\n  }\n  squatFieldnames.push(\"Best3SquatKg\");\n\n  let benchFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    benchFieldnames.push(\"Bench\" + (i + 1) + \"Kg\");\n  }\n  benchFieldnames.push(\"Best3BenchKg\");\n\n  let deadliftFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    deadliftFieldnames.push(\"Deadlift\" + (i + 1) + \"Kg\");\n  }\n  deadliftFieldnames.push(\"Best3DeadliftKg\");\n\n  csv.fieldnames = Array.prototype.concat(\n    [\"Place\", \"Name\", \"Sex\", \"BirthDate\", \"Age\", \"Country\", \"State\"],\n    [\"Equipment\", \"Division\", \"BodyweightKg\", \"WeightClassKg\"],\n    squatFieldnames,\n    benchFieldnames,\n    deadliftFieldnames,\n    [\"TotalKg\", \"Event\", \"Team\"]\n  );\n\n  const results: Array<CategoryResults> = getFinalResults(\n    state.registration.entries,\n    state.meet.weightClassesKgMen,\n    state.meet.weightClassesKgWomen,\n    state.meet.weightClassesKgMx,\n    state.meet.combineSleevesAndWraps\n  );\n\n  for (let i = 0; i < results.length; i++) {\n    const { category, orderedEntries } = results[i];\n\n    for (let j = 0; j < orderedEntries.length; j++) {\n      addEntriesRow(csv, category, orderedEntries[j], j);\n    }\n  }\n\n  return csv;\n};\n\nconst standardizeEquipment = (eq: Equipment): string => {\n  switch (eq) {\n    case \"Bare\":\n      return \"Raw\";\n    case \"Sleeves\":\n      return \"Raw\";\n    case \"Wraps\":\n      return \"Wraps\";\n    case \"Single-ply\":\n      return \"Single-ply\";\n    case \"Multi-ply\":\n      return \"Multi-ply\";\n    default:\n      (eq: empty); // eslint-disable-line\n      return \"Raw\";\n  }\n};\n\nconst addEntriesRow = (csv: Csv, category: Category, entry: Entry, index: number) => {\n  const finalEventTotalKg = getFinalEventTotalKg(entry, category.event);\n\n  // Initialize an empty row with all columns available.\n  let row: Array<string> = Array(csv.fieldnames.length).fill(\"\");\n\n  if (!entryHasLifted(entry)) {\n    row[csv.index(\"Place\")] = \"NS\"; // No-Show.\n  } else {\n    row[csv.index(\"Place\")] = finalEventTotalKg === 0 ? \"DQ\" : csvString(index + 1);\n  }\n\n  row[csv.index(\"Name\")] = csvString(entry.name);\n  row[csv.index(\"Sex\")] = csvString(entry.sex);\n  row[csv.index(\"BirthDate\")] = csvString(entry.birthDate);\n  row[csv.index(\"Age\")] = csvString(entry.age);\n  row[csv.index(\"Country\")] = csvString(entry.country);\n  row[csv.index(\"State\")] = csvString(entry.state);\n  row[csv.index(\"Equipment\")] = csvString(standardizeEquipment(entry.equipment));\n  row[csv.index(\"Division\")] = csvString(category.division);\n  row[csv.index(\"BodyweightKg\")] = csvString(displayWeight(entry.bodyweightKg));\n  row[csv.index(\"WeightClassKg\")] = csvString(category.weightClassStr);\n  row[csv.index(\"TotalKg\")] = csvString(displayWeight(finalEventTotalKg));\n  row[csv.index(\"Event\")] = csvString(category.event);\n  row[csv.index(\"Team\")] = csvString(entry.team);\n\n  // Squat.\n  if (category.event.includes(\"S\")) {\n    row[csv.index(\"Best3SquatKg\")] = csvString(displayWeight(getBest3SquatKg(entry)));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Squat\" + (i + 1) + \"Kg\";\n      row[csv.index(field)] = csvString(displayWeight(entry.squatKg[i] * entry.squatStatus[i]));\n    }\n  }\n\n  // Bench.\n  if (category.event.includes(\"B\")) {\n    row[csv.index(\"Best3BenchKg\")] = csvString(displayWeight(getBest3BenchKg(entry)));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Bench\" + (i + 1) + \"Kg\";\n      row[csv.index(field)] = csvString(displayWeight(entry.benchKg[i] * entry.benchStatus[i]));\n    }\n  }\n\n  // Deadlift.\n  if (category.event.includes(\"D\")) {\n    row[csv.index(\"Best3DeadliftKg\")] = csvString(displayWeight(getBest3DeadliftKg(entry)));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Deadlift\" + (i + 1) + \"Kg\";\n      row[csv.index(field)] = csvString(displayWeight(entry.deadliftKg[i] * entry.deadliftStatus[i]));\n    }\n  }\n\n  csv.rows.push(row);\n};\n\nexport const exportAsOplCsv = (state: GlobalState): string => {\n  const meetCsv: Csv = makeMeetCsv(state.meet);\n\n  let entriesCsv: Csv = makeEntriesCsv(state);\n  entriesCsv.removeEmptyColumns();\n\n  const versionStr = \"OPL Format v1,Submit by email:,issues@openpowerlifting.org\";\n\n  return versionStr + \"\\n\\n\" + meetCsv.toString() + \"\\n\" + entriesCsv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow strict\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports data to a spreadsheet format used by the USAPL.\n\nimport { csvString, Csv } from \"./csv\";\nimport { getFinalResults } from \"../divisionPlace\";\nimport { displayWeight } from \"../units\";\n\nimport type { Category, CategoryResults } from \"../divisionPlace\";\nimport type { Entry, Event } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\n// Translates the event from our format to the NextLifter format.\nconst translateEvent = (ev: Event): string => {\n  switch (ev) {\n    // Variants present in the NextLifter software.\n    case \"SBD\":\n      return \"PL\";\n    case \"BD\":\n      return \"PP\";\n    case \"S\":\n      return \"SQ\";\n    case \"B\":\n      return \"BP\";\n    case \"D\":\n      return \"DL\";\n\n    // These variants aren't selectable in NextLifter, so the USAPL doesn't use them.\n    case \"SB\":\n      return \"SB\";\n    case \"SD\":\n      return \"SD\";\n    default:\n      (ev: empty); // eslint-disable-line\n      return ev;\n  }\n};\n\n// Converts the ISO8601 entry.birthDate to USAPL MM/DD/YYYY format.\nconst makeBirthDate = (entry: Entry): string => {\n  if (entry.birthDate === undefined || entry.birthDate === \"\") {\n    return \"\";\n  }\n  let [year, month, day]: Array<string> = entry.birthDate.split(\"-\");\n  return month + \"/\" + day + \"/\" + year;\n};\n\n// Given an Entry and its index in the CategoryResults.orderedEntries,\n// render all that information as a one-liner CSV string.\nconst addDataRow = (csv: Csv, category: Category, entry: Entry) => {\n  const hasSquat: boolean = category.event.includes(\"S\");\n  const hasBench: boolean = category.event.includes(\"B\");\n  const hasDL: boolean = category.event.includes(\"D\");\n\n  // Initialize an empty row with all columns available.\n  let row: Array<string> = Array(csv.fieldnames.length).fill(\"\");\n\n  row[csv.index(\"Name\")] = csvString(entry.name);\n  row[csv.index(\"Team\")] = csvString(entry.team);\n  row[csv.index(\"Div\")] = csvString(category.division);\n  row[csv.index(\"Bwt - kg\")] = csvString(displayWeight(entry.bodyweightKg));\n  row[csv.index(\"IPF Wt Cls\")] = csvString(category.weightClassStr);\n  row[csv.index(\"DOB\")] = csvString(makeBirthDate(entry));\n  row[csv.index(\"Squat 1\")] = csvString(displayWeight(hasSquat ? entry.squatKg[0] * entry.squatStatus[0] : 0));\n  row[csv.index(\"Squat 2\")] = csvString(displayWeight(hasSquat ? entry.squatKg[1] * entry.squatStatus[1] : 0));\n  row[csv.index(\"Squat 3\")] = csvString(displayWeight(hasSquat ? entry.squatKg[2] * entry.squatStatus[2] : 0));\n  row[csv.index(\"Bench 1\")] = csvString(displayWeight(hasBench ? entry.benchKg[0] * entry.benchStatus[0] : 0));\n  row[csv.index(\"Bench 2\")] = csvString(displayWeight(hasBench ? entry.benchKg[1] * entry.benchStatus[1] : 0));\n  row[csv.index(\"Bench 3\")] = csvString(displayWeight(hasBench ? entry.benchKg[2] * entry.benchStatus[2] : 0));\n  row[csv.index(\"Deadlift 1\")] = csvString(displayWeight(hasDL ? entry.deadliftKg[0] * entry.deadliftStatus[0] : 0));\n  row[csv.index(\"Deadlift 2\")] = csvString(displayWeight(hasDL ? entry.deadliftKg[1] * entry.deadliftStatus[1] : 0));\n  row[csv.index(\"Deadlift 3\")] = csvString(displayWeight(hasDL ? entry.deadliftKg[2] * entry.deadliftStatus[2] : 0));\n  row[csv.index(\"Event\")] = csvString(translateEvent(category.event));\n  row[csv.index(\"State\")] = csvString(entry.state);\n  row[csv.index(\"MemberID\")] = csvString(entry.memberId);\n  // TODO: Drug Test.\n\n  csv.rows.push(row);\n};\n\nexport const exportAsUSAPLCsv = (state: GlobalState): string => {\n  let csv = new Csv();\n  csv.fieldnames = [\n    \"Name\",\n    \"Team\",\n    \"Div\", // Division.\n    \"Bwt - kg\", // Bodyweight, kg.\n    \"IPF Wt Cls\", // IPF Weight Class (SHW as \"120+\", same format).\n    \"DOB\", // Date of Birth, in MM/DD/YYYY format.\n    \"Squat 1\", // Units unspecified, but seem to be kg.\n    \"Squat 2\",\n    \"Squat 3\",\n    \"Bench 1\",\n    \"Bench 2\",\n    \"Bench 3\",\n    \"Deadlift 1\",\n    \"Deadlift 2\",\n    \"Deadlift 3\",\n    \"Event\", // In NextLifter format (PL, BO, etc.).\n    \"State\", // USA state of residence of the lifter, as abbreviation.\n    \"MemberID\",\n    \"Drug Test\" // \"Y\" if a test was performed, blank otherwise.\n  ];\n\n  const results: Array<CategoryResults> = getFinalResults(\n    state.registration.entries,\n    state.meet.weightClassesKgMen,\n    state.meet.weightClassesKgWomen,\n    state.meet.weightClassesKgMx,\n    state.meet.combineSleevesAndWraps\n  );\n\n  for (let i = 0; i < results.length; i++) {\n    const { category, orderedEntries } = results[i];\n\n    for (let j = 0; j < orderedEntries.length; j++) {\n      addDataRow(csv, category, orderedEntries[j]);\n    }\n  }\n\n  return csv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Results page, contained by the ResultsContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, FormControl, Panel } from \"react-bootstrap\";\nimport saveAs from \"file-saver\";\n\nimport ByDivision from \"./ByDivision\";\nimport ByPoints from \"./ByPoints\";\nimport ErrorModal from \"../ErrorModal\";\n\nimport { mergePlatform } from \"../../actions/registrationActions\";\n\nimport { liftingPresentOnPlatform, getWhetherPlatformsHaveLifted } from \"../../logic/entry\";\nimport { exportAsOplCsv } from \"../../logic/export/oplcsv\";\nimport { exportAsUSAPLCsv } from \"../../logic/export/usapl\";\n\nimport type { Entry } from \"../../types/dataTypes\";\nimport type { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./ResultsView.module.scss\";\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\ninterface StateProps {\n  global: GlobalState;\n}\n\ninterface DispatchProps {\n  mergePlatform: (day: number, platform: number, platformEntries: Array<Entry>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  day: number;\n  by: \"Division\" | \"Points\";\n  // Controls the ErrorModal popup. Shown when error !== \"\".\n  error: string;\n}\n\n// FIXME: Unfortunate use of globals :/ I don't have a better idea.\n// This is to pass information from the merge button click handler to the\n// file loader click handler.\nlet globalMergeDay: number = 0;\nlet globalMergePlatform: number = 0;\n\nclass ResultsView extends React.Component<Props, InternalState> {\n  constructor(props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleByChange = this.handleByChange.bind(this);\n    this.handleExportAsOplCsvClick = this.handleExportAsOplCsvClick.bind(this);\n    this.handleExportAsUSAPLCsvClick = this.handleExportAsUSAPLCsvClick.bind(this);\n    this.handleExportPlatformClick = this.handleExportPlatformClick.bind(this);\n    this.handleMergePlatformClick = this.handleMergePlatformClick.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.closeErrorModal = this.closeErrorModal.bind(this);\n\n    this.state = {\n      day: 0, // Meaning \"all\". Flow complained about mixing numbers and strings.\n      by: \"Division\",\n      error: \"\"\n    };\n  }\n\n  makeDayOptions = () => {\n    let options = [\n      <option key={\"all\"} value={0}>\n        All Days Together\n      </option>\n    ];\n    for (let day = 1; day <= this.props.global.meet.lengthDays; day++) {\n      options.push(\n        <option key={day} value={day}>\n          Just Day {day}\n        </option>\n      );\n    }\n    return options;\n  };\n\n  handleDayChange = event => {\n    const day = event.target.value;\n    if (this.state.day !== day) {\n      this.setState({ day: day });\n    }\n  };\n\n  handleByChange = event => {\n    const by = event.target.value;\n    if (this.state.by !== by) {\n      this.setState({ by: by });\n    }\n  };\n\n  handleExportAsOplCsvClick = event => {\n    // TODO: Share this logic with HomeContainer.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const csv: string = exportAsOplCsv(this.props.global);\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, meetname + \".opl.csv\");\n  };\n\n  handleExportAsUSAPLCsvClick = event => {\n    // TODO: Share this logic with handleExportAsOplCsvClick.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const csv: string = exportAsUSAPLCsv(this.props.global);\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, meetname + \".USAPL.csv\");\n  };\n\n  handleExportPlatformClick = (day: number, platform: number, event: Object) => {\n    // TODO: Share this logic with handleExportAsOplCsvClick.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n    const exportname = meetname + \"-Day-\" + day + \"-Platform-\" + platform;\n\n    const state = JSON.stringify(this.props.global);\n    const blob = new Blob([state], { type: \"application/json;charset=utf-8\" });\n    saveAs(blob, exportname + \".export.openlifter\");\n  };\n\n  // The file input is hidden, and we want to use a button to activate it.\n  // This event handler makes a proxy call to the *real* event handler.\n  handleMergePlatformClick = (day: number, platform: number, event: Object) => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper !== null) {\n      globalMergeDay = day;\n      globalMergePlatform = platform;\n      loadHelper.click();\n    }\n  };\n\n  // Called when a file is selected for merging platform data.\n  handleLoadFileInput = () => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement)) {\n      return;\n    }\n\n    // Get the (day, platform) from global state.\n    const day: number = globalMergeDay;\n    const platform: number = globalMergePlatform;\n\n    // Remember the props in the onload() closure.\n    let props = this.props;\n\n    let rememberThis = this;\n    const selectedFile = loadHelper.files[0];\n    let reader = new FileReader();\n    reader.onload = function(event) {\n      let error: string | null = null;\n      try {\n        let obj: GlobalState = JSON.parse(event.target.result);\n\n        // stateVersion must match.\n        if (obj.versions.stateVersion !== props.global.versions.stateVersion) {\n          error =\n            \"This meet uses data version \" +\n            props.global.versions.stateVersion +\n            \", but the selected file uses data version \" +\n            obj.versions.stateVersion;\n        } else if (obj.meet.name !== props.global.meet.name) {\n          // The meet name must match, for sanity checking.\n          error =\n            'This meet is named \"' +\n            props.global.meet.name +\n            '\", but the selected file is for the meet \"' +\n            obj.meet.name +\n            '\". Might be the wrong competition?';\n        } else if (!liftingPresentOnPlatform(obj.registration.entries, day, platform)) {\n          // The meet must actually contain data from the given (day, platform).\n          error = \"The selected file doesn't have any lifting data for Day \" + day + \" Platform \" + platform + \".\";\n        } else {\n          // Sanity checks passed: fire off a mergePlatform action!\n          const platformEntries = obj.registration.entries.filter(e => {\n            return e.day === day && e.platform === platform;\n          });\n          props.mergePlatform(day, platform, platformEntries);\n        }\n      } catch (err) {\n        error = \"Couldn't parse JSON.\";\n      }\n\n      if (typeof error === \"string\") {\n        rememberThis.setState({ error: error });\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  closeErrorModal = () => {\n    this.setState({ error: \"\" });\n  };\n\n  makePlatformMergeButtons = () => {\n    // Array accessed by platformsHaveLifted[day-1][platform-1].\n    const platformsHaveLifted: Array<Array<boolean>> = getWhetherPlatformsHaveLifted(\n      this.props.global.meet.platformsOnDays,\n      this.props.global.registration.entries\n    );\n\n    let forms = [];\n\n    for (let i = 0; i < platformsHaveLifted.length; i++) {\n      const liftedOnDay = platformsHaveLifted[i];\n\n      let buttons = [];\n      for (let j = 0; j < liftedOnDay.length; j++) {\n        const lifted = liftedOnDay[j];\n        const actionText = lifted === true ? \"Export\" : \"Merge\";\n        const bsStyle = lifted === true ? \"success\" : \"warning\";\n        const marginStyle = j > 0 ? { marginLeft: \"14px\" } : null;\n        buttons.push(\n          <Button\n            key={i + \"-\" + j}\n            bsStyle={bsStyle}\n            style={marginStyle}\n            onClick={e => {\n              lifted === true\n                ? this.handleExportPlatformClick(i + 1, j + 1, e)\n                : this.handleMergePlatformClick(i + 1, j + 1, e);\n            }}\n          >\n            {actionText} Day {i + 1} Platform {j + 1}\n          </Button>\n        );\n      }\n\n      forms.push(\n        <div key={i}>\n          <div>Combine Platforms for Day {i + 1}</div>\n          <div>{buttons}</div>\n          {i < platformsHaveLifted.length - 1 ? <br /> : null}\n        </div>\n      );\n    }\n\n    return forms;\n  };\n\n  render() {\n    let results = null;\n    switch (this.state.by) {\n      case \"Division\":\n        results = <ByDivision key={this.state.day} day={this.state.day} />;\n        break;\n      case \"Points\":\n        results = (\n          <ByPoints key={this.state.day} day={this.state.day} ageCoefficients=\"None\" agePointsCategory=\"BestLifter\" />\n        );\n        break;\n      case \"BestMastersLifter\":\n        results = (\n          <ByPoints\n            key={this.state.day}\n            day={this.state.day}\n            ageCoefficients={this.props.global.meet.ageCoefficients}\n            agePointsCategory=\"BestMastersLifter\"\n          />\n        );\n        break;\n      case \"BestJuniorsLifter\":\n        results = (\n          <ByPoints\n            key={this.state.day}\n            day={this.state.day}\n            ageCoefficients={this.props.global.meet.ageCoefficients}\n            agePointsCategory=\"BestJuniorsLifter\"\n          />\n        );\n        break;\n      default:\n        break;\n    }\n\n    let daySelector = null;\n    if (this.props.global.meet.lengthDays > 1) {\n      daySelector = (\n        <FormControl\n          defaultValue={this.state.day}\n          componentClass=\"select\"\n          onChange={this.handleDayChange}\n          className={styles.dropdown}\n        >\n          {this.makeDayOptions()}\n        </FormControl>\n      );\n    }\n\n    return (\n      <div style={marginStyle}>\n        <ErrorModal\n          error={this.state.error}\n          title=\"Merge Error\"\n          show={this.state.error !== \"\"}\n          close={this.closeErrorModal}\n        />\n\n        <Panel bsStyle=\"primary\">\n          <Panel.Heading>Merge Platforms</Panel.Heading>\n          <Panel.Body>\n            <div style={{ fontWeight: \"bold\" }}>Merging platforms will overwrite data. Please save before merging.</div>\n            <br />\n            {this.makePlatformMergeButtons()}\n          </Panel.Body>\n        </Panel>\n\n        <Panel>\n          <Panel.Heading>Export Official Results</Panel.Heading>\n          <Panel.Body>\n            <Button onClick={this.handleExportAsOplCsvClick}>Export for OpenPowerlifting</Button>\n\n            <Button onClick={this.handleExportAsUSAPLCsvClick} style={{ marginLeft: \"14px\" }}>\n              Export for USAPL\n            </Button>\n          </Panel.Body>\n        </Panel>\n\n        <Panel bsStyle=\"info\">\n          <Panel.Heading>Results For...</Panel.Heading>\n          <Panel.Body className={styles.controlPanel}>\n            {daySelector}\n\n            <FormControl\n              defaultValue={this.state.by}\n              componentClass=\"select\"\n              onChange={this.handleByChange}\n              className={styles.dropdown}\n              style={{ marginLeft: \"14px\" }}\n            >\n              <option value=\"Division\">By Division</option>\n              {this.props.global.meet.ageCoefficients !== \"None\" ? (\n                <option value=\"BestJuniorsLifter\">Best Juniors Lifter</option>\n              ) : null}\n              {this.props.global.meet.ageCoefficients !== \"None\" ? (\n                <option value=\"BestMastersLifter\">Best Masters Lifter</option>\n              ) : null}\n              <option value=\"Points\">Best Lifter</option>\n            </FormControl>\n          </Panel.Body>\n        </Panel>\n\n        {results}\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".openlifter,.openlifter.txt\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    global: state\n  };\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => {\n  return {\n    mergePlatform: (day, platform, platformEntries) => dispatch(mergePlatform(day, platform, platformEntries))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResultsView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Results page.\n\nimport React from \"react\";\nimport ResultsView from \"../components/results/ResultsView\";\n\nclass ResultsContainer extends React.Component<{}> {\n  render() {\n    return <ResultsView />;\n  }\n}\n\nexport default ResultsContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Common functions shared by the Randomize feature.\n\n// Generate a gibberish string, between 0-11 characters.\nexport const randomString = (): string => {\n  // Converts each digit to a value in base 36.\n  return Math.random()\n    .toString(36)\n    .substr(2);\n};\n\n// Generate a random integer between max and min.\nexport const randomInt = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Generate a random floating-point number with a set number of fractional digits.\nexport const randomFixedPoint = (min: number, max: number, fixedPoints: number) => {\n  const power = Math.pow(10, fixedPoints);\n\n  // Construct an integer from [0, (max - min + 1) * 10^fixedPoints].\n  const k = Math.floor(Math.random() * (max - min + 1) * power);\n\n  // Translate it back to normal space.\n  return k / power + min;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Meet Setup state, for debugging.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { randomString, randomInt, randomFixedPoint } from \"./RandomizeHelpers\";\n\nimport {\n  setDivisions,\n  setFederation,\n  setLengthDays,\n  setMeetName,\n  setPlatformsOnDays,\n  setWeightClasses\n} from \"../../actions/meetSetupActions\";\n\nconst NonsenseFederations = [\n  \"CTHULHU\",\n  \"USPLAWH\",\n  \"FIREFOX\",\n  \"PIZZAHUT\",\n  \"50% RAW\",\n  \"TODDLERS\",\n  \"COFFEE\",\n  \"THEBORG\",\n  \"LETITSNOW\"\n];\n\nconst NonsenseDivisions = [\"Masters\", \"Juniors\", \"Lawyers\", \"Infants\", \"Turtles\", \"Rabbits\"];\n\nclass RandomizeMeetSetupButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.randomizeMeetSetup = this.randomizeMeetSetup.bind(this);\n  }\n\n  randomizeMeetSetup() {\n    // Set a gibberish MeetName.\n    // ==========================================\n    this.props.setMeetName(randomString() + randomString());\n\n    // Generate a nonsense federation.\n    // ==========================================\n    const fed = NonsenseFederations[randomInt(0, NonsenseFederations.length - 1)];\n    this.props.setFederation(fed);\n\n    // Generate nonsense weight classes.\n    // ==========================================\n    const numClassesMen = randomInt(5, 12);\n    const numClassesWomen = randomInt(4, 8);\n\n    let classesMen = [];\n    for (let i = 0; i < numClassesMen; i++) {\n      classesMen.push(randomFixedPoint(40, 145, 1));\n    }\n    classesMen = classesMen.sort((a, b) => Number(a) - Number(b));\n\n    let classesWomen = [];\n    for (let i = 0; i < numClassesWomen; i++) {\n      classesWomen.push(randomFixedPoint(35, 110, 1));\n    }\n    classesWomen = classesWomen.sort((a, b) => Number(a) - Number(b));\n\n    let classesMx = [];\n    for (let i = 0; i < numClassesWomen; i++) {\n      classesMx.push(randomFixedPoint(40, 120, 1));\n    }\n    classesMx = classesMx.sort((a, b) => Number(a) - Number(b));\n\n    this.props.setWeightClasses(\"M\", classesMen);\n    this.props.setWeightClasses(\"F\", classesWomen);\n    this.props.setWeightClasses(\"Mx\", classesMx);\n\n    // Generate nonsense days and platforms.\n    // ==========================================\n    const numDays = randomInt(1, 4);\n    this.props.setLengthDays(numDays);\n\n    for (let i = 0; i < numDays; i++) {\n      const day = i + 1;\n      const numPlatforms = randomInt(1, 2);\n      this.props.setPlatformsOnDays(day, numPlatforms);\n    }\n\n    // Generate nonsense divisions.\n    // ==========================================\n    const numDivisions = randomInt(1, 20);\n    let divisions = [];\n    for (let i = 0; i < numDivisions; i++) {\n      let div = NonsenseDivisions[randomInt(0, NonsenseDivisions.length - 1)];\n      if (Math.random() > 0.5) {\n        const age_lower = randomInt(1, 40);\n        const age_upper = randomInt(age_lower + 1, 99);\n        div = div + \" \" + String(age_lower) + \"-\" + String(age_upper);\n      }\n\n      // Disallow repeat divisions.\n      if (divisions.indexOf(div) === -1) {\n        divisions.push(div);\n      }\n    }\n    this.props.setDivisions(divisions);\n  }\n\n  render() {\n    return <Button onClick={this.randomizeMeetSetup}>Meet Setup</Button>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    setDivisions: divisions => dispatch(setDivisions(divisions)),\n    setFederation: federation => dispatch(setFederation(federation)),\n    setLengthDays: length => dispatch(setLengthDays(length)),\n    setMeetName: name => dispatch(setMeetName(name)),\n    setPlatformsOnDays: (day, count) => dispatch(setPlatformsOnDays(day, count)),\n    setWeightClasses: (sex, classesKg) => dispatch(setWeightClasses(sex, classesKg))\n  };\n};\n\nRandomizeMeetSetupButton.propTypes = {\n  setDivisions: PropTypes.func.isRequired,\n  setFederation: PropTypes.func.isRequired,\n  setLengthDays: PropTypes.func.isRequired,\n  setMeetName: PropTypes.func.isRequired,\n  setPlatformsOnDays: PropTypes.func.isRequired,\n  setWeightClasses: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeMeetSetupButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Registration page, for debugging.\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { randomInt } from \"./RandomizeHelpers\";\n\nimport { newRegistration, deleteRegistration } from \"../../actions/registrationActions\";\n\nconst NonsenseFirstNames = [\n  \"Aragorn\",\n  \"Arwen\",\n  \"Aule\",\n  \"Balin\",\n  \"Beorn\",\n  \"Beregond\",\n  \"Bert\",\n  \"Bifur\",\n  \"Bilbo\",\n  \"Bofur\",\n  \"Bolg\",\n  \"Bombur\",\n  \"Boromir\",\n  \"Bregalad\",\n  \"Bullroarer\",\n  \"Bungo\",\n  \"Carc\",\n  \"Celeborn\",\n  \"Dain\",\n  \"Denethor\",\n  \"Dori\",\n  \"Dwalin\",\n  \"Elrohir\",\n  \"Elrond\",\n  \"Eomer\",\n  \"Eowyn\",\n  \"Este\",\n  \"Faramir\",\n  \"Fili\",\n  \"Fredegar\",\n  \"Frodo\",\n  \"Galadriel\",\n  \"Galion\",\n  \"Gandalf\",\n  \"Gimli\",\n  \"Gloin\",\n  \"Glorfindel\",\n  \"Golfimbul\",\n  \"Gollum\",\n  \"Gothmog\",\n  \"Grima\",\n  \"Imrahil\",\n  \"Kili\",\n  \"Legolas\",\n  \"Lorien\",\n  \"Mandos\",\n  \"Manwe\",\n  \"Melkor\",\n  \"Meriadoc\",\n  \"Nessa\",\n  \"Nienna\",\n  \"Nori\",\n  \"Oin\",\n  \"Ori\",\n  \"Orome\",\n  \"Peregrin\",\n  \"Pippin\",\n  \"Radagast\",\n  \"Roac\",\n  \"Samwise\",\n  \"Saruman\",\n  \"Sauron\",\n  \"Shelob\",\n  \"Smaug\",\n  \"Theoden\",\n  \"Thorin\",\n  \"Thranduil\",\n  \"Tom\",\n  \"Treebeard\",\n  \"Tulkas\",\n  \"Ulmo\",\n  \"Vaire\",\n  \"Vana\",\n  \"Varda\",\n  \"William\",\n  \"Yavanna\"\n];\n\nconst NonsenseLastNames = [\n  \"Black\",\n  \"Burbage\",\n  \"Carrow\",\n  \"Cattermole\",\n  \"Chang\",\n  \"Clearwater\",\n  \"Crabbe\",\n  \"Creevey\",\n  \"Crouch\",\n  \"Delacour\",\n  \"Diggory\",\n  \"Dumbledore\",\n  \"Dursley\",\n  \"Edgecombe\",\n  \"Filch\",\n  \"Flitwick\",\n  \"Fudge\",\n  \"Goyle\",\n  \"Granger\",\n  \"Grindelwald\",\n  \"Hagrid\",\n  \"Hufflepuff\",\n  \"Kettleburn\",\n  \"Lockhart\",\n  \"Longbottom\",\n  \"Lovegood\",\n  \"Lupin\",\n  \"Malfoy\",\n  \"Marchbanks\",\n  \"McGonagall\",\n  \"McLaggen\",\n  \"Moody\",\n  \"Nott\",\n  \"Ogden\",\n  \"Ollivander\",\n  \"Parkinson\",\n  \"Pettigrew\",\n  \"Peverell\",\n  \"Pince\",\n  \"Podmore\",\n  \"Pomfrey\",\n  \"Potter\",\n  \"Quirrell\",\n  \"Riddle\",\n  \"Rookwood\",\n  \"Rowle\",\n  \"Runcorn\",\n  \"Scrimgeour\",\n  \"Shacklebolt\",\n  \"Shunpike\",\n  \"Sinistra\",\n  \"Slughorn\",\n  \"Slytherin\",\n  \"Snape\",\n  \"Spinnet\",\n  \"Sprout\",\n  \"Thicknesse\",\n  \"Tonks\",\n  \"Trelawney\",\n  \"Twycross\",\n  \"Umbridge\",\n  \"Vance\",\n  \"Voldemort\",\n  \"Weasley\",\n  \"Wood\",\n  \"Yaxley\",\n  \"Zabini\"\n];\n\nclass RandomizeRegistrationButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.deleteExistingRegistrations = this.deleteExistingRegistrations.bind(this);\n    this.generateEntries = this.generateEntries.bind(this);\n    this.randomizeRegistration = this.randomizeRegistration.bind(this);\n  }\n\n  deleteExistingRegistrations() {\n    const entryIds = this.props.registration.entries.map(e => e.id);\n    for (let i = 0; i < entryIds.length; i++) {\n      this.props.deleteRegistration(entryIds[i]);\n    }\n  }\n\n  // Generate entries in a flight together, in case we want to give them\n  // similar properties.\n  generateEntries(day, platform, flight) {\n    const numLifters = randomInt(6, 18);\n\n    for (let i = 0; i < numLifters; i++) {\n      // Set a nonsense Name.\n      // ==========================================\n      const firstName = NonsenseFirstNames[randomInt(0, NonsenseFirstNames.length - 1)];\n      const lastName = NonsenseLastNames[randomInt(0, NonsenseLastNames.length - 1)];\n      const name = firstName + \" \" + lastName;\n\n      // Set a random Sex.\n      // ==========================================\n      const sex = [\"M\", \"F\", \"Mx\"][randomInt(0, 2)];\n\n      // Generate random events, making most lifters SBD.\n      // ==========================================\n      let events = [];\n      if (Math.random() < 0.5) {\n        events.push(\"SBD\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"BD\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"S\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"B\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"D\");\n      }\n      if (events.length === 0) {\n        events.push(\"SBD\");\n      }\n\n      // Generate random equipment, making most lifters SBD,\n      // being careful that it matches their events.\n      // ==========================================\n      let hasSquat = false;\n      for (let i = 0; i < events.length; i++) {\n        if (events[i].includes(\"S\")) {\n          hasSquat = true;\n          break;\n        }\n      }\n\n      const equipmentSelect = Math.random();\n      let equipment = \"Sleeves\";\n      if (equipmentSelect < 0.7) {\n        // Nothing, sleeves default case.\n      } else if (equipmentSelect < 0.9) {\n        if (hasSquat) {\n          equipment = \"Wraps\";\n        }\n      } else if (equipmentSelect < 0.95) {\n        equipment = \"Single-ply\";\n      } else {\n        equipment = \"Multi-ply\";\n      }\n\n      // File into random divisions.\n      // ==========================================\n      let divisions = [];\n      if (this.props.meet.divisions.length > 0) {\n        const divisionsUpperBound = Math.max(1, this.props.meet.divisions.length - 1);\n        const numDivisions = randomInt(1, divisionsUpperBound);\n\n        // List of remaining available divisions.\n        let divchooser = this.props.meet.divisions.slice();\n\n        for (let i = 0; i < numDivisions; i++) {\n          const choice = randomInt(0, divchooser.length - 1);\n          divisions.push(divchooser[choice]);\n\n          // Delete the choice from the list of available divisions.\n          divchooser.splice(choice, 1);\n        }\n      }\n\n      this.props.newRegistration({\n        day: day,\n        platform: platform,\n        flight: flight,\n        name: name,\n        sex: sex,\n        events: events,\n        equipment: equipment,\n        divisions: divisions\n      });\n    }\n  }\n\n  randomizeRegistration() {\n    const FLIGHTCHARS = \"ABCDEFGHIJKLMNOP\";\n\n    this.deleteExistingRegistrations();\n    for (let day = 1; day <= this.props.meet.lengthDays; day++) {\n      const numPlatforms = this.props.meet.platformsOnDays[day - 1];\n      for (let platform = 1; platform <= numPlatforms; platform++) {\n        const numFlights = randomInt(1, 3);\n        for (let flight = 0; flight < numFlights; flight++) {\n          this.generateEntries(day, platform, FLIGHTCHARS[flight]);\n        }\n      }\n    }\n  }\n\n  render() {\n    return <Button onClick={this.randomizeRegistration}>Registration</Button>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    newRegistration: obj => dispatch(newRegistration(obj)),\n    deleteRegistration: entryId => dispatch(deleteRegistration(entryId))\n  };\n};\n\nRandomizeRegistrationButton.propTypes = {\n  meet: PropTypes.shape({\n    lengthDays: PropTypes.number.isRequired,\n    platformsOnDays: PropTypes.array.isRequired,\n    divisions: PropTypes.array.isRequired\n  }),\n  registration: PropTypes.shape({\n    entries: PropTypes.array.isRequired\n  }),\n  newRegistration: PropTypes.func.isRequired,\n  deleteRegistration: PropTypes.func.isRequired\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeRegistrationButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Registration page, for debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"react-bootstrap\";\n\nimport { randomInt, randomFixedPoint } from \"./RandomizeHelpers\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\nimport { lbs2kg } from \"../../logic/units\";\n\nimport type { GlobalState, MeetState, RegistrationState } from \"../../types/stateTypes\";\nimport type { Lift } from \"../../types/dataTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  registration: RegistrationState;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: Object) => void;\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass RandomizeWeighinsButton extends React.Component<Props> {\n  constructor(props) {\n    super(props);\n    this.randomizeWeighins = this.randomizeWeighins.bind(this);\n  }\n\n  randomAttempt = () => {\n    const multiple = 2.5;\n    if (this.props.meet.inKg) {\n      return Math.floor(randomFixedPoint(25, 360, 1) / multiple) * multiple;\n    } else {\n      return lbs2kg(Math.floor(randomFixedPoint(55, 800, 1) / multiple) * multiple);\n    }\n  };\n\n  randomizeWeighins = () => {\n    const entries = this.props.registration.entries;\n    const inKg: boolean = this.props.meet.inKg;\n\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n\n      // Get a random bodyweight.\n      // ==========================================\n      const bodyweightKg = inKg ? randomFixedPoint(20, 150, 1) : lbs2kg(randomFixedPoint(40, 320, 1));\n      this.props.updateRegistration(entry.id, {\n        bodyweightKg: bodyweightKg\n      });\n\n      // Get a random age.\n      const age = randomInt(5, 79);\n      this.props.updateRegistration(entry.id, {\n        age: age\n      });\n\n      // Figure out which events we're generating information for.\n      // ==========================================\n      let hasSquat = false;\n      let hasBench = false;\n      let hasDeadlift = false;\n      for (let j = 0; j < entry.events.length; j++) {\n        const e = entry.events[j];\n        if (e.includes(\"S\")) {\n          hasSquat = true;\n        }\n        if (e.includes(\"B\")) {\n          hasBench = true;\n        }\n        if (e.includes(\"D\")) {\n          hasDeadlift = true;\n        }\n      }\n\n      // Set attempts.\n      // ==========================================\n      if (hasSquat) {\n        this.props.enterAttempt(entry.id, \"S\", 1, this.randomAttempt());\n      }\n      if (hasBench) {\n        this.props.enterAttempt(entry.id, \"B\", 1, this.randomAttempt());\n      }\n      if (hasDeadlift) {\n        this.props.enterAttempt(entry.id, \"D\", 1, this.randomAttempt());\n      }\n\n      // Set rack info.\n      // ==========================================\n      if (hasSquat) {\n        const height = String(randomInt(2, 18));\n        const pos = Math.random() < 0.9 ? \"out\" : \"in\";\n        this.props.updateRegistration(entry.id, {\n          squatRackInfo: height + pos\n        });\n      }\n\n      if (hasBench) {\n        const height = String(randomInt(0, 12));\n        const safety = String(randomInt(0, 4));\n        this.props.updateRegistration(entry.id, {\n          benchRackInfo: height + \"/\" + safety\n        });\n      }\n    }\n  };\n\n  render() {\n    return <Button onClick={this.randomizeWeighins}>Weigh-ins</Button>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  meet: state.meet,\n  registration: state.registration\n});\n\nconst mapDispatchToProps = (dispatch): DispatchProps => ({\n  updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj)),\n  enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n    dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeWeighinsButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Tools for manipulating state information to aid debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, ButtonGroup, Panel } from \"react-bootstrap\";\n\nimport RandomizeMeetSetupButton from \"./RandomizeMeetSetup\";\nimport RandomizeRegistrationButton from \"./RandomizeRegistration\";\nimport RandomizeWeighinsButton from \"./RandomizeWeighins\";\n\nclass StateTools extends React.Component {\n  // The simplest possible way to implement a Reset button.\n  reInitializeRedux = () => {\n    localStorage.clear();\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div>\n        <Panel bsStyle=\"danger\">\n          <Panel.Heading>Generate Random Valid Data</Panel.Heading>\n          <Panel.Body>\n            <Button style={{ marginRight: \"15px\" }} bsStyle=\"danger\" onClick={this.reInitializeRedux}>\n              Reset\n            </Button>\n            <ButtonGroup>\n              <RandomizeMeetSetupButton />\n              <RandomizeRegistrationButton />\n              <RandomizeWeighinsButton />\n            </ButtonGroup>\n          </Panel.Body>\n        </Panel>\n\n        <Panel bsStyle=\"info\">\n          <Panel.Heading>Redux State</Panel.Heading>\n          <Panel.Body>\n            <pre>{JSON.stringify(this.props, null, 2)}</pre>\n          </Panel.Body>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  ...state\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(StateTools);\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// A page dedicated to debugging tools.\n\nimport React from \"react\";\nimport StateTools from \"../components/debug/StateTools\";\n\nconst DebugContainer = () => {\n  return (\n    <div style={{ marginRight: \"20px\", marginLeft: \"20px\" }}>\n      <StateTools />\n    </div>\n  );\n};\n\nexport default DebugContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Col, Grid, Row, Panel } from \"react-bootstrap\";\n\n// Extracted out so that <pre> renders linebreaks properly.\nconst licenseText =\n  \"This program is free software: you can redistribute it and/or modify\\n\" +\n  \"it under the terms of the GNU Affero General Public License as\\n\" +\n  \"published by the Free Software Foundation, either version 3 of the\\n\" +\n  \"License, or (at your option) any later version.\\n\" +\n  \"\\n\" +\n  \"This program is distributed in the hope that it will be useful,\\n\" +\n  \"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\" +\n  \"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\" +\n  \"GNU Affero General Public License for more details.\";\n\nclass AboutContainer extends React.Component<{}> {\n  render() {\n    return (\n      <Grid>\n        <Row>\n          <Col md={6}>\n            <Panel>\n              <Panel.Heading>Credits</Panel.Heading>\n              <Panel.Body>\n                <p>\n                  OpenLifter is made by the{\" \"}\n                  <a href=\"https://www.openpowerlifting.org\" rel=\"noopener noreferrer\" target=\"_blank\">\n                    OpenPowerlifting project\n                  </a>\n                  .\n                </p>\n                <p>\n                  <ul>\n                    <li>Tommy DeFea &mdash; Graphic design</li>\n                    <li>Trystan Oakley &mdash; Testing</li>\n                    <li>Matt Pearce &mdash; Coefficient calculations</li>\n                    <li>Sean Stangl &mdash; Programming and maintenance</li>\n                    <li>Michael Vessia &mdash; Programming and maintenance</li>\n                    <li>Sarah Wellberg &mdash; UX design and testing</li>\n                  </ul>\n                </p>\n              </Panel.Body>\n            </Panel>\n          </Col>\n\n          <Col md={6}>\n            <Panel>\n              <Panel.Heading>License</Panel.Heading>\n              <Panel.Body>\n                <p>OpenLifter is Copyright (C) 2018-2019 The OpenPowerlifting Project.</p>\n                <p>OpenLifter is Free Software. Free Software grants you the following freedoms:</p>\n                <ol>\n                  <li>The freedom to run the program as you wish, for any purpose.</li>\n                  <li>The freedom to study how the program works, and change it as you wish.</li>\n                  <li>The freedom to redistribute copies so you can help others.</li>\n                  <li>The freedom to distribute copies of your modified versions to others.</li>\n                </ol>\n                <p>\n                  The AGPLv3+ license we use means that if you distribute this software or host it on a server, you must\n                  give your users the same rights we give you, including full source code. In addition, AGPLv3+ code\n                  must <i>remain</i> free/libre, and cannot be included in proprietary software or in free/libre\n                  software with a weaker or incompatible license.\n                </p>\n                <p>Here is the short license blurb:</p>\n                <pre>{licenseText}</pre>\n                <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  Full Text of the GNU Affero General Public License, Version 3\n                </a>\n                <br />\n                <a href=\"https://www.gnu.org/licenses/gpl-faq.html\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  FAQ about GNU Licenses\n                </a>\n              </Panel.Body>\n            </Panel>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\nexport default AboutContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the Navigation component for navigating between pages using react-router.\n\nimport React from \"react\";\nimport { Navbar, Nav, NavItem } from \"react-bootstrap\";\n\n// The LinkContainer is used to wrap Components that change the URL,\n// hooking them up with the Router.\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nconst Navigation = () => {\n  return (\n    <Navbar>\n      <Navbar.Brand>\n        <img alt=\"OpenLifter\" src=\"openlifter-white.svg\" />\n      </Navbar.Brand>\n\n      {/* Navbar uses Toggle and Collapse to automatically create a hamburger menu\n          in case of overflow on small screens.*/}\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav>\n          <LinkContainer exact to=\"/\">\n            <NavItem eventKey={1}>Home</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/meet-setup\">\n            <NavItem eventKey={2}>Meet Setup</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/registration\">\n            <NavItem eventKey={3}>Registration</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/weigh-ins\">\n            <NavItem eventKey={4}>Weigh-ins</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/flight-order\">\n            <NavItem eventKey={5}>Flight Order</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/lifting\">\n            <NavItem eventKey={6}>Lifting</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/results\">\n            <NavItem eventKey={7}>Results</NavItem>\n          </LinkContainer>\n          <LinkContainer to=\"/debug\">\n            <NavItem eventKey={8}>Debug</NavItem>\n          </LinkContainer>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport configureStore from \"./store\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { addLocaleData } from \"react-intl\";\nimport es from \"react-intl/locale-data/es\";\nimport eo from \"react-intl/locale-data/eo\";\nimport OpenLifterIntlProvider from \"./components/translations/OpenLifterIntlProvider\";\n\nimport HomeContainer from \"./containers/HomeContainer\";\nimport MeetSetupContainer from \"./containers/MeetSetupContainer\";\nimport RegistrationContainer from \"./containers/RegistrationContainer\";\nimport WeighinsContainer from \"./containers/WeighinsContainer\";\nimport LiftingContainer from \"./containers/LiftingContainer\";\nimport FlightOrderContainer from \"./containers/FlightOrderContainer\";\nimport ResultsContainer from \"./containers/ResultsContainer\";\nimport DebugContainer from \"./containers/DebugContainer\";\nimport AboutContainer from \"./containers/AboutContainer\";\nimport Navigation from \"./components/Navigation\";\n\naddLocaleData([...es, ...eo]);\n\nclass App extends React.Component {\n  render() {\n    let { store, persistor } = configureStore();\n\n    return (\n      // Provider is a React component from the react-redux library.\n      // Its purpose is to \"provide\" the given store to its child components.\n      // Because the Provider wraps the whole App here, the store is global state.\n      //\n      // Switch iterates over its children (Routes) and renders the first one that matches the current path name\n      //\n      // Route takes a path and a component, and renders the given component if the current path matches the specified path.\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <OpenLifterIntlProvider>\n            <Router basename={process.env.REACT_APP_ROUTER_BASENAME}>\n              <div>\n                <Navigation />\n                <Switch>\n                  <Route exact path=\"/\" component={HomeContainer} />\n                  <Route path=\"/meet-setup\" component={MeetSetupContainer} />\n                  <Route path=\"/registration\" component={RegistrationContainer} />\n                  <Route path=\"/weigh-ins\" component={WeighinsContainer} />\n                  <Route path=\"/flight-order\" component={FlightOrderContainer} />\n                  <Route path=\"/lifting\" component={LiftingContainer} />\n                  <Route path=\"/results\" component={ResultsContainer} />\n                  <Route path=\"/debug\" component={DebugContainer} />\n                  <Route path=\"/about\" component={AboutContainer} />\n                </Switch>\n              </div>\n            </Router>\n          </OpenLifterIntlProvider>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// vim: set ts=2 sts=2 sw=2 et:\n// @flow\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"./bootstrap-custom/bootstrap-custom.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement !== null) {\n  ReactDOM.render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LeftPanel_container__3puvp\",\"activeCard\":\"LeftPanel_activeCard__xIn4U\",\"loadingBar\":\"LeftPanel_loadingBar__1UySC\",\"attemptText\":\"LeftPanel_attemptText__5bTr4\",\"barArea\":\"LeftPanel_barArea__1qr1-\",\"nextText\":\"LeftPanel_nextText__3pjTq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftDivider\":\"OneFlightOrder_leftDivider__8pDMh\"};"],"sourceRoot":""}